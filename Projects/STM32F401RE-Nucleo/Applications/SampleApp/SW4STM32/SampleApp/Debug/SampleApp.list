
SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eb4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08004054  08004054  00014054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  080042e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004e8  20000074  08004354  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000055c  08004354  0002055c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_line   0000ea52  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00020d3d  00000000  00000000  0002eaf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003e48  00000000  00000000  0004f833  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d88  00000000  00000000  00053680  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fa0  00000000  00000000  00054408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000097b7  00000000  00000000  000553a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a476  00000000  00000000  0005eb5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0008b330  00000000  00000000  00078fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00104305  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000031c4  00000000  00000000  00104384  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  00107548  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  001075e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800403c 	.word	0x0800403c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800403c 	.word	0x0800403c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000594:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000596:	e003      	b.n	80005a0 <LoopCopyDataInit>

08000598 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800059a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800059c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800059e:	3104      	adds	r1, #4

080005a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005a0:	480b      	ldr	r0, [pc, #44]	; (80005d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005a8:	d3f6      	bcc.n	8000598 <CopyDataInit>
  ldr  r2, =_sbss
 80005aa:	4a0b      	ldr	r2, [pc, #44]	; (80005d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005ac:	e002      	b.n	80005b4 <LoopFillZerobss>

080005ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005b0:	f842 3b04 	str.w	r3, [r2], #4

080005b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005b8:	d3f9      	bcc.n	80005ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ba:	f000 ff3f 	bl	800143c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005be:	f002 fd21 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005c2:	f000 facb 	bl	8000b5c <main>
  bx  lr    
 80005c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80005cc:	080042e0 	.word	0x080042e0
  ldr  r0, =_sdata
 80005d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80005d4:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80005d8:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80005dc:	2000055c 	.word	0x2000055c

080005e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005e0:	e7fe      	b.n	80005e0 <ADC_IRQHandler>
	...

080005e4 <MX_X_CUBE_BLE1_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_X_CUBE_BLE1_Init(void)
{
 80005e4:	b530      	push	{r4, r5, lr}
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80005e6:	2100      	movs	r1, #0
{
 80005e8:	b08b      	sub	sp, #44	; 0x2c
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80005ea:	4608      	mov	r0, r1
 80005ec:	f000 fe10 	bl	8001210 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fdd1 	bl	8001198 <BSP_LED_Init>
    
  BSP_COM_Init(COM1); 
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fe7c 	bl	80012f4 <BSP_COM_Init>
  hci_init(user_notify, NULL);
 80005fc:	2100      	movs	r1, #0
 80005fe:	4847      	ldr	r0, [pc, #284]	; (800071c <MX_X_CUBE_BLE1_Init+0x138>)
 8000600:	4d47      	ldr	r5, [pc, #284]	; (8000720 <MX_X_CUBE_BLE1_Init+0x13c>)
  if (BLE_Role == CLIENT) {
 8000602:	4c48      	ldr	r4, [pc, #288]	; (8000724 <MX_X_CUBE_BLE1_Init+0x140>)
  hci_init(user_notify, NULL);
 8000604:	f002 fb6e 	bl	8002ce4 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000608:	f10d 011e 	add.w	r1, sp, #30
 800060c:	f10d 0017 	add.w	r0, sp, #23
 8000610:	f002 faa3 	bl	8002b5a <getBlueNRGVersion>
  hci_reset();
 8000614:	f002 fac2 	bl	8002b9c <hci_reset>
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8000618:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800061c:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8000620:	4841      	ldr	r0, [pc, #260]	; (8000728 <MX_X_CUBE_BLE1_Init+0x144>)
 8000622:	f002 fd27 	bl	8003074 <iprintf>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000626:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800062a:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1; 
 800062c:	bf84      	itt	hi
 800062e:	2301      	movhi	r3, #1
 8000630:	702b      	strbhi	r3, [r5, #0]
  if (BLE_Role == CLIENT) {
 8000632:	7823      	ldrb	r3, [r4, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d156      	bne.n	80006e6 <MX_X_CUBE_BLE1_Init+0x102>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8000638:	22bb      	movs	r2, #187	; 0xbb
 800063a:	f88d 2020 	strb.w	r2, [sp, #32]
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800063e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 8000642:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8000646:	23e1      	movs	r3, #225	; 0xe1
 8000648:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000652:	2106      	movs	r1, #6
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000654:	2302      	movs	r3, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000656:	aa08      	add	r2, sp, #32
 8000658:	2000      	movs	r0, #0
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800065a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800065e:	f002 fa24 	bl	8002aaa <aci_hal_write_config_data>
  if (ret) {
 8000662:	4601      	mov	r1, r0
 8000664:	b110      	cbz	r0, 800066c <MX_X_CUBE_BLE1_Init+0x88>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000666:	4831      	ldr	r0, [pc, #196]	; (800072c <MX_X_CUBE_BLE1_Init+0x148>)
 8000668:	f002 fd04 	bl	8003074 <iprintf>
  ret = aci_gatt_init();    
 800066c:	f002 f887 	bl	800277e <aci_gatt_init>
  if (ret) {
 8000670:	b110      	cbz	r0, 8000678 <MX_X_CUBE_BLE1_Init+0x94>
    printf("GATT_Init failed.\n");
 8000672:	482f      	ldr	r0, [pc, #188]	; (8000730 <MX_X_CUBE_BLE1_Init+0x14c>)
 8000674:	f002 fd86 	bl	8003184 <puts>
  if (BLE_Role == SERVER) {
 8000678:	7820      	ldrb	r0, [r4, #0]
 800067a:	2801      	cmp	r0, #1
 800067c:	ab07      	add	r3, sp, #28
 800067e:	f10d 021a 	add.w	r2, sp, #26
 8000682:	d139      	bne.n	80006f8 <MX_X_CUBE_BLE1_Init+0x114>
    if (bnrg_expansion_board == IDB05A1) {
 8000684:	782d      	ldrb	r5, [r5, #0]
 8000686:	2d01      	cmp	r5, #1
 8000688:	d132      	bne.n	80006f0 <MX_X_CUBE_BLE1_Init+0x10c>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800068a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800068e:	2100      	movs	r1, #0
 8000690:	ab06      	add	r3, sp, #24
 8000692:	2207      	movs	r2, #7
 8000694:	4628      	mov	r0, r5
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000696:	f001 ff0f 	bl	80024b8 <aci_gap_init_IDB05A1>
  if (ret != BLE_STATUS_SUCCESS) {
 800069a:	b110      	cbz	r0, 80006a2 <MX_X_CUBE_BLE1_Init+0xbe>
    printf("GAP_Init failed.\n");
 800069c:	4825      	ldr	r0, [pc, #148]	; (8000734 <MX_X_CUBE_BLE1_Init+0x150>)
 800069e:	f002 fd71 	bl	8003184 <puts>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80006a2:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_X_CUBE_BLE1_Init+0x154>)
 80006a4:	9302      	str	r3, [sp, #8]
 80006a6:	2200      	movs	r2, #0
 80006a8:	2310      	movs	r3, #16
 80006aa:	2001      	movs	r0, #1
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	9003      	str	r0, [sp, #12]
 80006b0:	9201      	str	r2, [sp, #4]
 80006b2:	2307      	movs	r3, #7
 80006b4:	4611      	mov	r1, r2
 80006b6:	f001 ffd7 	bl	8002668 <aci_gap_set_auth_requirement>
  if (ret == BLE_STATUS_SUCCESS) {
 80006ba:	b910      	cbnz	r0, 80006c2 <MX_X_CUBE_BLE1_Init+0xde>
    printf("BLE Stack Initialized.\n");
 80006bc:	481f      	ldr	r0, [pc, #124]	; (800073c <MX_X_CUBE_BLE1_Init+0x158>)
 80006be:	f002 fd61 	bl	8003184 <puts>
  if (BLE_Role == SERVER) {
 80006c2:	7823      	ldrb	r3, [r4, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d126      	bne.n	8000716 <MX_X_CUBE_BLE1_Init+0x132>
    printf("SERVER: BLE Stack Initialized\n");
 80006c8:	481d      	ldr	r0, [pc, #116]	; (8000740 <MX_X_CUBE_BLE1_Init+0x15c>)
 80006ca:	f002 fd5b 	bl	8003184 <puts>
    ret = Add_Sample_Service();
 80006ce:	f000 fb1f 	bl	8000d10 <Add_Sample_Service>
    if (ret == BLE_STATUS_SUCCESS)
 80006d2:	b9f0      	cbnz	r0, 8000712 <MX_X_CUBE_BLE1_Init+0x12e>
      printf("Service added successfully.\n");
 80006d4:	481b      	ldr	r0, [pc, #108]	; (8000744 <MX_X_CUBE_BLE1_Init+0x160>)
    printf("CLIENT: BLE Stack Initialized\n");
 80006d6:	f002 fd55 	bl	8003184 <puts>
  ret = aci_hal_set_tx_power_level(1,4);
 80006da:	2104      	movs	r1, #4
 80006dc:	2001      	movs	r0, #1
 80006de:	f002 fa16 	bl	8002b0e <aci_hal_set_tx_power_level>
}
 80006e2:	b00b      	add	sp, #44	; 0x2c
 80006e4:	bd30      	pop	{r4, r5, pc}
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80006e6:	23aa      	movs	r3, #170	; 0xaa
 80006e8:	f88d 3020 	strb.w	r3, [sp, #32]
 80006ec:	2300      	movs	r3, #0
 80006ee:	e7a6      	b.n	800063e <MX_X_CUBE_BLE1_Init+0x5a>
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006f0:	a906      	add	r1, sp, #24
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006f2:	f001 ff1f 	bl	8002534 <aci_gap_init_IDB04A1>
 80006f6:	e7d0      	b.n	800069a <MX_X_CUBE_BLE1_Init+0xb6>
    if (bnrg_expansion_board == IDB05A1) {
 80006f8:	7829      	ldrb	r1, [r5, #0]
 80006fa:	2901      	cmp	r1, #1
 80006fc:	d106      	bne.n	800070c <MX_X_CUBE_BLE1_Init+0x128>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80006fe:	e88d 000c 	stmia.w	sp, {r2, r3}
 8000702:	2100      	movs	r1, #0
 8000704:	ab06      	add	r3, sp, #24
 8000706:	2207      	movs	r2, #7
 8000708:	2004      	movs	r0, #4
 800070a:	e7c4      	b.n	8000696 <MX_X_CUBE_BLE1_Init+0xb2>
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800070c:	a906      	add	r1, sp, #24
 800070e:	2003      	movs	r0, #3
 8000710:	e7ef      	b.n	80006f2 <MX_X_CUBE_BLE1_Init+0x10e>
      printf("Error while adding service.\n");
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_X_CUBE_BLE1_Init+0x164>)
 8000714:	e7df      	b.n	80006d6 <MX_X_CUBE_BLE1_Init+0xf2>
    printf("CLIENT: BLE Stack Initialized\n");
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_X_CUBE_BLE1_Init+0x168>)
 8000718:	e7dd      	b.n	80006d6 <MX_X_CUBE_BLE1_Init+0xf2>
 800071a:	bf00      	nop
 800071c:	080010ad 	.word	0x080010ad
 8000720:	20000090 	.word	0x20000090
 8000724:	20000000 	.word	0x20000000
 8000728:	080040c3 	.word	0x080040c3
 800072c:	080040d7 	.word	0x080040d7
 8000730:	080040f7 	.word	0x080040f7
 8000734:	08004109 	.word	0x08004109
 8000738:	0001e240 	.word	0x0001e240
 800073c:	0800411a 	.word	0x0800411a
 8000740:	08004131 	.word	0x08004131
 8000744:	0800414f 	.word	0x0800414f
 8000748:	0800416b 	.word	0x0800416b
 800074c:	08004187 	.word	0x08004187

08000750 <MX_X_CUBE_BLE1_Process>:
{
 8000750:	b570      	push	{r4, r5, r6, lr}
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
  if (set_connectable) 
 8000752:	4c31      	ldr	r4, [pc, #196]	; (8000818 <MX_X_CUBE_BLE1_Process+0xc8>)
 8000754:	4d31      	ldr	r5, [pc, #196]	; (800081c <MX_X_CUBE_BLE1_Process+0xcc>)
 8000756:	7823      	ldrb	r3, [r4, #0]
{
 8000758:	b086      	sub	sp, #24
  if (set_connectable) 
 800075a:	b133      	cbz	r3, 800076a <MX_X_CUBE_BLE1_Process+0x1a>
  {
    /* Establish connection with remote device */
    Make_Connection();
 800075c:	f000 fb40 	bl	8000de0 <Make_Connection>
    set_connectable = FALSE;
 8000760:	2000      	movs	r0, #0
 8000762:	7020      	strb	r0, [r4, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000764:	f000 fda0 	bl	80012a8 <BSP_PB_GetState>
 8000768:	7028      	strb	r0, [r5, #0]
  }
  
  if (BLE_Role == CLIENT) 
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_X_CUBE_BLE1_Process+0xd0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b9d3      	cbnz	r3, 80007a6 <MX_X_CUBE_BLE1_Process+0x56>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8000770:	4c2c      	ldr	r4, [pc, #176]	; (8000824 <MX_X_CUBE_BLE1_Process+0xd4>)
 8000772:	6823      	ldr	r3, [r4, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d045      	beq.n	8000804 <MX_X_CUBE_BLE1_Process+0xb4>
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_X_CUBE_BLE1_Process+0xd8>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d141      	bne.n	8000804 <MX_X_CUBE_BLE1_Process+0xb4>
      startReadTXCharHandle();
 8000780:	f000 fb88 	bl	8000e94 <startReadTXCharHandle>
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){      
      startReadRXCharHandle();
    }
    
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled) 
 8000784:	6823      	ldr	r3, [r4, #0]
 8000786:	b173      	cbz	r3, 80007a6 <MX_X_CUBE_BLE1_Process+0x56>
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <MX_X_CUBE_BLE1_Process+0xd8>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b15b      	cbz	r3, 80007a6 <MX_X_CUBE_BLE1_Process+0x56>
 800078e:	4b27      	ldr	r3, [pc, #156]	; (800082c <MX_X_CUBE_BLE1_Process+0xdc>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b143      	cbz	r3, 80007a6 <MX_X_CUBE_BLE1_Process+0x56>
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_X_CUBE_BLE1_Process+0xe0>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800079c:	b91b      	cbnz	r3, 80007a6 <MX_X_CUBE_BLE1_Process+0x56>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 800079e:	f000 fd2d 	bl	80011fc <BSP_LED_Off>
      enableNotification();
 80007a2:	f000 fbfd 	bl	8000fa0 <enableNotification>
    }
  }  

  /* Check if the user has pushed the button */  
  if (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state)
 80007a6:	2000      	movs	r0, #0
 80007a8:	f000 fd7e 	bl	80012a8 <BSP_PB_GetState>
 80007ac:	782b      	ldrb	r3, [r5, #0]
 80007ae:	fab3 f383 	clz	r3, r3
 80007b2:	095b      	lsrs	r3, r3, #5
 80007b4:	4298      	cmp	r0, r3
 80007b6:	d121      	bne.n	80007fc <MX_X_CUBE_BLE1_Process+0xac>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fd75 	bl	80012a8 <BSP_PB_GetState>
 80007be:	782b      	ldrb	r3, [r5, #0]
 80007c0:	fab3 f383 	clz	r3, r3
 80007c4:	095b      	lsrs	r3, r3, #5
 80007c6:	4298      	cmp	r0, r3
 80007c8:	d0f6      	beq.n	80007b8 <MX_X_CUBE_BLE1_Process+0x68>
    
    if(connected && notification_enabled){
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_X_CUBE_BLE1_Process+0xd4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	b1ab      	cbz	r3, 80007fc <MX_X_CUBE_BLE1_Process+0xac>
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <MX_X_CUBE_BLE1_Process+0xe0>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	b193      	cbz	r3, 80007fc <MX_X_CUBE_BLE1_Process+0xac>
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <MX_X_CUBE_BLE1_Process+0xe4>)
 80007d8:	aa01      	add	r2, sp, #4
 80007da:	f103 0610 	add.w	r6, r3, #16
 80007de:	4615      	mov	r5, r2
 80007e0:	6818      	ldr	r0, [r3, #0]
 80007e2:	6859      	ldr	r1, [r3, #4]
 80007e4:	4614      	mov	r4, r2
 80007e6:	c403      	stmia	r4!, {r0, r1}
 80007e8:	3308      	adds	r3, #8
 80007ea:	42b3      	cmp	r3, r6
 80007ec:	4622      	mov	r2, r4
 80007ee:	d1f7      	bne.n	80007e0 <MX_X_CUBE_BLE1_Process+0x90>
 80007f0:	6818      	ldr	r0, [r3, #0]
 80007f2:	6020      	str	r0, [r4, #0]
      sendData(data, sizeof(data));
 80007f4:	2114      	movs	r1, #20
 80007f6:	4628      	mov	r0, r5
 80007f8:	f000 fbaa 	bl	8000f50 <sendData>
  hci_user_evt_proc();
 80007fc:	f002 fb76 	bl	8002eec <hci_user_evt_proc>
}
 8000800:	b006      	add	sp, #24
 8000802:	bd70      	pop	{r4, r5, r6, pc}
    else if (connected && !end_read_rx_char_handle){      
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0bc      	beq.n	8000784 <MX_X_CUBE_BLE1_Process+0x34>
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_X_CUBE_BLE1_Process+0xdc>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d1b8      	bne.n	8000784 <MX_X_CUBE_BLE1_Process+0x34>
      startReadRXCharHandle();
 8000812:	f000 fb63 	bl	8000edc <startReadRXCharHandle>
 8000816:	e7b5      	b.n	8000784 <MX_X_CUBE_BLE1_Process+0x34>
 8000818:	20000001 	.word	0x20000001
 800081c:	20000488 	.word	0x20000488
 8000820:	20000000 	.word	0x20000000
 8000824:	20000198 	.word	0x20000198
 8000828:	2000019c 	.word	0x2000019c
 800082c:	2000019d 	.word	0x2000019d
 8000830:	20000195 	.word	0x20000195
 8000834:	08004054 	.word	0x08004054

08000838 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	2400      	movs	r4, #0
 800083e:	4b16      	ldr	r3, [pc, #88]	; (8000898 <HCI_TL_SPI_Init+0x60>)
 8000840:	9400      	str	r4, [sp, #0]
 8000842:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000844:	4d15      	ldr	r5, [pc, #84]	; (800089c <HCI_TL_SPI_Init+0x64>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	f042 0201 	orr.w	r2, r2, #1
 800084a:	631a      	str	r2, [r3, #48]	; 0x30
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	9403      	str	r4, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000856:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <HCI_TL_SPI_Init+0x68>)
 800085c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800085e:	a901      	add	r1, sp, #4
 8000860:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000862:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000864:	f000 fefa 	bl	800165c <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000868:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800086c:	a901      	add	r1, sp, #4
 800086e:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000870:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000878:	f000 fef0 	bl	800165c <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 800087c:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800087e:	a901      	add	r1, sp, #4
 8000880:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000882:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000884:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800088a:	f000 fee7 	bl	800165c <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 800088e:	f000 f9f9 	bl	8000c84 <BSP_SPI1_Init>
}
 8000892:	b006      	add	sp, #24
 8000894:	bd70      	pop	{r4, r5, r6, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000
 80008a0:	10110000 	.word	0x10110000

080008a4 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80008a4:	b510      	push	{r4, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 80008a6:	4c08      	ldr	r4, [pc, #32]	; (80008c8 <HCI_TL_SPI_DeInit+0x24>)
 80008a8:	2101      	movs	r1, #1
 80008aa:	4620      	mov	r0, r4
 80008ac:	f000 ffac 	bl	8001808 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 80008b0:	4620      	mov	r0, r4
 80008b2:	2102      	movs	r1, #2
 80008b4:	f000 ffa8 	bl	8001808 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80008b8:	4620      	mov	r0, r4
 80008ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008be:	f000 ffa3 	bl	8001808 <HAL_GPIO_DeInit>
  return 0;
}
 80008c2:	2000      	movs	r0, #0
 80008c4:	bd10      	pop	{r4, pc}
 80008c6:	bf00      	nop
 80008c8:	40020000 	.word	0x40020000

080008cc <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80008cc:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80008ce:	4c0a      	ldr	r4, [pc, #40]	; (80008f8 <HCI_TL_SPI_Reset+0x2c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d6:	4620      	mov	r0, r4
 80008d8:	f001 f812 	bl	8001900 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80008dc:	2005      	movs	r0, #5
 80008de:	f000 fe21 	bl	8001524 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e8:	4620      	mov	r0, r4
 80008ea:	f001 f809 	bl	8001900 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80008ee:	2005      	movs	r0, #5
 80008f0:	f000 fe18 	bl	8001524 <HAL_Delay>
  return 0;
}  
 80008f4:	2000      	movs	r0, #0
 80008f6:	bd10      	pop	{r4, pc}
 80008f8:	40020000 	.word	0x40020000

080008fc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80008fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fe:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000900:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 8000902:	23ff      	movs	r3, #255	; 0xff
 8000904:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000908:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800090a:	230b      	movs	r3, #11
{
 800090c:	4607      	mov	r7, r0
 800090e:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000910:	481d      	ldr	r0, [pc, #116]	; (8000988 <HCI_TL_SPI_Receive+0x8c>)
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000912:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000916:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8000918:	f88d 4009 	strb.w	r4, [sp, #9]
 800091c:	f88d 400a 	strb.w	r4, [sp, #10]
 8000920:	f88d 400b 	strb.w	r4, [sp, #11]
 8000924:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8000928:	f000 ffea 	bl	8001900 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800092c:	2205      	movs	r2, #5
 800092e:	a904      	add	r1, sp, #16
 8000930:	a802      	add	r0, sp, #8
 8000932:	f000 f973 	bl	8000c1c <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8000936:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800093a:	2b02      	cmp	r3, #2
 800093c:	d121      	bne.n	8000982 <HCI_TL_SPI_Receive+0x86>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 800093e:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8000942:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 8000946:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 800094a:	d007      	beq.n	800095c <HCI_TL_SPI_Receive+0x60>
 800094c:	42ae      	cmp	r6, r5
 800094e:	bf28      	it	cs
 8000950:	462e      	movcs	r6, r5
 8000952:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 8000954:	42b5      	cmp	r5, r6
 8000956:	f104 0401 	add.w	r4, r4, #1
 800095a:	d307      	bcc.n	800096c <HCI_TL_SPI_Receive+0x70>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2102      	movs	r1, #2
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <HCI_TL_SPI_Receive+0x8c>)
 8000962:	f000 ffcd 	bl	8001900 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8000966:	4628      	mov	r0, r5
 8000968:	b007      	add	sp, #28
 800096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 800096c:	2201      	movs	r2, #1
 800096e:	f10d 0107 	add.w	r1, sp, #7
 8000972:	f10d 0006 	add.w	r0, sp, #6
 8000976:	f000 f951 	bl	8000c1c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800097a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800097e:	557b      	strb	r3, [r7, r5]
 8000980:	e7e7      	b.n	8000952 <HCI_TL_SPI_Receive+0x56>
  uint8_t len = 0;
 8000982:	4625      	mov	r5, r4
 8000984:	e7ea      	b.n	800095c <HCI_TL_SPI_Receive+0x60>
 8000986:	bf00      	nop
 8000988:	40020000 	.word	0x40020000

0800098c <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 800098c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000990:	b085      	sub	sp, #20
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8000992:	230a      	movs	r3, #10
 8000994:	f88d 3000 	strb.w	r3, [sp]
 8000998:	2300      	movs	r3, #0
{  
 800099a:	4680      	mov	r8, r0
 800099c:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800099e:	f88d 3001 	strb.w	r3, [sp, #1]
 80009a2:	f88d 3002 	strb.w	r3, [sp, #2]
 80009a6:	f88d 3003 	strb.w	r3, [sp, #3]
 80009aa:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80009ae:	f000 fdb3 	bl	8001518 <HAL_GetTick>
  do
  {
    result = 0;
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80009b2:	4e1a      	ldr	r6, [pc, #104]	; (8000a1c <HCI_TL_SPI_Send+0x90>)
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80009b4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8000a20 <HCI_TL_SPI_Send+0x94>
  uint32_t tickstart = HAL_GetTick();
 80009b8:	4607      	mov	r7, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2102      	movs	r1, #2
 80009be:	4630      	mov	r0, r6
 80009c0:	f000 ff9e 	bl	8001900 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80009c4:	2205      	movs	r2, #5
 80009c6:	a902      	add	r1, sp, #8
 80009c8:	4668      	mov	r0, sp
 80009ca:	f000 f927 	bl	8000c1c <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 80009ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d119      	bne.n	8000a0a <HCI_TL_SPI_Send+0x7e>
      if(header_slave[1] >= size) 
 80009d6:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80009da:	42ab      	cmp	r3, r5
 80009dc:	d318      	bcc.n	8000a10 <HCI_TL_SPI_Send+0x84>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80009de:	462a      	mov	r2, r5
 80009e0:	4649      	mov	r1, r9
 80009e2:	4640      	mov	r0, r8
 80009e4:	f000 f91a 	bl	8000c1c <BSP_SPI1_SendRecv>
    result = 0;
 80009e8:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2102      	movs	r1, #2
 80009ee:	4630      	mov	r0, r6
 80009f0:	f000 ff86 	bl	8001900 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80009f4:	f000 fd90 	bl	8001518 <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	280f      	cmp	r0, #15
 80009fc:	d80b      	bhi.n	8000a16 <HCI_TL_SPI_Send+0x8a>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80009fe:	2c00      	cmp	r4, #0
 8000a00:	d1db      	bne.n	80009ba <HCI_TL_SPI_Send+0x2e>
  
  return result;
}
 8000a02:	4620      	mov	r0, r4
 8000a04:	b005      	add	sp, #20
 8000a06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      result = -1;
 8000a0a:	f04f 34ff 	mov.w	r4, #4294967295
 8000a0e:	e7ec      	b.n	80009ea <HCI_TL_SPI_Send+0x5e>
        result = -2;
 8000a10:	f06f 0401 	mvn.w	r4, #1
 8000a14:	e7e9      	b.n	80009ea <HCI_TL_SPI_Send+0x5e>
      result = -3;
 8000a16:	f06f 0402 	mvn.w	r4, #2
  return result;
 8000a1a:	e7f2      	b.n	8000a02 <HCI_TL_SPI_Send+0x76>
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	20000091 	.word	0x20000091

08000a24 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8000a24:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8000a26:	4c06      	ldr	r4, [pc, #24]	; (8000a40 <hci_tl_lowlevel_isr+0x1c>)
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f000 ff62 	bl	80018f4 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8000a30:	2801      	cmp	r0, #1
 8000a32:	d000      	beq.n	8000a36 <hci_tl_lowlevel_isr+0x12>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8000a34:	bd10      	pop	{r4, pc}
    hci_notify_asynch_evt(NULL);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f002 fa78 	bl	8002f2c <hci_notify_asynch_evt>
 8000a3c:	e7f4      	b.n	8000a28 <hci_tl_lowlevel_isr+0x4>
 8000a3e:	bf00      	nop
 8000a40:	40020000 	.word	0x40020000

08000a44 <hci_tl_lowlevel_init>:
{
 8000a44:	b510      	push	{r4, lr}
 8000a46:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <hci_tl_lowlevel_init+0x4c>)
 8000a4a:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <hci_tl_lowlevel_init+0x50>)
 8000a4e:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <hci_tl_lowlevel_init+0x54>)
 8000a52:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8000a54:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <hci_tl_lowlevel_init+0x58>)
 8000a56:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000a58:	4c11      	ldr	r4, [pc, #68]	; (8000aa0 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <hci_tl_lowlevel_init+0x60>)
 8000a5c:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8000a5e:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <hci_tl_lowlevel_init+0x64>)
 8000a62:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8000a64:	f002 f96a 	bl	8002d3c <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8000a68:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000a6c:	4620      	mov	r0, r4
 8000a6e:	f000 fc71 	bl	8001354 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8000a72:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <hci_tl_lowlevel_init+0x68>)
 8000a74:	2100      	movs	r1, #0
 8000a76:	4620      	mov	r0, r4
 8000a78:	f000 fc66 	bl	8001348 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4611      	mov	r1, r2
 8000a80:	2006      	movs	r0, #6
 8000a82:	f000 fd75 	bl	8001570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a86:	2006      	movs	r0, #6
 8000a88:	f000 fda6 	bl	80015d8 <HAL_NVIC_EnableIRQ>
}
 8000a8c:	b008      	add	sp, #32
 8000a8e:	bd10      	pop	{r4, pc}
 8000a90:	08000839 	.word	0x08000839
 8000a94:	080008a5 	.word	0x080008a5
 8000a98:	0800098d 	.word	0x0800098d
 8000a9c:	080008fd 	.word	0x080008fd
 8000aa0:	2000048c 	.word	0x2000048c
 8000aa4:	080008cd 	.word	0x080008cd
 8000aa8:	08000c45 	.word	0x08000c45
 8000aac:	08000a25 	.word	0x08000a25

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b530      	push	{r4, r5, lr}
 8000ab2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <SystemClock_Config+0xa4>)
 8000ab8:	9201      	str	r2, [sp, #4]
 8000aba:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000abc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000ac0:	6419      	str	r1, [r3, #64]	; 0x40
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ac4:	4924      	ldr	r1, [pc, #144]	; (8000b58 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	9301      	str	r3, [sp, #4]
 8000acc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ace:	9202      	str	r2, [sp, #8]
 8000ad0:	680b      	ldr	r3, [r1, #0]
 8000ad2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ada:	600b      	str	r3, [r1, #0]
 8000adc:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ade:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ae0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000aec:	2310      	movs	r3, #16
 8000aee:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000af0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afa:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000afc:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b00:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b02:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b04:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b06:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f000 ff04 	bl	8001914 <HAL_RCC_OscConfig>
 8000b0c:	b100      	cbz	r0, 8000b10 <SystemClock_Config+0x60>
 8000b0e:	e7fe      	b.n	8000b0e <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b10:	230f      	movs	r3, #15
 8000b12:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1a:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b24:	f001 f8a6 	bl	8001c74 <HAL_RCC_ClockConfig>
 8000b28:	4604      	mov	r4, r0
 8000b2a:	b100      	cbz	r0, 8000b2e <SystemClock_Config+0x7e>
 8000b2c:	e7fe      	b.n	8000b2c <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000b2e:	f001 f93b 	bl	8001da8 <HAL_RCC_GetHCLKFreq>
 8000b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b36:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b3a:	f000 fd67 	bl	800160c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000b3e:	4628      	mov	r0, r5
 8000b40:	f000 fd7a 	bl	8001638 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000b44:	4622      	mov	r2, r4
 8000b46:	4621      	mov	r1, r4
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f000 fd10 	bl	8001570 <HAL_NVIC_SetPriority>
}
 8000b50:	b015      	add	sp, #84	; 0x54
 8000b52:	bd30      	pop	{r4, r5, pc}
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <main>:
{
 8000b5c:	b500      	push	{lr}
 8000b5e:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2400      	movs	r4, #0
  HAL_Init();
 8000b62:	f000 fcb3 	bl	80014cc <HAL_Init>
  SystemClock_Config();
 8000b66:	f7ff ffa3 	bl	8000ab0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <main+0xb4>)
 8000b6c:	9401      	str	r4, [sp, #4]
 8000b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000b70:	4828      	ldr	r0, [pc, #160]	; (8000c14 <main+0xb8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b72:	f042 0204 	orr.w	r2, r2, #4
 8000b76:	631a      	str	r2, [r3, #48]	; 0x30
 8000b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7a:	f002 0204 	and.w	r2, r2, #4
 8000b7e:	9201      	str	r2, [sp, #4]
 8000b80:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	9402      	str	r4, [sp, #8]
 8000b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b92:	9202      	str	r2, [sp, #8]
 8000b94:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	9403      	str	r4, [sp, #12]
 8000b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9a:	f042 0201 	orr.w	r2, r2, #1
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba2:	f002 0201 	and.w	r2, r2, #1
 8000ba6:	9203      	str	r2, [sp, #12]
 8000ba8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	9404      	str	r4, [sp, #16]
 8000bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bae:	f042 0202 	orr.w	r2, r2, #2
 8000bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000bba:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000bbe:	f44f 7181 	mov.w	r1, #258	; 0x102
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bc4:	2501      	movs	r5, #1
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000bc6:	f000 fe9b 	bl	8001900 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <main+0xbc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	4811      	ldr	r0, [pc, #68]	; (8000c14 <main+0xb8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bce:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bd2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f000 fd41 	bl	800165c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8000bda:	f44f 7381 	mov.w	r3, #258	; 0x102
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	a905      	add	r1, sp, #20
 8000be0:	480c      	ldr	r0, [pc, #48]	; (8000c14 <main+0xb8>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8000be2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f000 fd37 	bl	800165c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000bee:	4621      	mov	r1, r4
 8000bf0:	4622      	mov	r2, r4
 8000bf2:	2006      	movs	r0, #6
 8000bf4:	f000 fcbc 	bl	8001570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f000 fced 	bl	80015d8 <HAL_NVIC_EnableIRQ>
  MX_X_CUBE_BLE1_Init();
 8000bfe:	f7ff fcf1 	bl	80005e4 <MX_X_CUBE_BLE1_Init>
  HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_GPIO_PIN);
 8000c02:	2120      	movs	r1, #32
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <main+0xb8>)
 8000c06:	f000 fe80 	bl	800190a <HAL_GPIO_TogglePin>
  MX_X_CUBE_BLE1_Process();
 8000c0a:	f7ff fda1 	bl	8000750 <MX_X_CUBE_BLE1_Process>
 8000c0e:	e7fc      	b.n	8000c0a <main+0xae>
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000
 8000c18:	10110000 	.word	0x10110000

08000c1c <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8000c1c:	b513      	push	{r0, r1, r4, lr}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
  
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8000c22:	4614      	mov	r4, r2
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	4613      	mov	r3, r2
 8000c28:	460a      	mov	r2, r1
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <BSP_SPI1_SendRecv+0x24>)
 8000c2e:	f001 f976 	bl	8001f1e <HAL_SPI_TransmitReceive>
 8000c32:	2800      	cmp	r0, #0
  {
      ret = len;
  }
  return ret;
}
 8000c34:	bf0c      	ite	eq
 8000c36:	4620      	moveq	r0, r4
 8000c38:	f06f 0005 	mvnne.w	r0, #5
 8000c3c:	b002      	add	sp, #8
 8000c3e:	bd10      	pop	{r4, pc}
 8000c40:	20000494 	.word	0x20000494

08000c44 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 8000c44:	f000 bc68 	b.w	8001518 <HAL_GetTick>

08000c48 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <MX_SPI1_Init+0x38>)
 8000c4a:	f44f 7c82 	mov.w	ip, #260	; 0x104
{
 8000c4e:	b508      	push	{r3, lr}
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000c50:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 8000c54:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8000c5c:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5e:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8000c62:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c64:	6202      	str	r2, [r0, #32]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c66:	2118      	movs	r1, #24
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8000c68:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6a:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8000c6c:	220a      	movs	r2, #10
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c6e:	61c1      	str	r1, [r0, #28]
  hspi->Init.CRCPolynomial = 10;
 8000c70:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8000c72:	f001 f917 	bl	8001ea4 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8000c76:	3000      	adds	r0, #0
 8000c78:	bf18      	it	ne
 8000c7a:	2001      	movne	r0, #1
 8000c7c:	bd08      	pop	{r3, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000

08000c84 <BSP_SPI1_Init>:
int32_t BSP_SPI1_Init(void) {
 8000c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hbusspi1.Instance  = SPI1;
 8000c88:	4d1c      	ldr	r5, [pc, #112]	; (8000cfc <BSP_SPI1_Init+0x78>)
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <BSP_SPI1_Init+0x7c>)
 8000c8c:	602b      	str	r3, [r5, #0]
int32_t BSP_SPI1_Init(void) {
 8000c8e:	b086      	sub	sp, #24
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 8000c90:	4628      	mov	r0, r5
 8000c92:	f001 fa40 	bl	8002116 <HAL_SPI_GetState>
 8000c96:	4604      	mov	r4, r0
 8000c98:	b118      	cbz	r0, 8000ca2 <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 8000c9a:	2000      	movs	r0, #0
}
 8000c9c:	b006      	add	sp, #24
 8000c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <BSP_SPI1_Init+0x80>)
 8000ca4:	9000      	str	r0, [sp, #0]
 8000ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ca8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000cac:	645a      	str	r2, [r3, #68]	; 0x44
 8000cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	9003      	str	r0, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	4813      	ldr	r0, [pc, #76]	; (8000d08 <BSP_SPI1_Init+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cbc:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc4:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd0:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f000 fcc3 	bl	800165c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <BSP_SPI1_Init+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cda:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce4:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce6:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f000 fcb8 	bl	800165c <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8000cec:	4628      	mov	r0, r5
 8000cee:	f7ff ffab 	bl	8000c48 <MX_SPI1_Init>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	d0d1      	beq.n	8000c9a <BSP_SPI1_Init+0x16>
      ret = BSP_ERROR_BUS_FAILURE;
 8000cf6:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8000cfa:	e7cf      	b.n	8000c9c <BSP_SPI1_Init+0x18>
 8000cfc:	20000494 	.word	0x20000494
 8000d00:	40013000 	.word	0x40013000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400

08000d10 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8000d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <Add_Sample_Service+0xb8>)
{
 8000d16:	b092      	sub	sp, #72	; 0x48
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8000d18:	aa06      	add	r2, sp, #24
 8000d1a:	f103 0610 	add.w	r6, r3, #16
 8000d1e:	4615      	mov	r5, r2
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	6859      	ldr	r1, [r3, #4]
 8000d24:	4614      	mov	r4, r2
 8000d26:	c403      	stmia	r4!, {r0, r1}
 8000d28:	3308      	adds	r3, #8
 8000d2a:	42b3      	cmp	r3, r6
 8000d2c:	4622      	mov	r2, r4
 8000d2e:	d1f7      	bne.n	8000d20 <Add_Sample_Service+0x10>
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <Add_Sample_Service+0xbc>)
 8000d32:	aa0a      	add	r2, sp, #40	; 0x28
 8000d34:	f103 0710 	add.w	r7, r3, #16
 8000d38:	4616      	mov	r6, r2
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	6859      	ldr	r1, [r3, #4]
 8000d3e:	4614      	mov	r4, r2
 8000d40:	c403      	stmia	r4!, {r0, r1}
 8000d42:	3308      	adds	r3, #8
 8000d44:	42bb      	cmp	r3, r7
 8000d46:	4622      	mov	r2, r4
 8000d48:	d1f7      	bne.n	8000d3a <Add_Sample_Service+0x2a>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <Add_Sample_Service+0xc0>)
 8000d4c:	aa0e      	add	r2, sp, #56	; 0x38
 8000d4e:	f103 0e10 	add.w	lr, r3, #16
 8000d52:	4617      	mov	r7, r2
 8000d54:	6818      	ldr	r0, [r3, #0]
 8000d56:	6859      	ldr	r1, [r3, #4]
 8000d58:	4614      	mov	r4, r2
 8000d5a:	c403      	stmia	r4!, {r0, r1}
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	4573      	cmp	r3, lr
 8000d60:	4622      	mov	r2, r4
 8000d62:	d1f7      	bne.n	8000d54 <Add_Sample_Service+0x44>
  
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8000d64:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8000ddc <Add_Sample_Service+0xcc>
 8000d68:	f8cd 8000 	str.w	r8, [sp]
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4629      	mov	r1, r5
 8000d72:	2002      	movs	r0, #2
 8000d74:	f001 fd22 	bl	80027bc <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 8000d78:	4603      	mov	r3, r0
 8000d7a:	bb08      	cbnz	r0, 8000dc0 <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8000d7c:	4a15      	ldr	r2, [pc, #84]	; (8000dd4 <Add_Sample_Service+0xc4>)
 8000d7e:	9205      	str	r2, [sp, #20]
 8000d80:	2510      	movs	r5, #16
 8000d82:	2401      	movs	r4, #1
 8000d84:	9302      	str	r3, [sp, #8]
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	f8b8 0000 	ldrh.w	r0, [r8]
 8000d8c:	9404      	str	r4, [sp, #16]
 8000d8e:	2314      	movs	r3, #20
 8000d90:	9503      	str	r5, [sp, #12]
 8000d92:	9500      	str	r5, [sp, #0]
 8000d94:	4632      	mov	r2, r6
 8000d96:	2102      	movs	r1, #2
 8000d98:	f001 fd53 	bl	8002842 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	b978      	cbnz	r0, 8000dc0 <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <Add_Sample_Service+0xc8>)
 8000da2:	9301      	str	r3, [sp, #4]
 8000da4:	230c      	movs	r3, #12
 8000da6:	9205      	str	r2, [sp, #20]
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	f8b8 0000 	ldrh.w	r0, [r8]
 8000dae:	9404      	str	r4, [sp, #16]
 8000db0:	9503      	str	r5, [sp, #12]
 8000db2:	9402      	str	r4, [sp, #8]
 8000db4:	2314      	movs	r3, #20
 8000db6:	463a      	mov	r2, r7
 8000db8:	2102      	movs	r1, #2
 8000dba:	f001 fd42 	bl	8002842 <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8000dbe:	b100      	cbz	r0, 8000dc2 <Add_Sample_Service+0xb2>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8000dc0:	2047      	movs	r0, #71	; 0x47
}
 8000dc2:	b012      	add	sp, #72	; 0x48
 8000dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000dc8:	08004068 	.word	0x08004068
 8000dcc:	08004078 	.word	0x08004078
 8000dd0:	08004088 	.word	0x08004088
 8000dd4:	200004f0 	.word	0x200004f0
 8000dd8:	200004f4 	.word	0x200004f4
 8000ddc:	200004f2 	.word	0x200004f2

08000de0 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 8000de0:	b570      	push	{r4, r5, r6, lr}
  tBleStatus ret;
  
  
  if(BLE_Role == CLIENT) {
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <Make_Connection+0xa0>)
 8000de4:	781c      	ldrb	r4, [r3, #0]
{  
 8000de6:	b08c      	sub	sp, #48	; 0x30
 8000de8:	ad08      	add	r5, sp, #32
  if(BLE_Role == CLIENT) {
 8000dea:	bb2c      	cbnz	r4, 8000e38 <Make_Connection+0x58>
    
    printf("Client Create Connection\n");
 8000dec:	4825      	ldr	r0, [pc, #148]	; (8000e84 <Make_Connection+0xa4>)
 8000dee:	f002 f9c9 	bl	8003184 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <Make_Connection+0xa8>)
 8000df4:	6818      	ldr	r0, [r3, #0]
 8000df6:	9008      	str	r0, [sp, #32]
 8000df8:	889b      	ldrh	r3, [r3, #4]
 8000dfa:	80ab      	strh	r3, [r5, #4]
    
    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	f000 f9f3 	bl	80011e8 <BSP_LED_On>
    
    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min, 
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max    
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8000e02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000e06:	9306      	str	r3, [sp, #24]
 8000e08:	9305      	str	r3, [sp, #20]
 8000e0a:	233c      	movs	r3, #60	; 0x3c
 8000e0c:	9304      	str	r3, [sp, #16]
 8000e0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e12:	2328      	movs	r3, #40	; 0x28
 8000e14:	9302      	str	r3, [sp, #8]
 8000e16:	9301      	str	r3, [sp, #4]
 8000e18:	9403      	str	r4, [sp, #12]
 8000e1a:	9400      	str	r4, [sp, #0]
 8000e1c:	462b      	mov	r3, r5
 8000e1e:	4622      	mov	r2, r4
 8000e20:	4608      	mov	r0, r1
 8000e22:	f001 fc61 	bl	80026e8 <aci_gap_create_connection>
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2); 
    
    if (ret != 0){
 8000e26:	b128      	cbz	r0, 8000e34 <Make_Connection+0x54>
      printf("Error while starting connection.\n");
 8000e28:	4818      	ldr	r0, [pc, #96]	; (8000e8c <Make_Connection+0xac>)
 8000e2a:	f002 f9ab 	bl	8003184 <puts>
      HAL_Delay(100);
 8000e2e:	2064      	movs	r0, #100	; 0x64
 8000e30:	f000 fb78 	bl	8001524 <HAL_Delay>
    */
    ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE,
                                   13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8000e34:	b00c      	add	sp, #48	; 0x30
 8000e36:	bd70      	pop	{r4, r5, r6, pc}
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000e38:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <Make_Connection+0xb0>)
 8000e3a:	462a      	mov	r2, r5
 8000e3c:	f103 0608 	add.w	r6, r3, #8
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	6859      	ldr	r1, [r3, #4]
 8000e44:	4614      	mov	r4, r2
 8000e46:	c403      	stmia	r4!, {r0, r1}
 8000e48:	3308      	adds	r3, #8
 8000e4a:	42b3      	cmp	r3, r6
 8000e4c:	4622      	mov	r2, r4
 8000e4e:	d1f7      	bne.n	8000e40 <Make_Connection+0x60>
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	791b      	ldrb	r3, [r3, #4]
 8000e54:	6020      	str	r0, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8000e56:	2100      	movs	r1, #0
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8000e58:	7123      	strb	r3, [r4, #4]
    hci_le_set_scan_resp_data(0,NULL);
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	f001 fefb 	bl	8002c56 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE,
 8000e60:	2300      	movs	r3, #0
 8000e62:	220d      	movs	r2, #13
 8000e64:	9201      	str	r2, [sp, #4]
 8000e66:	9306      	str	r3, [sp, #24]
 8000e68:	9305      	str	r3, [sp, #20]
 8000e6a:	9304      	str	r3, [sp, #16]
 8000e6c:	9303      	str	r3, [sp, #12]
 8000e6e:	9502      	str	r5, [sp, #8]
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	4619      	mov	r1, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fb99 	bl	80025ae <aci_gap_set_discoverable>
}
 8000e7c:	e7da      	b.n	8000e34 <Make_Connection+0x54>
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000
 8000e84:	080041a5 	.word	0x080041a5
 8000e88:	08004098 	.word	0x08004098
 8000e8c:	080041be 	.word	0x080041be
 8000e90:	0800409e 	.word	0x0800409e

08000e94 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8000e94:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_tx_char_handle)
 8000e96:	4c0f      	ldr	r4, [pc, #60]	; (8000ed4 <startReadTXCharHandle+0x40>)
 8000e98:	7823      	ldrb	r3, [r4, #0]
{
 8000e9a:	b087      	sub	sp, #28
  if (!start_read_tx_char_handle)
 8000e9c:	b9bb      	cbnz	r3, 8000ece <startReadTXCharHandle+0x3a>
  {    
    PRINTF("Start reading TX Char Handle\n");
    
    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <startReadTXCharHandle+0x44>)
 8000ea0:	aa02      	add	r2, sp, #8
 8000ea2:	f103 0710 	add.w	r7, r3, #16
 8000ea6:	4616      	mov	r6, r2
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	6859      	ldr	r1, [r3, #4]
 8000eac:	4615      	mov	r5, r2
 8000eae:	c503      	stmia	r5!, {r0, r1}
 8000eb0:	3308      	adds	r3, #8
 8000eb2:	42bb      	cmp	r3, r7
 8000eb4:	462a      	mov	r2, r5
 8000eb6:	d1f7      	bne.n	8000ea8 <startReadTXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8000eb8:	8860      	ldrh	r0, [r4, #2]
 8000eba:	9600      	str	r6, [sp, #0]
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	f001 fd51 	bl	800296c <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	7023      	strb	r3, [r4, #0]
  }
}
 8000ece:	b007      	add	sp, #28
 8000ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000190 	.word	0x20000190
 8000ed8:	08004078 	.word	0x08004078

08000edc <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 8000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_rx_char_handle)
 8000ede:	4c0f      	ldr	r4, [pc, #60]	; (8000f1c <startReadRXCharHandle+0x40>)
 8000ee0:	7923      	ldrb	r3, [r4, #4]
{  
 8000ee2:	b087      	sub	sp, #28
  if (!start_read_rx_char_handle)
 8000ee4:	b9bb      	cbnz	r3, 8000f16 <startReadRXCharHandle+0x3a>
  {
    PRINTF("Start reading RX Char Handle\n");
    
    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <startReadRXCharHandle+0x44>)
 8000ee8:	aa02      	add	r2, sp, #8
 8000eea:	f103 0710 	add.w	r7, r3, #16
 8000eee:	4616      	mov	r6, r2
 8000ef0:	6818      	ldr	r0, [r3, #0]
 8000ef2:	6859      	ldr	r1, [r3, #4]
 8000ef4:	4615      	mov	r5, r2
 8000ef6:	c503      	stmia	r5!, {r0, r1}
 8000ef8:	3308      	adds	r3, #8
 8000efa:	42bb      	cmp	r3, r7
 8000efc:	462a      	mov	r2, r5
 8000efe:	d1f7      	bne.n	8000ef0 <startReadRXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8000f00:	8860      	ldrh	r0, [r4, #2]
 8000f02:	9600      	str	r6, [sp, #0]
 8000f04:	2302      	movs	r3, #2
 8000f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	b280      	uxth	r0, r0
 8000f0e:	f001 fd2d 	bl	800296c <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8000f12:	2301      	movs	r3, #1
 8000f14:	7123      	strb	r3, [r4, #4]
  }
}
 8000f16:	b007      	add	sp, #28
 8000f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000190 	.word	0x20000190
 8000f20:	08004088 	.word	0x08004088

08000f24 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000f24:	b570      	push	{r4, r5, r6, lr}
	int i;

	HAL_UART_Transmit(&hComHandle[COM1], data_buffer, Nb_bytes, COM_POLL_TIMEOUT);
 8000f26:	460a      	mov	r2, r1
{
 8000f28:	4604      	mov	r4, r0
 8000f2a:	460e      	mov	r6, r1
	HAL_UART_Transmit(&hComHandle[COM1], data_buffer, Nb_bytes, COM_POLL_TIMEOUT);
 8000f2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f30:	4601      	mov	r1, r0
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <receiveData+0x28>)
 8000f34:	f001 fa63 	bl	80023fe <HAL_UART_Transmit>

  for(i = 0; i < Nb_bytes; i++) {
 8000f38:	4625      	mov	r5, r4
 8000f3a:	1b2b      	subs	r3, r5, r4
 8000f3c:	429e      	cmp	r6, r3
 8000f3e:	dc00      	bgt.n	8000f42 <receiveData+0x1e>
    printf("%c", data_buffer[i]);
  }
}
 8000f40:	bd70      	pop	{r4, r5, r6, pc}
    printf("%c", data_buffer[i]);
 8000f42:	f815 0b01 	ldrb.w	r0, [r5], #1
 8000f46:	f002 f8ad 	bl	80030a4 <putchar>
 8000f4a:	e7f6      	b.n	8000f3a <receiveData+0x16>
 8000f4c:	20000500 	.word	0x20000500

08000f50 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8000f50:	b513      	push	{r0, r1, r4, lr}
 8000f52:	460a      	mov	r2, r1
  if(BLE_Role == SERVER) {    
 8000f54:	490d      	ldr	r1, [pc, #52]	; (8000f8c <sendData+0x3c>)
 8000f56:	7809      	ldrb	r1, [r1, #0]
 8000f58:	2901      	cmp	r1, #1
{
 8000f5a:	4603      	mov	r3, r0
  if(BLE_Role == SERVER) {    
 8000f5c:	d10a      	bne.n	8000f74 <sendData+0x24>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
 8000f5e:	490c      	ldr	r1, [pc, #48]	; (8000f90 <sendData+0x40>)
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <sendData+0x44>)
 8000f62:	8809      	ldrh	r1, [r1, #0]
 8000f64:	8800      	ldrh	r0, [r0, #0]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f001 fcc7 	bl	80028fe <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8000f70:	b002      	add	sp, #8
 8000f72:	bd10      	pop	{r4, pc}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000f74:	4908      	ldr	r1, [pc, #32]	; (8000f98 <sendData+0x48>)
 8000f76:	8848      	ldrh	r0, [r1, #2]
 8000f78:	4908      	ldr	r1, [pc, #32]	; (8000f9c <sendData+0x4c>)
 8000f7a:	880c      	ldrh	r4, [r1, #0]
 8000f7c:	3401      	adds	r4, #1
 8000f7e:	b2a1      	uxth	r1, r4
 8000f80:	b280      	uxth	r0, r0
}
 8000f82:	b002      	add	sp, #8
 8000f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8000f88:	f001 bd5c 	b.w	8002a44 <aci_gatt_write_without_response>
 8000f8c:	20000000 	.word	0x20000000
 8000f90:	200004f0 	.word	0x200004f0
 8000f94:	200004f2 	.word	0x200004f2
 8000f98:	20000190 	.word	0x20000190
 8000f9c:	200004ee 	.word	0x200004ee

08000fa0 <enableNotification>:
 * @brief  Enable notification
 * @param  None 
 * @retval None
 */
void enableNotification(void)
{
 8000fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f88d 3005 	strb.w	r3, [sp, #5]
  
  uint32_t tickstart = HAL_GetTick();
 8000fae:	f000 fab3 	bl	8001518 <HAL_GetTick>
  
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000fb2:	4c0d      	ldr	r4, [pc, #52]	; (8000fe8 <enableNotification+0x48>)
 8000fb4:	4e0d      	ldr	r6, [pc, #52]	; (8000fec <enableNotification+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8000fb6:	4607      	mov	r7, r0
 8000fb8:	4625      	mov	r5, r4
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8000fba:	8831      	ldrh	r1, [r6, #0]
 8000fbc:	8860      	ldrh	r0, [r4, #2]
 8000fbe:	3102      	adds	r1, #2
 8000fc0:	ab01      	add	r3, sp, #4
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	b289      	uxth	r1, r1
 8000fc6:	b280      	uxth	r0, r0
 8000fc8:	f001 fd06 	bl	80029d8 <aci_gatt_write_charac_descriptor>
 8000fcc:	2846      	cmp	r0, #70	; 0x46
 8000fce:	d106      	bne.n	8000fde <enableNotification+0x3e>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8000fd0:	f000 faa2 	bl	8001518 <HAL_GetTick>
 8000fd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fd8:	1bc0      	subs	r0, r0, r7
 8000fda:	4298      	cmp	r0, r3
 8000fdc:	d9ed      	bls.n	8000fba <enableNotification+0x1a>
  }
  notification_enabled = TRUE;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	716b      	strb	r3, [r5, #5]
}
 8000fe2:	b003      	add	sp, #12
 8000fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000190 	.word	0x20000190
 8000fec:	200004ec 	.word	0x200004ec

08000ff0 <Attribute_Modified_CB>:
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  if(handle == RXCharHandle + 1){
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <Attribute_Modified_CB+0x28>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	4298      	cmp	r0, r3
 8000ff8:	d102      	bne.n	8001000 <Attribute_Modified_CB+0x10>
    receiveData(att_data, data_length);
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	f7ff bf92 	b.w	8000f24 <receiveData>
  } else if (handle == TXCharHandle + 2) {        
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <Attribute_Modified_CB+0x2c>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	3302      	adds	r3, #2
 8001006:	4298      	cmp	r0, r3
 8001008:	d104      	bne.n	8001014 <Attribute_Modified_CB+0x24>
    if(att_data[0] == 0x01)
 800100a:	7813      	ldrb	r3, [r2, #0]
 800100c:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 800100e:	bf04      	itt	eq
 8001010:	4a03      	ldreq	r2, [pc, #12]	; (8001020 <Attribute_Modified_CB+0x30>)
 8001012:	7153      	strbeq	r3, [r2, #5]
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200004f4 	.word	0x200004f4
 800101c:	200004f0 	.word	0x200004f0
 8001020:	20000190 	.word	0x20000190

08001024 <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8001024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  connected = TRUE;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <GAP_ConnectionComplete_CB+0x34>)
  connection_handle = handle;
  int i;
  
  printf("Connected to device:");
  for(i = 5; i > 0; i--){
    printf("%02X-", addr[i]);
 8001028:	4f0c      	ldr	r7, [pc, #48]	; (800105c <GAP_ConnectionComplete_CB+0x38>)
{  
 800102a:	4604      	mov	r4, r0
  connected = TRUE;
 800102c:	2201      	movs	r2, #1
  printf("Connected to device:");
 800102e:	480c      	ldr	r0, [pc, #48]	; (8001060 <GAP_ConnectionComplete_CB+0x3c>)
  connected = TRUE;
 8001030:	609a      	str	r2, [r3, #8]
  connection_handle = handle;
 8001032:	8059      	strh	r1, [r3, #2]
  printf("Connected to device:");
 8001034:	f002 f81e 	bl	8003074 <iprintf>
 8001038:	1da5      	adds	r5, r4, #6
 800103a:	1c66      	adds	r6, r4, #1
    printf("%02X-", addr[i]);
 800103c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8001040:	4638      	mov	r0, r7
 8001042:	f002 f817 	bl	8003074 <iprintf>
  for(i = 5; i > 0; i--){
 8001046:	42b5      	cmp	r5, r6
 8001048:	d1f8      	bne.n	800103c <GAP_ConnectionComplete_CB+0x18>
  }
  printf("%02X\n", addr[0]);
 800104a:	7821      	ldrb	r1, [r4, #0]
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <GAP_ConnectionComplete_CB+0x40>)
}
 800104e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("%02X\n", addr[0]);
 8001052:	f002 b80f 	b.w	8003074 <iprintf>
 8001056:	bf00      	nop
 8001058:	20000190 	.word	0x20000190
 800105c:	080041f4 	.word	0x080041f4
 8001060:	080041df 	.word	0x080041df
 8001064:	080041fa 	.word	0x080041fa

08001068 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001068:	b538      	push	{r3, r4, r5, lr}
  connected = FALSE;
 800106a:	4c07      	ldr	r4, [pc, #28]	; (8001088 <GAP_DisconnectionComplete_CB+0x20>)
  
  printf("Disconnected\n");
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <GAP_DisconnectionComplete_CB+0x24>)
  connected = FALSE;
 800106e:	2500      	movs	r5, #0
 8001070:	60a5      	str	r5, [r4, #8]
  printf("Disconnected\n");
 8001072:	f002 f887 	bl	8003184 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <GAP_DisconnectionComplete_CB+0x28>)
 8001078:	2201      	movs	r2, #1
 800107a:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 800107c:	7165      	strb	r5, [r4, #5]
  start_read_tx_char_handle = FALSE;
 800107e:	7025      	strb	r5, [r4, #0]
  start_read_rx_char_handle = FALSE;
 8001080:	7125      	strb	r5, [r4, #4]
  end_read_tx_char_handle = FALSE;
 8001082:	7325      	strb	r5, [r4, #12]
  end_read_rx_char_handle = FALSE;
 8001084:	7365      	strb	r5, [r4, #13]
 8001086:	bd38      	pop	{r3, r4, r5, pc}
 8001088:	20000190 	.word	0x20000190
 800108c:	08004200 	.word	0x08004200
 8001090:	20000001 	.word	0x20000001

08001094 <GATT_Notification_CB>:
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
  if (attr_handle == tx_handle+1) {
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <GATT_Notification_CB+0x14>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	4298      	cmp	r0, r3
 800109c:	d102      	bne.n	80010a4 <GATT_Notification_CB+0x10>
    receiveData(attr_value, attr_len);
 800109e:	4610      	mov	r0, r2
 80010a0:	f7ff bf40 	b.w	8000f24 <receiveData>
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	200004ec 	.word	0x200004ec

080010ac <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 80010ac:	7802      	ldrb	r2, [r0, #0]
 80010ae:	2a04      	cmp	r2, #4
{
 80010b0:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 80010b2:	d162      	bne.n	800117a <user_notify+0xce>
    return;
  
  switch(event_pckt->evt){
 80010b4:	7842      	ldrb	r2, [r0, #1]
 80010b6:	2a3e      	cmp	r2, #62	; 0x3e
 80010b8:	d005      	beq.n	80010c6 <user_notify+0x1a>
 80010ba:	2aff      	cmp	r2, #255	; 0xff
 80010bc:	d00b      	beq.n	80010d6 <user_notify+0x2a>
 80010be:	2a05      	cmp	r2, #5
 80010c0:	d15b      	bne.n	800117a <user_notify+0xce>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 80010c2:	f7ff bfd1 	b.w	8001068 <GAP_DisconnectionComplete_CB>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      switch(evt->subevent){
 80010c6:	78c2      	ldrb	r2, [r0, #3]
 80010c8:	2a01      	cmp	r2, #1
 80010ca:	d156      	bne.n	800117a <user_notify+0xce>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 80010cc:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 80010d0:	3009      	adds	r0, #9
 80010d2:	f7ff bfa7 	b.w	8001024 <GAP_ConnectionComplete_CB>
    break;
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 80010d6:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 80010da:	f640 410f 	movw	r1, #3087	; 0xc0f
 80010de:	428a      	cmp	r2, r1
 80010e0:	d01a      	beq.n	8001118 <user_notify+0x6c>
 80010e2:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 80010e6:	d204      	bcs.n	80010f2 <user_notify+0x46>
 80010e8:	f640 4101 	movw	r1, #3073	; 0xc01
 80010ec:	428a      	cmp	r2, r1
 80010ee:	d006      	beq.n	80010fe <user_notify+0x52>
 80010f0:	4770      	bx	lr
 80010f2:	d030      	beq.n	8001156 <user_notify+0xaa>
 80010f4:	f640 4112 	movw	r1, #3090	; 0xc12
 80010f8:	428a      	cmp	r2, r1
 80010fa:	d015      	beq.n	8001128 <user_notify+0x7c>
 80010fc:	4770      	bx	lr
        
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 80010fe:	4a1f      	ldr	r2, [pc, #124]	; (800117c <user_notify+0xd0>)
 8001100:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8001104:	7812      	ldrb	r2, [r2, #0]
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001106:	7a59      	ldrb	r1, [r3, #9]
          if (bnrg_expansion_board == IDB05A1) {
 8001108:	2a01      	cmp	r2, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 800110a:	bf0c      	ite	eq
 800110c:	f103 020c 	addeq.w	r2, r3, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8001110:	f103 020a 	addne.w	r2, r3, #10
 8001114:	f7ff bf6c 	b.w	8000ff0 <Attribute_Modified_CB>
        }
        break;
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8001118:	79c1      	ldrb	r1, [r0, #7]
 800111a:	3902      	subs	r1, #2
 800111c:	f100 020a 	add.w	r2, r0, #10
 8001120:	b2c9      	uxtb	r1, r1
 8001122:	8900      	ldrh	r0, [r0, #8]
 8001124:	f7ff bfb6 	b.w	8001094 <GATT_Notification_CB>
        }
        break;
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <user_notify+0xd4>)
 800112a:	7812      	ldrb	r2, [r2, #0]
 800112c:	bb2a      	cbnz	r2, 800117a <user_notify+0xce>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <user_notify+0xd8>)
 8001130:	7811      	ldrb	r1, [r2, #0]
 8001132:	b139      	cbz	r1, 8001144 <user_notify+0x98>
 8001134:	7b11      	ldrb	r1, [r2, #12]
 8001136:	b929      	cbnz	r1, 8001144 <user_notify+0x98>
          {
            tx_handle = resp->attr_handle;
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <user_notify+0xdc>)
 800113a:	8901      	ldrh	r1, [r0, #8]
            printf("TX Char Handle %04X\n", tx_handle);
 800113c:	4813      	ldr	r0, [pc, #76]	; (800118c <user_notify+0xe0>)
            tx_handle = resp->attr_handle;
 800113e:	8019      	strh	r1, [r3, #0]
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
 8001140:	f001 bf98 	b.w	8003074 <iprintf>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8001144:	7911      	ldrb	r1, [r2, #4]
 8001146:	b1c1      	cbz	r1, 800117a <user_notify+0xce>
 8001148:	7b52      	ldrb	r2, [r2, #13]
 800114a:	b9b2      	cbnz	r2, 800117a <user_notify+0xce>
            rx_handle = resp->attr_handle;
 800114c:	8919      	ldrh	r1, [r3, #8]
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <user_notify+0xe4>)
            printf("RX Char Handle %04X\n", rx_handle);
 8001150:	4810      	ldr	r0, [pc, #64]	; (8001194 <user_notify+0xe8>)
            rx_handle = resp->attr_handle;
 8001152:	8019      	strh	r1, [r3, #0]
 8001154:	e7f4      	b.n	8001140 <user_notify+0x94>
          }
        }
        break;
        
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <user_notify+0xd4>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	b973      	cbnz	r3, 800117a <user_notify+0xce>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <user_notify+0xd8>)
 800115e:	7819      	ldrb	r1, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	b121      	cbz	r1, 800116e <user_notify+0xc2>
 8001164:	7b19      	ldrb	r1, [r3, #12]
 8001166:	b911      	cbnz	r1, 800116e <user_notify+0xc2>
          {
            end_read_tx_char_handle = TRUE;
 8001168:	2201      	movs	r2, #1
 800116a:	731a      	strb	r2, [r3, #12]
 800116c:	4770      	bx	lr
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800116e:	7913      	ldrb	r3, [r2, #4]
 8001170:	b11b      	cbz	r3, 800117a <user_notify+0xce>
 8001172:	7b53      	ldrb	r3, [r2, #13]
 8001174:	b90b      	cbnz	r3, 800117a <user_notify+0xce>
          {
            end_read_rx_char_handle = TRUE;
 8001176:	2301      	movs	r3, #1
 8001178:	7353      	strb	r3, [r2, #13]
 800117a:	4770      	bx	lr
 800117c:	20000090 	.word	0x20000090
 8001180:	20000000 	.word	0x20000000
 8001184:	20000190 	.word	0x20000190
 8001188:	200004ec 	.word	0x200004ec
 800118c:	0800420d 	.word	0x0800420d
 8001190:	200004ee 	.word	0x200004ee
 8001194:	08004222 	.word	0x08004222

08001198 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001198:	b570      	push	{r4, r5, r6, lr}
 800119a:	b086      	sub	sp, #24
  GPIO_InitTypeDef gpio_init_structure;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 800119c:	2400      	movs	r4, #0
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <BSP_LED_Init+0x48>)
 80011a0:	9400      	str	r4, [sp, #0]
 80011a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
  HAL_GPIO_Init(LED_GPIO_PORT [Led], &gpio_init_structure); 
 80011a4:	4d0f      	ldr	r5, [pc, #60]	; (80011e4 <BSP_LED_Init+0x4c>)
  LED2_GPIO_CLK_ENABLE();    
 80011a6:	f042 0201 	orr.w	r2, r2, #1
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
 80011b2:	a906      	add	r1, sp, #24
  LED2_GPIO_CLK_ENABLE();    
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
 80011b8:	2620      	movs	r6, #32
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 80011be:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
 80011c0:	f841 6d14 	str.w	r6, [r1, #-20]!
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
 80011c4:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_GPIO_PORT [Led], &gpio_init_structure); 
 80011c6:	4628      	mov	r0, r5
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
 80011c8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(LED_GPIO_PORT [Led], &gpio_init_structure); 
 80011ca:	f000 fa47 	bl	800165c <HAL_GPIO_Init>
  
  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_GPIO_PORT [Led], LED_GPIO_PIN [Led], GPIO_PIN_RESET);
 80011ce:	4628      	mov	r0, r5
 80011d0:	4622      	mov	r2, r4
 80011d2:	4631      	mov	r1, r6
 80011d4:	f000 fb94 	bl	8001900 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 80011d8:	4620      	mov	r0, r4
 80011da:	b006      	add	sp, #24
 80011dc:	bd70      	pop	{r4, r5, r6, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40020000 	.word	0x40020000

080011e8 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80011e8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_GPIO_PORT [Led], (uint16_t)LED_GPIO_PIN [Led], GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2120      	movs	r1, #32
 80011ee:	4802      	ldr	r0, [pc, #8]	; (80011f8 <BSP_LED_On+0x10>)
 80011f0:	f000 fb86 	bl	8001900 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 80011f4:	2000      	movs	r0, #0
 80011f6:	bd08      	pop	{r3, pc}
 80011f8:	40020000 	.word	0x40020000

080011fc <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80011fc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_GPIO_PORT [Led], (uint16_t)LED_GPIO_PIN [Led], GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2120      	movs	r1, #32
 8001202:	4802      	ldr	r0, [pc, #8]	; (800120c <BSP_LED_Off+0x10>)
 8001204:	f000 fb7c 	bl	8001900 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8001208:	2000      	movs	r0, #0
 800120a:	bd08      	pop	{r3, pc}
 800120c:	40020000 	.word	0x40020000

08001210 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001210:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  hExtiButtonHandle[Button] = &hexti13;
 8001212:	4d1e      	ldr	r5, [pc, #120]	; (800128c <BSP_PB_Init+0x7c>)
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <BSP_PB_Init+0x80>)
 8001216:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
{
 800121a:	b086      	sub	sp, #24
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_KEY_EXTI_Callback};                                                
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_KEY_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={KEY_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  KEY_BUTTON_GPIO_CLK_ENABLE();
 800121c:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <BSP_PB_Init+0x84>)
 800121e:	2400      	movs	r4, #0
 8001220:	9400      	str	r4, [sp, #0]
 8001222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001224:	f042 0204 	orr.w	r2, r2, #4
 8001228:	631a      	str	r2, [r3, #48]	; 0x30
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin = BUTTON_PIN [Button];
  gpio_init_structure.Pull = GPIO_NOPULL;
 800122c:	9403      	str	r4, [sp, #12]
  KEY_BUTTON_GPIO_CLK_ENABLE();
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800123c:	2302      	movs	r3, #2
{
 800123e:	4606      	mov	r6, r0
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001240:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001242:	b939      	cbnz	r1, 8001254 <BSP_PB_Init+0x44>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;    
 8001244:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001246:	4814      	ldr	r0, [pc, #80]	; (8001298 <BSP_PB_Init+0x88>)
 8001248:	a901      	add	r1, sp, #4
 800124a:	f000 fa07 	bl	800165c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
  }
  
  return BSP_ERROR_NONE;
}
 800124e:	2000      	movs	r0, #0
 8001250:	b006      	add	sp, #24
 8001252:	bd70      	pop	{r4, r5, r6, pc}
  else if(ButtonMode == BUTTON_MODE_EXTI)
 8001254:	2901      	cmp	r1, #1
 8001256:	d1fa      	bne.n	800124e <BSP_PB_Init+0x3e>
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; 
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800125a:	480f      	ldr	r0, [pc, #60]	; (8001298 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; 
 800125c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800125e:	a901      	add	r1, sp, #4
 8001260:	f000 f9fc 	bl	800165c <HAL_GPIO_Init>
    HAL_EXTI_GetHandle(hExtiButtonHandle[Button], BUTTON_EXTI_LINE[Button]);  
 8001264:	490e      	ldr	r1, [pc, #56]	; (80012a0 <BSP_PB_Init+0x90>)
 8001266:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 800126a:	f000 f873 	bl	8001354 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(hExtiButtonHandle[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800126e:	4621      	mov	r1, r4
 8001270:	4a0c      	ldr	r2, [pc, #48]	; (80012a4 <BSP_PB_Init+0x94>)
 8001272:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8001276:	f000 f867 	bl	8001348 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800127a:	4622      	mov	r2, r4
 800127c:	210f      	movs	r1, #15
 800127e:	2028      	movs	r0, #40	; 0x28
 8001280:	f000 f976 	bl	8001570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001284:	2028      	movs	r0, #40	; 0x28
 8001286:	f000 f9a7 	bl	80015d8 <HAL_NVIC_EnableIRQ>
 800128a:	e7e0      	b.n	800124e <BSP_PB_Init+0x3e>
 800128c:	20000540 	.word	0x20000540
 8001290:	200004f8 	.word	0x200004f8
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	10110000 	.word	0x10110000
 80012a0:	0600000d 	.word	0x0600000d
 80012a4:	080012bf 	.word	0x080012bf

080012a8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_KEY: Key Push Button
 * @retval The Button GPIO pin value
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80012a8:	b508      	push	{r3, lr}
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80012aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <BSP_PB_GetState+0x10>)
 80012b0:	f000 fb20 	bl	80018f4 <HAL_GPIO_ReadPin>
}
 80012b4:	bd08      	pop	{r3, pc}
 80012b6:	bf00      	nop
 80012b8:	40020800 	.word	0x40020800

080012bc <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80012bc:	4770      	bx	lr

080012be <BUTTON_KEY_EXTI_Callback>:
{   
 80012be:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_KEY);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff fffb 	bl	80012bc <BSP_PB_Callback>
 80012c6:	bd08      	pop	{r3, pc}

080012c8 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 80012c8:	4a09      	ldr	r2, [pc, #36]	; (80012f0 <MX_USART2_UART_Init+0x28>)
 80012ca:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 80012ce:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 80012d0:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 80012d2:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	2200      	movs	r2, #0
 80012d8:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 80012da:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 80012dc:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 80012de:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e0:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80012e2:	61c2      	str	r2, [r0, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80012e4:	f001 f85d 	bl	80023a2 <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 80012e8:	3000      	adds	r0, #0
 80012ea:	bf18      	it	ne
 80012ec:	2001      	movne	r0, #1
 80012ee:	bd08      	pop	{r3, pc}
 80012f0:	40004400 	.word	0x40004400

080012f4 <BSP_COM_Init>:
{
 80012f4:	b530      	push	{r4, r5, lr}
 80012f6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012f8:	2400      	movs	r4, #0
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <BSP_COM_Init+0x48>)
 80012fc:	9400      	str	r4, [sp, #0]
 80012fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001300:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	9403      	str	r4, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001314:	230c      	movs	r3, #12
 8001316:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
{
 800131a:	4605      	mov	r5, r0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001320:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001322:	4807      	ldr	r0, [pc, #28]	; (8001340 <BSP_COM_Init+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001324:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f000 f999 	bl	800165c <HAL_GPIO_Init>
  MX_USART2_UART_Init(&hComHandle[COM]);
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <BSP_COM_Init+0x50>)
 800132c:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8001330:	f7ff ffca 	bl	80012c8 <MX_USART2_UART_Init>
}
 8001334:	4620      	mov	r0, r4
 8001336:	b007      	add	sp, #28
 8001338:	bd30      	pop	{r4, r5, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	20000500 	.word	0x20000500

08001348 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8001348:	b911      	cbnz	r1, 8001350 <HAL_EXTI_RegisterCallback+0x8>
    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
      break; 
#else
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->Callback = pPendingCbfn;
 800134a:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800134c:	4608      	mov	r0, r1
      break;      
 800134e:	4770      	bx	lr
#endif
    default:
      status = HAL_ERROR;
 8001350:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8001352:	4770      	bx	lr

08001354 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if(hexti == NULL)
 8001354:	b110      	cbz	r0, 800135c <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001356:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8001358:	2000      	movs	r0, #0
 800135a:	4770      	bx	lr
    return HAL_ERROR;
 800135c:	2001      	movs	r0, #1
  }
}
 800135e:	4770      	bx	lr

08001360 <HAL_EXTI_IRQHandler>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif
#endif /* EXTI_D1 */

  linepos = (hexti->Line & EXTI_PIN_MASK);
 8001360:	6803      	ldr	r3, [r0, #0]
 8001362:	f003 021f 	and.w	r2, r3, #31
  maskline = (1 << linepos);
 8001366:	2301      	movs	r3, #1
 8001368:	4093      	lsls	r3, r2
      hexti->FallingCallback();
    }  
  }
#else  
  /* compute line mask */
  if((EXTI->PR & maskline) != 0x00u)
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_EXTI_IRQHandler+0x1c>)
 800136c:	6951      	ldr	r1, [r2, #20]
 800136e:	420b      	tst	r3, r1
 8001370:	d003      	beq.n	800137a <HAL_EXTI_IRQHandler+0x1a>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001372:	6153      	str	r3, [r2, #20]
    
    /* Call rising/Falling callback */
    if(hexti->Callback != NULL)
 8001374:	6843      	ldr	r3, [r0, #4]
 8001376:	b103      	cbz	r3, 800137a <HAL_EXTI_IRQHandler+0x1a>
    {
      hexti->Callback();
 8001378:	4718      	bx	r3
 800137a:	4770      	bx	lr
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_MspInit+0x8c>)
 8001384:	2400      	movs	r4, #0
 8001386:	9400      	str	r4, [sp, #0]
 8001388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800138a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
 8001390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001392:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139a:	9401      	str	r4, [sp, #4]
 800139c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800139e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013aa:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013ac:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013b0:	f000 f8cc 	bl	800154c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80013b4:	4622      	mov	r2, r4
 80013b6:	4621      	mov	r1, r4
 80013b8:	f06f 000b 	mvn.w	r0, #11
 80013bc:	f000 f8d8 	bl	8001570 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80013c0:	4622      	mov	r2, r4
 80013c2:	4621      	mov	r1, r4
 80013c4:	f06f 000a 	mvn.w	r0, #10
 80013c8:	f000 f8d2 	bl	8001570 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80013cc:	4622      	mov	r2, r4
 80013ce:	4621      	mov	r1, r4
 80013d0:	f06f 0009 	mvn.w	r0, #9
 80013d4:	f000 f8cc 	bl	8001570 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80013d8:	4622      	mov	r2, r4
 80013da:	4621      	mov	r1, r4
 80013dc:	f06f 0004 	mvn.w	r0, #4
 80013e0:	f000 f8c6 	bl	8001570 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80013e4:	4622      	mov	r2, r4
 80013e6:	4621      	mov	r1, r4
 80013e8:	f06f 0003 	mvn.w	r0, #3
 80013ec:	f000 f8c0 	bl	8001570 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80013f0:	4622      	mov	r2, r4
 80013f2:	4621      	mov	r1, r4
 80013f4:	f06f 0001 	mvn.w	r0, #1
 80013f8:	f000 f8ba 	bl	8001570 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80013fc:	4622      	mov	r2, r4
 80013fe:	4621      	mov	r1, r4
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 f8b4 	bl	8001570 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001408:	b002      	add	sp, #8
 800140a:	bd10      	pop	{r4, pc}
 800140c:	40023800 	.word	0x40023800

08001410 <NMI_Handler>:
 8001410:	4770      	bx	lr

08001412 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler>

08001414 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001414:	e7fe      	b.n	8001414 <MemManage_Handler>

08001416 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001416:	e7fe      	b.n	8001416 <BusFault_Handler>

08001418 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001418:	e7fe      	b.n	8001418 <UsageFault_Handler>

0800141a <SVC_Handler>:
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800141e:	4770      	bx	lr

08001420 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001420:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f86d 	bl	8001500 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800142a:	f000 b912 	b.w	8001652 <HAL_SYSTICK_IRQHandler>
	...

08001430 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti0);
 8001430:	4801      	ldr	r0, [pc, #4]	; (8001438 <EXTI0_IRQHandler+0x8>)
 8001432:	f7ff bf95 	b.w	8001360 <HAL_EXTI_IRQHandler>
 8001436:	bf00      	nop
 8001438:	2000048c 	.word	0x2000048c

0800143c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800143c:	490f      	ldr	r1, [pc, #60]	; (800147c <SystemInit+0x40>)
 800143e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <SystemInit+0x44>)
 800144c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800144e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001450:	f042 0201 	orr.w	r2, r2, #1
 8001454:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001456:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800145e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001462:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001464:	4a07      	ldr	r2, [pc, #28]	; (8001484 <SystemInit+0x48>)
 8001466:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800146e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001470:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001476:	608b      	str	r3, [r1, #8]
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	40023800 	.word	0x40023800
 8001484:	24003010 	.word	0x24003010

08001488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001488:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_InitTick+0x3c>)
 800148c:	4e0e      	ldr	r6, [pc, #56]	; (80014c8 <HAL_InitTick+0x40>)
{
 800148e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001490:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001494:	7830      	ldrb	r0, [r6, #0]
 8001496:	fbb3 f3f0 	udiv	r3, r3, r0
 800149a:	6810      	ldr	r0, [r2, #0]
 800149c:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a0:	f000 f8b4 	bl	800160c <HAL_SYSTICK_Config>
 80014a4:	4604      	mov	r4, r0
 80014a6:	b950      	cbnz	r0, 80014be <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014a8:	2d0f      	cmp	r5, #15
 80014aa:	d808      	bhi.n	80014be <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ac:	4602      	mov	r2, r0
 80014ae:	4629      	mov	r1, r5
 80014b0:	f04f 30ff 	mov.w	r0, #4294967295
 80014b4:	f000 f85c 	bl	8001570 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b8:	6075      	str	r5, [r6, #4]
 80014ba:	4620      	mov	r0, r4
 80014bc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80014be:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014c0:	bd70      	pop	{r4, r5, r6, pc}
 80014c2:	bf00      	nop
 80014c4:	20000004 	.word	0x20000004
 80014c8:	20000008 	.word	0x20000008

080014cc <HAL_Init>:
{
 80014cc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_Init+0x30>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014d6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014e6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e8:	2003      	movs	r0, #3
 80014ea:	f000 f82f 	bl	800154c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f7ff ffca 	bl	8001488 <HAL_InitTick>
  HAL_MspInit();
 80014f4:	f7ff ff44 	bl	8001380 <HAL_MspInit>
}
 80014f8:	2000      	movs	r0, #0
 80014fa:	bd08      	pop	{r3, pc}
 80014fc:	40023c00 	.word	0x40023c00

08001500 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001500:	4a03      	ldr	r2, [pc, #12]	; (8001510 <HAL_IncTick+0x10>)
 8001502:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_IncTick+0x14>)
 8001504:	6811      	ldr	r1, [r2, #0]
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	440b      	add	r3, r1
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000544 	.word	0x20000544
 8001514:	20000008 	.word	0x20000008

08001518 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001518:	4b01      	ldr	r3, [pc, #4]	; (8001520 <HAL_GetTick+0x8>)
 800151a:	6818      	ldr	r0, [r3, #0]
}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000544 	.word	0x20000544

08001524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001528:	f7ff fff6 	bl	8001518 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800152c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800152e:	bf1c      	itt	ne
 8001530:	4b05      	ldrne	r3, [pc, #20]	; (8001548 <HAL_Delay+0x24>)
 8001532:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001534:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001536:	bf18      	it	ne
 8001538:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800153a:	f7ff ffed 	bl	8001518 <HAL_GetTick>
 800153e:	1b40      	subs	r0, r0, r5
 8001540:	4284      	cmp	r4, r0
 8001542:	d8fa      	bhi.n	800153a <HAL_Delay+0x16>
  {
  }
}
 8001544:	bd38      	pop	{r3, r4, r5, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4a07      	ldr	r2, [pc, #28]	; (800156c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800154e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001550:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	0c1b      	lsrs	r3, r3, #16
 8001558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800155c:	0200      	lsls	r0, r0, #8
 800155e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001562:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001566:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001568:	60d3      	str	r3, [r2, #12]
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001572:	b530      	push	{r4, r5, lr}
 8001574:	68dc      	ldr	r4, [r3, #12]
 8001576:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	2b04      	cmp	r3, #4
 8001582:	bf28      	it	cs
 8001584:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 0501 	mov.w	r5, #1
 800158c:	fa05 f303 	lsl.w	r3, r5, r3
 8001590:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001594:	bf8c      	ite	hi
 8001596:	3c03      	subhi	r4, #3
 8001598:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159a:	4019      	ands	r1, r3
 800159c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159e:	fa05 f404 	lsl.w	r4, r5, r4
 80015a2:	3c01      	subs	r4, #1
 80015a4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80015a6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a8:	ea42 0201 	orr.w	r2, r2, r1
 80015ac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b0:	bfaf      	iteee	ge
 80015b2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b6:	f000 000f 	andlt.w	r0, r0, #15
 80015ba:	4b06      	ldrlt	r3, [pc, #24]	; (80015d4 <HAL_NVIC_SetPriority+0x64>)
 80015bc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	bfa5      	ittet	ge
 80015c0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80015c4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80015cc:	bd30      	pop	{r4, r5, pc}
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00
 80015d4:	e000ed14 	.word	0xe000ed14

080015d8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015d8:	0942      	lsrs	r2, r0, #5
 80015da:	2301      	movs	r3, #1
 80015dc:	f000 001f 	and.w	r0, r0, #31
 80015e0:	fa03 f000 	lsl.w	r0, r3, r0
 80015e4:	4b01      	ldr	r3, [pc, #4]	; (80015ec <HAL_NVIC_EnableIRQ+0x14>)
 80015e6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015f0:	0943      	lsrs	r3, r0, #5
 80015f2:	2201      	movs	r2, #1
 80015f4:	f000 001f 	and.w	r0, r0, #31
 80015f8:	fa02 f000 	lsl.w	r0, r2, r0
 80015fc:	3320      	adds	r3, #32
 80015fe:	4a02      	ldr	r2, [pc, #8]	; (8001608 <HAL_NVIC_DisableIRQ+0x18>)
 8001600:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800160c:	3801      	subs	r0, #1
 800160e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001612:	d20a      	bcs.n	800162a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001618:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	21f0      	movs	r1, #240	; 0xf0
 800161c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001624:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800163a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800163c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800163e:	bf0c      	ite	eq
 8001640:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001644:	f022 0204 	bicne.w	r2, r2, #4
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	4770      	bx	lr
 800164c:	e000e010 	.word	0xe000e010

08001650 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001650:	4770      	bx	lr

08001652 <HAL_SYSTICK_IRQHandler>:
{
 8001652:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001654:	f7ff fffc 	bl	8001650 <HAL_SYSTICK_Callback>
 8001658:	bd08      	pop	{r3, pc}
	...

0800165c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001660:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001664:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8001804 <HAL_GPIO_Init+0x1a8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001668:	4a64      	ldr	r2, [pc, #400]	; (80017fc <HAL_GPIO_Init+0x1a0>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 800166c:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001670:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001672:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001674:	fa09 f703 	lsl.w	r7, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001678:	ea07 0604 	and.w	r6, r7, r4
    if(iocurrent == ioposition)
 800167c:	42b7      	cmp	r7, r6
 800167e:	f040 80ad 	bne.w	80017dc <HAL_GPIO_Init+0x180>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001682:	684c      	ldr	r4, [r1, #4]
 8001684:	f024 0a10 	bic.w	sl, r4, #16
 8001688:	f1ba 0f02 	cmp.w	sl, #2
 800168c:	d116      	bne.n	80016bc <HAL_GPIO_Init+0x60>
        temp = GPIOx->AFR[position >> 3U];
 800168e:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8001692:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001696:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800169a:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800169e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80016a2:	f04f 0e0f 	mov.w	lr, #15
 80016a6:	fa0e fe0b 	lsl.w	lr, lr, fp
 80016aa:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016ae:	690d      	ldr	r5, [r1, #16]
 80016b0:	fa05 f50b 	lsl.w	r5, r5, fp
 80016b4:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80016b8:	f8cc 5020 	str.w	r5, [ip, #32]
 80016bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c0:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80016c2:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c6:	fa05 f50c 	lsl.w	r5, r5, ip
 80016ca:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016cc:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016d0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d8:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016dc:	ea4e 0e0b 	orr.w	lr, lr, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e0:	f1ba 0f01 	cmp.w	sl, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016e4:	9500      	str	r5, [sp, #0]
      GPIOx->MODER = temp;
 80016e6:	f8c0 e000 	str.w	lr, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ea:	d815      	bhi.n	8001718 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->OSPEEDR; 
 80016ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016f0:	ea05 0e0e 	and.w	lr, r5, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016f4:	68cd      	ldr	r5, [r1, #12]
 80016f6:	fa05 fa0c 	lsl.w	sl, r5, ip
 80016fa:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 80016fe:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8001702:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001706:	ea2e 0707 	bic.w	r7, lr, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800170a:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 800170e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001712:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8001716:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001718:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800171a:	9d00      	ldr	r5, [sp, #0]
 800171c:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800171e:	688f      	ldr	r7, [r1, #8]
 8001720:	fa07 f70c 	lsl.w	r7, r7, ip
 8001724:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001726:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001728:	00e5      	lsls	r5, r4, #3
 800172a:	d557      	bpl.n	80017dc <HAL_GPIO_Init+0x180>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172c:	f04f 0b00 	mov.w	fp, #0
 8001730:	f8cd b00c 	str.w	fp, [sp, #12]
 8001734:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001738:	4d31      	ldr	r5, [pc, #196]	; (8001800 <HAL_GPIO_Init+0x1a4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173a:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800173e:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001742:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001746:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800174a:	9703      	str	r7, [sp, #12]
 800174c:	9f03      	ldr	r7, [sp, #12]
 800174e:	f023 0703 	bic.w	r7, r3, #3
 8001752:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001756:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800175a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800175e:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001762:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001766:	f04f 0e0f 	mov.w	lr, #15
 800176a:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001770:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001774:	d039      	beq.n	80017ea <HAL_GPIO_Init+0x18e>
 8001776:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800177a:	42a8      	cmp	r0, r5
 800177c:	d037      	beq.n	80017ee <HAL_GPIO_Init+0x192>
 800177e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001782:	42a8      	cmp	r0, r5
 8001784:	d035      	beq.n	80017f2 <HAL_GPIO_Init+0x196>
 8001786:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800178a:	42a8      	cmp	r0, r5
 800178c:	d033      	beq.n	80017f6 <HAL_GPIO_Init+0x19a>
 800178e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001792:	42a8      	cmp	r0, r5
 8001794:	bf14      	ite	ne
 8001796:	2507      	movne	r5, #7
 8001798:	2504      	moveq	r5, #4
 800179a:	fa05 f50c 	lsl.w	r5, r5, ip
 800179e:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a2:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80017a4:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80017a6:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80017ac:	bf0c      	ite	eq
 80017ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80017b0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80017b2:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80017b4:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80017ba:	bf0c      	ite	eq
 80017bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80017be:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80017c0:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017c2:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80017c8:	bf0c      	ite	eq
 80017ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80017cc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80017ce:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80017d0:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d2:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80017d4:	bf54      	ite	pl
 80017d6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80017d8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80017da:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017dc:	3301      	adds	r3, #1
 80017de:	2b10      	cmp	r3, #16
 80017e0:	f47f af47 	bne.w	8001672 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80017e4:	b005      	add	sp, #20
 80017e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	465d      	mov	r5, fp
 80017ec:	e7d5      	b.n	800179a <HAL_GPIO_Init+0x13e>
 80017ee:	2501      	movs	r5, #1
 80017f0:	e7d3      	b.n	800179a <HAL_GPIO_Init+0x13e>
 80017f2:	2502      	movs	r5, #2
 80017f4:	e7d1      	b.n	800179a <HAL_GPIO_Init+0x13e>
 80017f6:	2503      	movs	r5, #3
 80017f8:	e7cf      	b.n	800179a <HAL_GPIO_Init+0x13e>
 80017fa:	bf00      	nop
 80017fc:	40013c00 	.word	0x40013c00
 8001800:	40020000 	.word	0x40020000
 8001804:	40023800 	.word	0x40023800

08001808 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800180c:	4c36      	ldr	r4, [pc, #216]	; (80018e8 <HAL_GPIO_DeInit+0xe0>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800180e:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 80018f0 <HAL_GPIO_DeInit+0xe8>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001812:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8001814:	f04f 0901 	mov.w	r9, #1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001818:	f04f 0a03 	mov.w	sl, #3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800181c:	f04f 0c0f 	mov.w	ip, #15
    ioposition = 0x01U << position;
 8001820:	fa09 fe02 	lsl.w	lr, r9, r2
    if(iocurrent == ioposition)
 8001824:	ea3e 0301 	bics.w	r3, lr, r1
 8001828:	d151      	bne.n	80018ce <HAL_GPIO_DeInit+0xc6>
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	0055      	lsls	r5, r2, #1
 800182c:	6803      	ldr	r3, [r0, #0]
 800182e:	fa0a f505 	lsl.w	r5, sl, r5
 8001832:	43ed      	mvns	r5, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001834:	08d7      	lsrs	r7, r2, #3
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	402b      	ands	r3, r5
 8001838:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800183c:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183e:	f002 0607 	and.w	r6, r2, #7
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	00b6      	lsls	r6, r6, #2
 8001846:	fa0c f606 	lsl.w	r6, ip, r6
 800184a:	ea23 0606 	bic.w	r6, r3, r6
 800184e:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001850:	6883      	ldr	r3, [r0, #8]
 8001852:	402b      	ands	r3, r5
 8001854:	6083      	str	r3, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001856:	6846      	ldr	r6, [r0, #4]
 8001858:	ea6f 030e 	mvn.w	r3, lr
 800185c:	401e      	ands	r6, r3
 800185e:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001860:	68c6      	ldr	r6, [r0, #12]
 8001862:	4035      	ands	r5, r6
 8001864:	60c5      	str	r5, [r0, #12]
 8001866:	f022 0503 	bic.w	r5, r2, #3
 800186a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800186e:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001872:	f002 0703 	and.w	r7, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001876:	68ae      	ldr	r6, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001878:	00bf      	lsls	r7, r7, #2
 800187a:	fa0c f807 	lsl.w	r8, ip, r7
 800187e:	ea06 0e08 	and.w	lr, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001882:	4e1a      	ldr	r6, [pc, #104]	; (80018ec <HAL_GPIO_DeInit+0xe4>)
 8001884:	42b0      	cmp	r0, r6
 8001886:	d027      	beq.n	80018d8 <HAL_GPIO_DeInit+0xd0>
 8001888:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800188c:	42b0      	cmp	r0, r6
 800188e:	d025      	beq.n	80018dc <HAL_GPIO_DeInit+0xd4>
 8001890:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001894:	42b0      	cmp	r0, r6
 8001896:	d023      	beq.n	80018e0 <HAL_GPIO_DeInit+0xd8>
 8001898:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800189c:	42b0      	cmp	r0, r6
 800189e:	d021      	beq.n	80018e4 <HAL_GPIO_DeInit+0xdc>
 80018a0:	4558      	cmp	r0, fp
 80018a2:	bf0c      	ite	eq
 80018a4:	2604      	moveq	r6, #4
 80018a6:	2607      	movne	r6, #7
 80018a8:	40be      	lsls	r6, r7
 80018aa:	45b6      	cmp	lr, r6
 80018ac:	d10f      	bne.n	80018ce <HAL_GPIO_DeInit+0xc6>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80018ae:	68ae      	ldr	r6, [r5, #8]
 80018b0:	ea26 0608 	bic.w	r6, r6, r8
 80018b4:	60ae      	str	r6, [r5, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80018b6:	6825      	ldr	r5, [r4, #0]
 80018b8:	401d      	ands	r5, r3
 80018ba:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80018bc:	6865      	ldr	r5, [r4, #4]
 80018be:	401d      	ands	r5, r3
 80018c0:	6065      	str	r5, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80018c2:	68a5      	ldr	r5, [r4, #8]
 80018c4:	401d      	ands	r5, r3
 80018c6:	60a5      	str	r5, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80018c8:	68e5      	ldr	r5, [r4, #12]
 80018ca:	402b      	ands	r3, r5
 80018cc:	60e3      	str	r3, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ce:	3201      	adds	r2, #1
 80018d0:	2a10      	cmp	r2, #16
 80018d2:	d1a5      	bne.n	8001820 <HAL_GPIO_DeInit+0x18>
      }
    }
  }
}
 80018d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80018d8:	2600      	movs	r6, #0
 80018da:	e7e5      	b.n	80018a8 <HAL_GPIO_DeInit+0xa0>
 80018dc:	2601      	movs	r6, #1
 80018de:	e7e3      	b.n	80018a8 <HAL_GPIO_DeInit+0xa0>
 80018e0:	2602      	movs	r6, #2
 80018e2:	e7e1      	b.n	80018a8 <HAL_GPIO_DeInit+0xa0>
 80018e4:	2603      	movs	r6, #3
 80018e6:	e7df      	b.n	80018a8 <HAL_GPIO_DeInit+0xa0>
 80018e8:	40013c00 	.word	0x40013c00
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40021000 	.word	0x40021000

080018f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018f4:	6903      	ldr	r3, [r0, #16]
 80018f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80018f8:	bf14      	ite	ne
 80018fa:	2001      	movne	r0, #1
 80018fc:	2000      	moveq	r0, #0
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001900:	b10a      	cbz	r2, 8001906 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001902:	6181      	str	r1, [r0, #24]
 8001904:	4770      	bx	lr
 8001906:	0409      	lsls	r1, r1, #16
 8001908:	e7fb      	b.n	8001902 <HAL_GPIO_WritePin+0x2>

0800190a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800190a:	6943      	ldr	r3, [r0, #20]
 800190c:	4059      	eors	r1, r3
 800190e:	6141      	str	r1, [r0, #20]
 8001910:	4770      	bx	lr
	...

08001914 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001914:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001918:	4604      	mov	r4, r0
 800191a:	b918      	cbnz	r0, 8001924 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800191e:	b002      	add	sp, #8
 8001920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001924:	6803      	ldr	r3, [r0, #0]
 8001926:	07dd      	lsls	r5, r3, #31
 8001928:	d410      	bmi.n	800194c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	0798      	lsls	r0, r3, #30
 800192e:	d458      	bmi.n	80019e2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	071a      	lsls	r2, r3, #28
 8001934:	f100 809a 	bmi.w	8001a6c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	075b      	lsls	r3, r3, #29
 800193c:	f100 80b8 	bmi.w	8001ab0 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001940:	69a2      	ldr	r2, [r4, #24]
 8001942:	2a00      	cmp	r2, #0
 8001944:	f040 8119 	bne.w	8001b7a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001948:	2000      	movs	r0, #0
 800194a:	e7e8      	b.n	800191e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800194c:	4ba6      	ldr	r3, [pc, #664]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	f002 020c 	and.w	r2, r2, #12
 8001954:	2a04      	cmp	r2, #4
 8001956:	d007      	beq.n	8001968 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800195e:	2a08      	cmp	r2, #8
 8001960:	d10a      	bne.n	8001978 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	0259      	lsls	r1, r3, #9
 8001966:	d507      	bpl.n	8001978 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	4b9f      	ldr	r3, [pc, #636]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	039a      	lsls	r2, r3, #14
 800196e:	d5dc      	bpl.n	800192a <HAL_RCC_OscConfig+0x16>
 8001970:	6863      	ldr	r3, [r4, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1d9      	bne.n	800192a <HAL_RCC_OscConfig+0x16>
 8001976:	e7d1      	b.n	800191c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001978:	6863      	ldr	r3, [r4, #4]
 800197a:	4d9b      	ldr	r5, [pc, #620]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001980:	d111      	bne.n	80019a6 <HAL_RCC_OscConfig+0x92>
 8001982:	682b      	ldr	r3, [r5, #0]
 8001984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001988:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800198a:	f7ff fdc5 	bl	8001518 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4d96      	ldr	r5, [pc, #600]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001990:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	682b      	ldr	r3, [r5, #0]
 8001994:	039b      	lsls	r3, r3, #14
 8001996:	d4c8      	bmi.n	800192a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fdbe 	bl	8001518 <HAL_GetTick>
 800199c:	1b80      	subs	r0, r0, r6
 800199e:	2864      	cmp	r0, #100	; 0x64
 80019a0:	d9f7      	bls.n	8001992 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80019a2:	2003      	movs	r0, #3
 80019a4:	e7bb      	b.n	800191e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019aa:	d104      	bne.n	80019b6 <HAL_RCC_OscConfig+0xa2>
 80019ac:	682b      	ldr	r3, [r5, #0]
 80019ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b2:	602b      	str	r3, [r5, #0]
 80019b4:	e7e5      	b.n	8001982 <HAL_RCC_OscConfig+0x6e>
 80019b6:	682a      	ldr	r2, [r5, #0]
 80019b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019bc:	602a      	str	r2, [r5, #0]
 80019be:	682a      	ldr	r2, [r5, #0]
 80019c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019c4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1df      	bne.n	800198a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 80019ca:	f7ff fda5 	bl	8001518 <HAL_GetTick>
 80019ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	039f      	lsls	r7, r3, #14
 80019d4:	d5a9      	bpl.n	800192a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d6:	f7ff fd9f 	bl	8001518 <HAL_GetTick>
 80019da:	1b80      	subs	r0, r0, r6
 80019dc:	2864      	cmp	r0, #100	; 0x64
 80019de:	d9f7      	bls.n	80019d0 <HAL_RCC_OscConfig+0xbc>
 80019e0:	e7df      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e2:	4b81      	ldr	r3, [pc, #516]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	f012 0f0c 	tst.w	r2, #12
 80019ea:	d007      	beq.n	80019fc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ec:	689a      	ldr	r2, [r3, #8]
 80019ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f2:	2a08      	cmp	r2, #8
 80019f4:	d111      	bne.n	8001a1a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	025e      	lsls	r6, r3, #9
 80019fa:	d40e      	bmi.n	8001a1a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fc:	4b7a      	ldr	r3, [pc, #488]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	0795      	lsls	r5, r2, #30
 8001a02:	d502      	bpl.n	8001a0a <HAL_RCC_OscConfig+0xf6>
 8001a04:	68e2      	ldr	r2, [r4, #12]
 8001a06:	2a01      	cmp	r2, #1
 8001a08:	d188      	bne.n	800191c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	6921      	ldr	r1, [r4, #16]
 8001a0e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a12:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a16:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a18:	e78a      	b.n	8001930 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a1a:	68e2      	ldr	r2, [r4, #12]
 8001a1c:	4b73      	ldr	r3, [pc, #460]	; (8001bec <HAL_RCC_OscConfig+0x2d8>)
 8001a1e:	b1b2      	cbz	r2, 8001a4e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a24:	f7ff fd78 	bl	8001518 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4d6f      	ldr	r5, [pc, #444]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a2a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2c:	682b      	ldr	r3, [r5, #0]
 8001a2e:	0798      	lsls	r0, r3, #30
 8001a30:	d507      	bpl.n	8001a42 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a32:	682b      	ldr	r3, [r5, #0]
 8001a34:	6922      	ldr	r2, [r4, #16]
 8001a36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a3a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a3e:	602b      	str	r3, [r5, #0]
 8001a40:	e776      	b.n	8001930 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff fd69 	bl	8001518 <HAL_GetTick>
 8001a46:	1b80      	subs	r0, r0, r6
 8001a48:	2802      	cmp	r0, #2
 8001a4a:	d9ef      	bls.n	8001a2c <HAL_RCC_OscConfig+0x118>
 8001a4c:	e7a9      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a50:	f7ff fd62 	bl	8001518 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a54:	4d64      	ldr	r5, [pc, #400]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a56:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	0799      	lsls	r1, r3, #30
 8001a5c:	f57f af68 	bpl.w	8001930 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a60:	f7ff fd5a 	bl	8001518 <HAL_GetTick>
 8001a64:	1b80      	subs	r0, r0, r6
 8001a66:	2802      	cmp	r0, #2
 8001a68:	d9f6      	bls.n	8001a58 <HAL_RCC_OscConfig+0x144>
 8001a6a:	e79a      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a6c:	6962      	ldr	r2, [r4, #20]
 8001a6e:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_RCC_OscConfig+0x2dc>)
 8001a70:	b17a      	cbz	r2, 8001a92 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a76:	f7ff fd4f 	bl	8001518 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4d5b      	ldr	r5, [pc, #364]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001a7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a80:	079f      	lsls	r7, r3, #30
 8001a82:	f53f af59 	bmi.w	8001938 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff fd47 	bl	8001518 <HAL_GetTick>
 8001a8a:	1b80      	subs	r0, r0, r6
 8001a8c:	2802      	cmp	r0, #2
 8001a8e:	d9f6      	bls.n	8001a7e <HAL_RCC_OscConfig+0x16a>
 8001a90:	e787      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001a92:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a94:	f7ff fd40 	bl	8001518 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a98:	4d53      	ldr	r5, [pc, #332]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001a9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a9e:	0798      	lsls	r0, r3, #30
 8001aa0:	f57f af4a 	bpl.w	8001938 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff fd38 	bl	8001518 <HAL_GetTick>
 8001aa8:	1b80      	subs	r0, r0, r6
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9f6      	bls.n	8001a9c <HAL_RCC_OscConfig+0x188>
 8001aae:	e778      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 8001ab2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001ab8:	d128      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	9201      	str	r2, [sp, #4]
 8001abc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001abe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	9301      	str	r3, [sp, #4]
 8001acc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ace:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	4d48      	ldr	r5, [pc, #288]	; (8001bf4 <HAL_RCC_OscConfig+0x2e0>)
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	05d9      	lsls	r1, r3, #23
 8001ad6:	d51b      	bpl.n	8001b10 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad8:	68a3      	ldr	r3, [r4, #8]
 8001ada:	4d43      	ldr	r5, [pc, #268]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d127      	bne.n	8001b30 <HAL_RCC_OscConfig+0x21c>
 8001ae0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fd16 	bl	8001518 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	4d3e      	ldr	r5, [pc, #248]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001aee:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001af6:	079b      	lsls	r3, r3, #30
 8001af8:	d539      	bpl.n	8001b6e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001afa:	2e00      	cmp	r6, #0
 8001afc:	f43f af20 	beq.w	8001940 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b00:	4a39      	ldr	r2, [pc, #228]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 8001b02:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b08:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0a:	e719      	b.n	8001940 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	e7df      	b.n	8001ad0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b10:	682b      	ldr	r3, [r5, #0]
 8001b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b16:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b18:	f7ff fcfe 	bl	8001518 <HAL_GetTick>
 8001b1c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	682b      	ldr	r3, [r5, #0]
 8001b20:	05da      	lsls	r2, r3, #23
 8001b22:	d4d9      	bmi.n	8001ad8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b24:	f7ff fcf8 	bl	8001518 <HAL_GetTick>
 8001b28:	1bc0      	subs	r0, r0, r7
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	d9f7      	bls.n	8001b1e <HAL_RCC_OscConfig+0x20a>
 8001b2e:	e738      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b30:	2b05      	cmp	r3, #5
 8001b32:	d104      	bne.n	8001b3e <HAL_RCC_OscConfig+0x22a>
 8001b34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	672b      	str	r3, [r5, #112]	; 0x70
 8001b3c:	e7d0      	b.n	8001ae0 <HAL_RCC_OscConfig+0x1cc>
 8001b3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	672a      	str	r2, [r5, #112]	; 0x70
 8001b46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b48:	f022 0204 	bic.w	r2, r2, #4
 8001b4c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ca      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001b52:	f7ff fce1 	bl	8001518 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b5a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b5e:	0798      	lsls	r0, r3, #30
 8001b60:	d5cb      	bpl.n	8001afa <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b62:	f7ff fcd9 	bl	8001518 <HAL_GetTick>
 8001b66:	1bc0      	subs	r0, r0, r7
 8001b68:	4540      	cmp	r0, r8
 8001b6a:	d9f7      	bls.n	8001b5c <HAL_RCC_OscConfig+0x248>
 8001b6c:	e719      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fcd3 	bl	8001518 <HAL_GetTick>
 8001b72:	1bc0      	subs	r0, r0, r7
 8001b74:	4540      	cmp	r0, r8
 8001b76:	d9bd      	bls.n	8001af4 <HAL_RCC_OscConfig+0x1e0>
 8001b78:	e713      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b7a:	4d1b      	ldr	r5, [pc, #108]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
 8001b7c:	68ab      	ldr	r3, [r5, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b08      	cmp	r3, #8
 8001b84:	f43f aeca 	beq.w	800191c <HAL_RCC_OscConfig+0x8>
 8001b88:	4e1b      	ldr	r6, [pc, #108]	; (8001bf8 <HAL_RCC_OscConfig+0x2e4>)
 8001b8a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b8c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b90:	d134      	bne.n	8001bfc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001b92:	f7ff fcc1 	bl	8001518 <HAL_GetTick>
 8001b96:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	0199      	lsls	r1, r3, #6
 8001b9c:	d41e      	bmi.n	8001bdc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b9e:	6a22      	ldr	r2, [r4, #32]
 8001ba0:	69e3      	ldr	r3, [r4, #28]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ba6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001baa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bb0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb2:	4c0d      	ldr	r4, [pc, #52]	; (8001be8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb4:	0852      	lsrs	r2, r2, #1
 8001bb6:	3a01      	subs	r2, #1
 8001bb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bbc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bc2:	f7ff fca9 	bl	8001518 <HAL_GetTick>
 8001bc6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	019a      	lsls	r2, r3, #6
 8001bcc:	f53f aebc 	bmi.w	8001948 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff fca2 	bl	8001518 <HAL_GetTick>
 8001bd4:	1b40      	subs	r0, r0, r5
 8001bd6:	2802      	cmp	r0, #2
 8001bd8:	d9f6      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x2b4>
 8001bda:	e6e2      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fc9c 	bl	8001518 <HAL_GetTick>
 8001be0:	1bc0      	subs	r0, r0, r7
 8001be2:	2802      	cmp	r0, #2
 8001be4:	d9d8      	bls.n	8001b98 <HAL_RCC_OscConfig+0x284>
 8001be6:	e6dc      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
 8001be8:	40023800 	.word	0x40023800
 8001bec:	42470000 	.word	0x42470000
 8001bf0:	42470e80 	.word	0x42470e80
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc8c 	bl	8001518 <HAL_GetTick>
 8001c00:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	682b      	ldr	r3, [r5, #0]
 8001c04:	019b      	lsls	r3, r3, #6
 8001c06:	f57f ae9f 	bpl.w	8001948 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0a:	f7ff fc85 	bl	8001518 <HAL_GetTick>
 8001c0e:	1b00      	subs	r0, r0, r4
 8001c10:	2802      	cmp	r0, #2
 8001c12:	d9f6      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2ee>
 8001c14:	e6c5      	b.n	80019a2 <HAL_RCC_OscConfig+0x8e>
 8001c16:	bf00      	nop

08001c18 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c18:	4913      	ldr	r1, [pc, #76]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c1a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c1c:	688b      	ldr	r3, [r1, #8]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x16>
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c2a:	4810      	ldr	r0, [pc, #64]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c2c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c2e:	4810      	ldr	r0, [pc, #64]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x58>)
 8001c30:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c34:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c38:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c3c:	bf14      	ite	ne
 8001c3e:	480c      	ldrne	r0, [pc, #48]	; (8001c70 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c40:	480a      	ldreq	r0, [pc, #40]	; (8001c6c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c42:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c46:	bf18      	it	ne
 8001c48:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4e:	fba1 0100 	umull	r0, r1, r1, r0
 8001c52:	f7fe fb15 	bl	8000280 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c56:	4b04      	ldr	r3, [pc, #16]	; (8001c68 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c5e:	3301      	adds	r3, #1
 8001c60:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c62:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c66:	bd08      	pop	{r3, pc}
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	007a1200 	.word	0x007a1200

08001c74 <HAL_RCC_ClockConfig>:
{
 8001c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001c7a:	4604      	mov	r4, r0
 8001c7c:	b910      	cbnz	r0, 8001c84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
 8001c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c84:	4b44      	ldr	r3, [pc, #272]	; (8001d98 <HAL_RCC_ClockConfig+0x124>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	f002 020f 	and.w	r2, r2, #15
 8001c8c:	428a      	cmp	r2, r1
 8001c8e:	d328      	bcc.n	8001ce2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c90:	6821      	ldr	r1, [r4, #0]
 8001c92:	078f      	lsls	r7, r1, #30
 8001c94:	d42d      	bmi.n	8001cf2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	07c8      	lsls	r0, r1, #31
 8001c98:	d440      	bmi.n	8001d1c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9a:	4b3f      	ldr	r3, [pc, #252]	; (8001d98 <HAL_RCC_ClockConfig+0x124>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	f002 020f 	and.w	r2, r2, #15
 8001ca2:	4295      	cmp	r5, r2
 8001ca4:	d366      	bcc.n	8001d74 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	0751      	lsls	r1, r2, #29
 8001caa:	d46c      	bmi.n	8001d86 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cac:	0713      	lsls	r3, r2, #28
 8001cae:	d507      	bpl.n	8001cc0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb0:	4a3a      	ldr	r2, [pc, #232]	; (8001d9c <HAL_RCC_ClockConfig+0x128>)
 8001cb2:	6921      	ldr	r1, [r4, #16]
 8001cb4:	6893      	ldr	r3, [r2, #8]
 8001cb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001cba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cbe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cc0:	f7ff ffaa 	bl	8001c18 <HAL_RCC_GetSysClockFreq>
 8001cc4:	4b35      	ldr	r3, [pc, #212]	; (8001d9c <HAL_RCC_ClockConfig+0x128>)
 8001cc6:	4a36      	ldr	r2, [pc, #216]	; (8001da0 <HAL_RCC_ClockConfig+0x12c>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	40d8      	lsrs	r0, r3
 8001cd2:	4b34      	ldr	r3, [pc, #208]	; (8001da4 <HAL_RCC_ClockConfig+0x130>)
 8001cd4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff fbd6 	bl	8001488 <HAL_InitTick>
  return HAL_OK;
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	b2ca      	uxtb	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 030f 	and.w	r3, r3, #15
 8001cec:	4299      	cmp	r1, r3
 8001cee:	d1c6      	bne.n	8001c7e <HAL_RCC_ClockConfig+0xa>
 8001cf0:	e7ce      	b.n	8001c90 <HAL_RCC_ClockConfig+0x1c>
 8001cf2:	4b2a      	ldr	r3, [pc, #168]	; (8001d9c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf8:	bf1e      	ittt	ne
 8001cfa:	689a      	ldrne	r2, [r3, #8]
 8001cfc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d00:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d02:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d04:	bf42      	ittt	mi
 8001d06:	689a      	ldrmi	r2, [r3, #8]
 8001d08:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d0c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	68a0      	ldr	r0, [r4, #8]
 8001d12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d16:	4302      	orrs	r2, r0
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	e7bc      	b.n	8001c96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d1c:	6862      	ldr	r2, [r4, #4]
 8001d1e:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_RCC_ClockConfig+0x128>)
 8001d20:	2a01      	cmp	r2, #1
 8001d22:	d11d      	bne.n	8001d60 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d2a:	d0a8      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2c:	4e1b      	ldr	r6, [pc, #108]	; (8001d9c <HAL_RCC_ClockConfig+0x128>)
 8001d2e:	68b3      	ldr	r3, [r6, #8]
 8001d30:	f023 0303 	bic.w	r3, r3, #3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d38:	f7ff fbee 	bl	8001518 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d40:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	68b3      	ldr	r3, [r6, #8]
 8001d44:	6862      	ldr	r2, [r4, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d4e:	d0a4      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d50:	f7ff fbe2 	bl	8001518 <HAL_GetTick>
 8001d54:	1bc0      	subs	r0, r0, r7
 8001d56:	4540      	cmp	r0, r8
 8001d58:	d9f3      	bls.n	8001d42 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d5a:	2003      	movs	r0, #3
}
 8001d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d60:	1e91      	subs	r1, r2, #2
 8001d62:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d64:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d66:	d802      	bhi.n	8001d6e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d6c:	e7dd      	b.n	8001d2a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6e:	f013 0f02 	tst.w	r3, #2
 8001d72:	e7da      	b.n	8001d2a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d74:	b2ea      	uxtb	r2, r5
 8001d76:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	429d      	cmp	r5, r3
 8001d80:	f47f af7d 	bne.w	8001c7e <HAL_RCC_ClockConfig+0xa>
 8001d84:	e78f      	b.n	8001ca6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d86:	4905      	ldr	r1, [pc, #20]	; (8001d9c <HAL_RCC_ClockConfig+0x128>)
 8001d88:	68e0      	ldr	r0, [r4, #12]
 8001d8a:	688b      	ldr	r3, [r1, #8]
 8001d8c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d90:	4303      	orrs	r3, r0
 8001d92:	608b      	str	r3, [r1, #8]
 8001d94:	e78a      	b.n	8001cac <HAL_RCC_ClockConfig+0x38>
 8001d96:	bf00      	nop
 8001d98:	40023c00 	.word	0x40023c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	080040ab 	.word	0x080040ab
 8001da4:	20000004 	.word	0x20000004

08001da8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001da8:	4b01      	ldr	r3, [pc, #4]	; (8001db0 <HAL_RCC_GetHCLKFreq+0x8>)
 8001daa:	6818      	ldr	r0, [r3, #0]
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000004 	.word	0x20000004

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001dbe:	5cd3      	ldrb	r3, [r2, r3]
 8001dc0:	4a03      	ldr	r2, [pc, #12]	; (8001dd0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dc2:	6810      	ldr	r0, [r2, #0]
}
 8001dc4:	40d8      	lsrs	r0, r3
 8001dc6:	4770      	bx	lr
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	080040bb 	.word	0x080040bb
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <HAL_RCC_GetPCLK2Freq+0x18>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001dde:	5cd3      	ldrb	r3, [r2, r3]
 8001de0:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001de2:	6810      	ldr	r0, [r2, #0]
}
 8001de4:	40d8      	lsrs	r0, r3
 8001de6:	4770      	bx	lr
 8001de8:	40023800 	.word	0x40023800
 8001dec:	080040bb 	.word	0x080040bb
 8001df0:	20000004 	.word	0x20000004

08001df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df8:	9e06      	ldr	r6, [sp, #24]
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	4688      	mov	r8, r1
 8001dfe:	4617      	mov	r7, r2
 8001e00:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6893      	ldr	r3, [r2, #8]
 8001e06:	ea38 0303 	bics.w	r3, r8, r3
 8001e0a:	bf0c      	ite	eq
 8001e0c:	2301      	moveq	r3, #1
 8001e0e:	2300      	movne	r3, #0
 8001e10:	429f      	cmp	r7, r3
 8001e12:	d102      	bne.n	8001e1a <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001e14:	2000      	movs	r0, #0
}
 8001e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001e1a:	1c6b      	adds	r3, r5, #1
 8001e1c:	d0f2      	beq.n	8001e04 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001e1e:	bb55      	cbnz	r5, 8001e76 <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e28:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e2a:	6862      	ldr	r2, [r4, #4]
 8001e2c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001e30:	d10a      	bne.n	8001e48 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e32:	68a2      	ldr	r2, [r4, #8]
 8001e34:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001e38:	d002      	beq.n	8001e40 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001e3a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001e3e:	d103      	bne.n	8001e48 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e46:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e4a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001e4e:	d109      	bne.n	8001e64 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e56:	0412      	lsls	r2, r2, #16
 8001e58:	0c12      	lsrs	r2, r2, #16
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e62:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001e64:	2301      	movs	r3, #1
 8001e66:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001e70:	2003      	movs	r0, #3
 8001e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001e76:	f7ff fb4f 	bl	8001518 <HAL_GetTick>
 8001e7a:	1b80      	subs	r0, r0, r6
 8001e7c:	4285      	cmp	r5, r0
 8001e7e:	d8c0      	bhi.n	8001e02 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001e80:	e7ce      	b.n	8001e20 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001e82 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e82:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e84:	460b      	mov	r3, r1
 8001e86:	9200      	str	r2, [sp, #0]
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	2200      	movs	r2, #0
{
 8001e8c:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e8e:	f7ff ffb1 	bl	8001df4 <SPI_WaitFlagStateUntilTimeout>
 8001e92:	b120      	cbz	r0, 8001e9e <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e96:	f043 0320 	orr.w	r3, r3, #32
 8001e9a:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001e9c:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd10      	pop	{r4, pc}

08001ea2 <HAL_SPI_MspInit>:
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_SPI_Init>:
{
 8001ea4:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8001ea6:	4604      	mov	r4, r0
 8001ea8:	2800      	cmp	r0, #0
 8001eaa:	d036      	beq.n	8001f1a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001eb0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001eb4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eb8:	b91b      	cbnz	r3, 8001ec2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001eba:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001ebe:	f7ff fff0 	bl	8001ea2 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001ec2:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ec4:	68a0      	ldr	r0, [r4, #8]
 8001ec6:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001ece:	680b      	ldr	r3, [r1, #0]
 8001ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ed4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001ed6:	6863      	ldr	r3, [r4, #4]
 8001ed8:	4303      	orrs	r3, r0
 8001eda:	68e0      	ldr	r0, [r4, #12]
 8001edc:	4303      	orrs	r3, r0
 8001ede:	6920      	ldr	r0, [r4, #16]
 8001ee0:	4303      	orrs	r3, r0
 8001ee2:	6960      	ldr	r0, [r4, #20]
 8001ee4:	4303      	orrs	r3, r0
 8001ee6:	69e0      	ldr	r0, [r4, #28]
 8001ee8:	4303      	orrs	r3, r0
 8001eea:	6a20      	ldr	r0, [r4, #32]
 8001eec:	4303      	orrs	r3, r0
 8001eee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ef0:	4303      	orrs	r3, r0
 8001ef2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001ef6:	4303      	orrs	r3, r0
 8001ef8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001efa:	0c12      	lsrs	r2, r2, #16
 8001efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001efe:	f002 0204 	and.w	r2, r2, #4
 8001f02:	431a      	orrs	r2, r3
 8001f04:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f06:	69cb      	ldr	r3, [r1, #28]
 8001f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f0c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f0e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001f10:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f12:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f14:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001f18:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f1a:	2001      	movs	r0, #1
}
 8001f1c:	bd10      	pop	{r4, pc}

08001f1e <HAL_SPI_TransmitReceive>:
{
 8001f1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f22:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001f24:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001f28:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001f2a:	2b01      	cmp	r3, #1
{
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	460d      	mov	r5, r1
 8001f30:	4616      	mov	r6, r2
 8001f32:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001f34:	f000 80ed 	beq.w	8002112 <HAL_SPI_TransmitReceive+0x1f4>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001f3e:	f7ff faeb 	bl	8001518 <HAL_GetTick>
  tmp  = hspi->State;
 8001f42:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001f46:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001f48:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001f4a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001f4c:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001f4e:	d00a      	beq.n	8001f66 <HAL_SPI_TransmitReceive+0x48>
 8001f50:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001f54:	f040 80db 	bne.w	800210e <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001f58:	68a2      	ldr	r2, [r4, #8]
 8001f5a:	2a00      	cmp	r2, #0
 8001f5c:	f040 80d7 	bne.w	800210e <HAL_SPI_TransmitReceive+0x1f0>
 8001f60:	2b04      	cmp	r3, #4
 8001f62:	f040 80d4 	bne.w	800210e <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001f66:	2d00      	cmp	r5, #0
 8001f68:	d04e      	beq.n	8002008 <HAL_SPI_TransmitReceive+0xea>
 8001f6a:	2e00      	cmp	r6, #0
 8001f6c:	d04c      	beq.n	8002008 <HAL_SPI_TransmitReceive+0xea>
 8001f6e:	f1b9 0f00 	cmp.w	r9, #0
 8001f72:	d049      	beq.n	8002008 <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001f74:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f78:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001f7a:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f7c:	bf04      	itt	eq
 8001f7e:	2305      	moveq	r3, #5
 8001f80:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001f88:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f8a:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f8c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001f8e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001f92:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f96:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001f98:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f9c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001f9e:	bf58      	it	pl
 8001fa0:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001fa2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001fa4:	bf58      	it	pl
 8001fa6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001faa:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001fae:	bf58      	it	pl
 8001fb0:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fb2:	68e2      	ldr	r2, [r4, #12]
 8001fb4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001fb8:	d15d      	bne.n	8002076 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001fba:	b119      	cbz	r1, 8001fc4 <HAL_SPI_TransmitReceive+0xa6>
 8001fbc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001fbe:	b292      	uxth	r2, r2
 8001fc0:	2a01      	cmp	r2, #1
 8001fc2:	d106      	bne.n	8001fd2 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001fc4:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001fc8:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001fca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001fd2:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	b9bb      	cbnz	r3, 800200c <HAL_SPI_TransmitReceive+0xee>
 8001fdc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b9a3      	cbnz	r3, 800200c <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001fe2:	f8cd 8000 	str.w	r8, [sp]
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2201      	movs	r2, #1
 8001fea:	2102      	movs	r1, #2
 8001fec:	4620      	mov	r0, r4
 8001fee:	f7ff ff01 	bl	8001df4 <SPI_WaitFlagStateUntilTimeout>
 8001ff2:	2800      	cmp	r0, #0
 8001ff4:	d135      	bne.n	8002062 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001ff6:	4642      	mov	r2, r8
 8001ff8:	4639      	mov	r1, r7
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7ff ff41 	bl	8001e82 <SPI_CheckFlag_BSY>
 8002000:	2800      	cmp	r0, #0
 8002002:	d079      	beq.n	80020f8 <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002004:	2320      	movs	r3, #32
 8002006:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8002008:	2001      	movs	r0, #1
 800200a:	e02b      	b.n	8002064 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800200c:	f1b9 0f00 	cmp.w	r9, #0
 8002010:	d00f      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x114>
 8002012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002014:	b29b      	uxth	r3, r3
 8002016:	b163      	cbz	r3, 8002032 <HAL_SPI_TransmitReceive+0x114>
 8002018:	6823      	ldr	r3, [r4, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	0791      	lsls	r1, r2, #30
 800201e:	d508      	bpl.n	8002032 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002020:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002024:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8002026:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002028:	3b01      	subs	r3, #1
 800202a:	b29b      	uxth	r3, r3
 800202c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 800202e:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002032:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002034:	b29b      	uxth	r3, r3
 8002036:	b163      	cbz	r3, 8002052 <HAL_SPI_TransmitReceive+0x134>
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	07d2      	lsls	r2, r2, #31
 800203e:	d508      	bpl.n	8002052 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8002046:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002048:	3b01      	subs	r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800204e:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002052:	1c78      	adds	r0, r7, #1
 8002054:	d0bf      	beq.n	8001fd6 <HAL_SPI_TransmitReceive+0xb8>
 8002056:	f7ff fa5f 	bl	8001518 <HAL_GetTick>
 800205a:	eba0 0008 	sub.w	r0, r0, r8
 800205e:	4287      	cmp	r7, r0
 8002060:	d8b9      	bhi.n	8001fd6 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8002062:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002064:	2301      	movs	r3, #1
 8002066:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800206a:	2300      	movs	r3, #0
 800206c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8002070:	b005      	add	sp, #20
 8002072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002076:	b119      	cbz	r1, 8002080 <HAL_SPI_TransmitReceive+0x162>
 8002078:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800207a:	b292      	uxth	r2, r2
 800207c:	2a01      	cmp	r2, #1
 800207e:	d106      	bne.n	800208e <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002080:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002084:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8002086:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002088:	3b01      	subs	r3, #1
 800208a:	b29b      	uxth	r3, r3
 800208c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800208e:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002092:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002094:	b29b      	uxth	r3, r3
 8002096:	b91b      	cbnz	r3, 80020a0 <HAL_SPI_TransmitReceive+0x182>
 8002098:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0a0      	beq.n	8001fe2 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80020a0:	f1b9 0f00 	cmp.w	r9, #0
 80020a4:	d00f      	beq.n	80020c6 <HAL_SPI_TransmitReceive+0x1a8>
 80020a6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b163      	cbz	r3, 80020c6 <HAL_SPI_TransmitReceive+0x1a8>
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	0791      	lsls	r1, r2, #30
 80020b2:	d508      	bpl.n	80020c6 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80020b4:	782a      	ldrb	r2, [r5, #0]
 80020b6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80020b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80020c0:	3501      	adds	r5, #1
        txallowed = 0U;
 80020c2:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80020c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	b163      	cbz	r3, 80020e6 <HAL_SPI_TransmitReceive+0x1c8>
 80020cc:	6823      	ldr	r3, [r4, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	07d2      	lsls	r2, r2, #31
 80020d2:	d508      	bpl.n	80020e6 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80020d8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29b      	uxth	r3, r3
 80020de:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80020e0:	3601      	adds	r6, #1
        txallowed = 1U;
 80020e2:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80020e6:	1c7b      	adds	r3, r7, #1
 80020e8:	d0d3      	beq.n	8002092 <HAL_SPI_TransmitReceive+0x174>
 80020ea:	f7ff fa15 	bl	8001518 <HAL_GetTick>
 80020ee:	eba0 0008 	sub.w	r0, r0, r8
 80020f2:	4287      	cmp	r7, r0
 80020f4:	d8cd      	bhi.n	8002092 <HAL_SPI_TransmitReceive+0x174>
 80020f6:	e7b4      	b.n	8002062 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80020f8:	68a3      	ldr	r3, [r4, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1b2      	bne.n	8002064 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	9003      	str	r0, [sp, #12]
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	9203      	str	r2, [sp, #12]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	9303      	str	r3, [sp, #12]
 800210a:	9b03      	ldr	r3, [sp, #12]
 800210c:	e7aa      	b.n	8002064 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 800210e:	2002      	movs	r0, #2
 8002110:	e7a8      	b.n	8002064 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8002112:	2002      	movs	r0, #2
 8002114:	e7ac      	b.n	8002070 <HAL_SPI_TransmitReceive+0x152>

08002116 <HAL_SPI_GetState>:
  return hspi->State;
 8002116:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800211a:	4770      	bx	lr

0800211c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800211c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002120:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002122:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002124:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002126:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002128:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800212c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800212e:	6133      	str	r3, [r6, #16]
{
 8002130:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002132:	6883      	ldr	r3, [r0, #8]
 8002134:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8002136:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002138:	4303      	orrs	r3, r0
 800213a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800213c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002140:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002142:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002146:	430b      	orrs	r3, r1
 8002148:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800214a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800214c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800214e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002154:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002156:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800215a:	6173      	str	r3, [r6, #20]
 800215c:	4b7a      	ldr	r3, [pc, #488]	; (8002348 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800215e:	d17c      	bne.n	800225a <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002160:	429e      	cmp	r6, r3
 8002162:	d003      	beq.n	800216c <UART_SetConfig+0x50>
 8002164:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002168:	429e      	cmp	r6, r3
 800216a:	d144      	bne.n	80021f6 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800216c:	f7ff fe32 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8002170:	2519      	movs	r5, #25
 8002172:	fb05 f300 	mul.w	r3, r5, r0
 8002176:	6860      	ldr	r0, [r4, #4]
 8002178:	f04f 0964 	mov.w	r9, #100	; 0x64
 800217c:	0040      	lsls	r0, r0, #1
 800217e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002182:	fbb3 f3f9 	udiv	r3, r3, r9
 8002186:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800218a:	f7ff fe23 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 800218e:	6863      	ldr	r3, [r4, #4]
 8002190:	4368      	muls	r0, r5
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fbb0 f7f3 	udiv	r7, r0, r3
 8002198:	f7ff fe1c 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 800219c:	6863      	ldr	r3, [r4, #4]
 800219e:	4368      	muls	r0, r5
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80021aa:	fb09 7313 	mls	r3, r9, r3, r7
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	3332      	adds	r3, #50	; 0x32
 80021b2:	fbb3 f3f9 	udiv	r3, r3, r9
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80021bc:	f7ff fe0a 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 80021c0:	6862      	ldr	r2, [r4, #4]
 80021c2:	4368      	muls	r0, r5
 80021c4:	0052      	lsls	r2, r2, #1
 80021c6:	fbb0 faf2 	udiv	sl, r0, r2
 80021ca:	f7ff fe03 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021ce:	6863      	ldr	r3, [r4, #4]
 80021d0:	4368      	muls	r0, r5
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80021dc:	fb09 a313 	mls	r3, r9, r3, sl
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	3332      	adds	r3, #50	; 0x32
 80021e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021ee:	443b      	add	r3, r7
 80021f0:	60b3      	str	r3, [r6, #8]
 80021f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021f6:	f7ff fddd 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80021fa:	2519      	movs	r5, #25
 80021fc:	fb05 f300 	mul.w	r3, r5, r0
 8002200:	6860      	ldr	r0, [r4, #4]
 8002202:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002206:	0040      	lsls	r0, r0, #1
 8002208:	fbb3 f3f0 	udiv	r3, r3, r0
 800220c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002210:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002214:	f7ff fdce 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002218:	6863      	ldr	r3, [r4, #4]
 800221a:	4368      	muls	r0, r5
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002222:	f7ff fdc7 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002226:	6863      	ldr	r3, [r4, #4]
 8002228:	4368      	muls	r0, r5
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002230:	fbb3 f3f9 	udiv	r3, r3, r9
 8002234:	fb09 7313 	mls	r3, r9, r3, r7
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	3332      	adds	r3, #50	; 0x32
 800223c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002246:	f7ff fdb5 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 800224a:	6862      	ldr	r2, [r4, #4]
 800224c:	4368      	muls	r0, r5
 800224e:	0052      	lsls	r2, r2, #1
 8002250:	fbb0 faf2 	udiv	sl, r0, r2
 8002254:	f7ff fdae 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002258:	e7b9      	b.n	80021ce <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800225a:	429e      	cmp	r6, r3
 800225c:	d002      	beq.n	8002264 <UART_SetConfig+0x148>
 800225e:	4b3b      	ldr	r3, [pc, #236]	; (800234c <UART_SetConfig+0x230>)
 8002260:	429e      	cmp	r6, r3
 8002262:	d140      	bne.n	80022e6 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002264:	f7ff fdb6 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8002268:	6867      	ldr	r7, [r4, #4]
 800226a:	2519      	movs	r5, #25
 800226c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002270:	fb05 f300 	mul.w	r3, r5, r0
 8002274:	00bf      	lsls	r7, r7, #2
 8002276:	fbb3 f3f7 	udiv	r3, r3, r7
 800227a:	fbb3 f3f9 	udiv	r3, r3, r9
 800227e:	011f      	lsls	r7, r3, #4
 8002280:	f7ff fda8 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8002284:	6863      	ldr	r3, [r4, #4]
 8002286:	4368      	muls	r0, r5
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	fbb0 f8f3 	udiv	r8, r0, r3
 800228e:	f7ff fda1 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 8002292:	6863      	ldr	r3, [r4, #4]
 8002294:	4368      	muls	r0, r5
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb0 f3f3 	udiv	r3, r0, r3
 800229c:	fbb3 f3f9 	udiv	r3, r3, r9
 80022a0:	fb09 8313 	mls	r3, r9, r3, r8
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	3332      	adds	r3, #50	; 0x32
 80022a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80022ac:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80022b0:	f7ff fd90 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
 80022b4:	6862      	ldr	r2, [r4, #4]
 80022b6:	4368      	muls	r0, r5
 80022b8:	0092      	lsls	r2, r2, #2
 80022ba:	fbb0 faf2 	udiv	sl, r0, r2
 80022be:	f7ff fd89 	bl	8001dd4 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80022c2:	6863      	ldr	r3, [r4, #4]
 80022c4:	4368      	muls	r0, r5
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80022d0:	fb09 a313 	mls	r3, r9, r3, sl
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	3332      	adds	r3, #50	; 0x32
 80022d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	ea43 0308 	orr.w	r3, r3, r8
 80022e4:	e783      	b.n	80021ee <UART_SetConfig+0xd2>
 80022e6:	f7ff fd65 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 80022ea:	6867      	ldr	r7, [r4, #4]
 80022ec:	2519      	movs	r5, #25
 80022ee:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022f2:	fb05 f300 	mul.w	r3, r5, r0
 80022f6:	00bf      	lsls	r7, r7, #2
 80022f8:	fbb3 f3f7 	udiv	r3, r3, r7
 80022fc:	fbb3 f3f9 	udiv	r3, r3, r9
 8002300:	011f      	lsls	r7, r3, #4
 8002302:	f7ff fd57 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002306:	6863      	ldr	r3, [r4, #4]
 8002308:	4368      	muls	r0, r5
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002310:	f7ff fd50 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002314:	6863      	ldr	r3, [r4, #4]
 8002316:	4368      	muls	r0, r5
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	fbb0 f3f3 	udiv	r3, r0, r3
 800231e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002322:	fb09 8313 	mls	r3, r9, r3, r8
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	3332      	adds	r3, #50	; 0x32
 800232a:	fbb3 f3f9 	udiv	r3, r3, r9
 800232e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002332:	f7ff fd3f 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002336:	6862      	ldr	r2, [r4, #4]
 8002338:	4368      	muls	r0, r5
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	fbb0 faf2 	udiv	sl, r0, r2
 8002340:	f7ff fd38 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8002344:	e7bd      	b.n	80022c2 <UART_SetConfig+0x1a6>
 8002346:	bf00      	nop
 8002348:	40011000 	.word	0x40011000
 800234c:	40011400 	.word	0x40011400

08002350 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	4604      	mov	r4, r0
 8002354:	460e      	mov	r6, r1
 8002356:	4617      	mov	r7, r2
 8002358:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800235a:	6821      	ldr	r1, [r4, #0]
 800235c:	680b      	ldr	r3, [r1, #0]
 800235e:	ea36 0303 	bics.w	r3, r6, r3
 8002362:	d101      	bne.n	8002368 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002364:	2000      	movs	r0, #0
}
 8002366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002368:	1c6b      	adds	r3, r5, #1
 800236a:	d0f7      	beq.n	800235c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800236c:	b995      	cbnz	r5, 8002394 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002376:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002380:	2320      	movs	r3, #32
 8002382:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002386:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800238a:	2300      	movs	r3, #0
 800238c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002390:	2003      	movs	r0, #3
 8002392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002394:	f7ff f8c0 	bl	8001518 <HAL_GetTick>
 8002398:	1bc0      	subs	r0, r0, r7
 800239a:	4285      	cmp	r5, r0
 800239c:	d2dd      	bcs.n	800235a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800239e:	e7e6      	b.n	800236e <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080023a0 <HAL_UART_MspInit>:
 80023a0:	4770      	bx	lr

080023a2 <HAL_UART_Init>:
{
 80023a2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80023a4:	4604      	mov	r4, r0
 80023a6:	b340      	cbz	r0, 80023fa <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80023a8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80023ac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023b0:	b91b      	cbnz	r3, 80023ba <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023b2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80023b6:	f7ff fff3 	bl	80023a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023ba:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023bc:	2324      	movs	r3, #36	; 0x24
 80023be:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80023c2:	68d3      	ldr	r3, [r2, #12]
 80023c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023c8:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023ca:	4620      	mov	r0, r4
 80023cc:	f7ff fea6 	bl	800211c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023e0:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e8:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ea:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80023ec:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ee:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80023f0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80023f4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80023f8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023fa:	2001      	movs	r0, #1
}
 80023fc:	bd10      	pop	{r4, pc}

080023fe <HAL_UART_Transmit>:
{
 80023fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002402:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002404:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002408:	2b20      	cmp	r3, #32
{
 800240a:	4604      	mov	r4, r0
 800240c:	460d      	mov	r5, r1
 800240e:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002410:	d14f      	bne.n	80024b2 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002412:	2900      	cmp	r1, #0
 8002414:	d04a      	beq.n	80024ac <HAL_UART_Transmit+0xae>
 8002416:	2a00      	cmp	r2, #0
 8002418:	d048      	beq.n	80024ac <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800241a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800241e:	2b01      	cmp	r3, #1
 8002420:	d047      	beq.n	80024b2 <HAL_UART_Transmit+0xb4>
 8002422:	2301      	movs	r3, #1
 8002424:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002428:	2300      	movs	r3, #0
 800242a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242c:	2321      	movs	r3, #33	; 0x21
 800242e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002432:	f7ff f871 	bl	8001518 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002436:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800243a:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800243c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002440:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002442:	b29b      	uxth	r3, r3
 8002444:	b96b      	cbnz	r3, 8002462 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002446:	463b      	mov	r3, r7
 8002448:	4632      	mov	r2, r6
 800244a:	2140      	movs	r1, #64	; 0x40
 800244c:	4620      	mov	r0, r4
 800244e:	f7ff ff7f 	bl	8002350 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002452:	b9b0      	cbnz	r0, 8002482 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002454:	2320      	movs	r3, #32
 8002456:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800245a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800245e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002462:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002464:	3b01      	subs	r3, #1
 8002466:	b29b      	uxth	r3, r3
 8002468:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800246a:	68a3      	ldr	r3, [r4, #8]
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002470:	4632      	mov	r2, r6
 8002472:	463b      	mov	r3, r7
 8002474:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002478:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800247a:	d10e      	bne.n	800249a <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247c:	f7ff ff68 	bl	8002350 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002480:	b110      	cbz	r0, 8002488 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002482:	2003      	movs	r0, #3
 8002484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002488:	882b      	ldrh	r3, [r5, #0]
 800248a:	6822      	ldr	r2, [r4, #0]
 800248c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002490:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002492:	6923      	ldr	r3, [r4, #16]
 8002494:	b943      	cbnz	r3, 80024a8 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002496:	3502      	adds	r5, #2
 8002498:	e7d2      	b.n	8002440 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800249a:	f7ff ff59 	bl	8002350 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800249e:	2800      	cmp	r0, #0
 80024a0:	d1ef      	bne.n	8002482 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	782a      	ldrb	r2, [r5, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	3501      	adds	r5, #1
 80024aa:	e7c9      	b.n	8002440 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80024b2:	2002      	movs	r0, #2
}
 80024b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024b8 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80024b8:	b570      	push	{r4, r5, r6, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80024bc:	2400      	movs	r4, #0
  cp.role = role;
 80024be:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80024c2:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 80024c6:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80024ca:	4621      	mov	r1, r4
 80024cc:	2218      	movs	r2, #24
 80024ce:	a804      	add	r0, sp, #16
{
 80024d0:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80024d2:	9402      	str	r4, [sp, #8]
 80024d4:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80024d8:	f000 fdc3 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80024dc:	233f      	movs	r3, #63	; 0x3f
 80024de:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 80024e2:	238a      	movs	r3, #138	; 0x8a
 80024e4:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 80024e8:	ab01      	add	r3, sp, #4
 80024ea:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80024ec:	2303      	movs	r3, #3
 80024ee:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80024f0:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 80024f2:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 80024f4:	4621      	mov	r1, r4
 80024f6:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 80024f8:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80024fa:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80024fc:	f000 fc2c 	bl	8002d58 <hci_send_req>
 8002500:	42a0      	cmp	r0, r4
 8002502:	db15      	blt.n	8002530 <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8002504:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002508:	b980      	cbnz	r0, 800252c <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800250a:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800250c:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 8002510:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002514:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002516:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800251a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800251e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002520:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8002522:	9b03      	ldr	r3, [sp, #12]
 8002524:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002526:	f3c3 230f 	ubfx	r3, r3, #8, #16
 800252a:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800252c:	b00a      	add	sp, #40	; 0x28
 800252e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8002530:	20ff      	movs	r0, #255	; 0xff
 8002532:	e7fb      	b.n	800252c <aci_gap_init_IDB05A1+0x74>

08002534 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8002534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002538:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800253a:	2400      	movs	r4, #0
  cp.role = role;
 800253c:	f88d 0004 	strb.w	r0, [sp, #4]
{
 8002540:	4688      	mov	r8, r1
 8002542:	4616      	mov	r6, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002544:	4621      	mov	r1, r4
 8002546:	2218      	movs	r2, #24
 8002548:	a804      	add	r0, sp, #16
{
 800254a:	461d      	mov	r5, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800254c:	9402      	str	r4, [sp, #8]
 800254e:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002552:	f000 fd86 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002556:	233f      	movs	r3, #63	; 0x3f
 8002558:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800255c:	238a      	movs	r3, #138	; 0x8a
 800255e:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8002562:	ab01      	add	r3, sp, #4
 8002564:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8002566:	2301      	movs	r3, #1
 8002568:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800256a:	af02      	add	r7, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 800256c:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 800256e:	4621      	mov	r1, r4
 8002570:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8002572:	9708      	str	r7, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8002574:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8002576:	f000 fbef 	bl	8002d58 <hci_send_req>
 800257a:	42a0      	cmp	r0, r4
 800257c:	db15      	blt.n	80025aa <aci_gap_init_IDB04A1+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800257e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002582:	b978      	cbnz	r0, 80025a4 <aci_gap_init_IDB04A1+0x70>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8002584:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002586:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 800258a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800258e:	f8a8 2000 	strh.w	r2, [r8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8002592:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8002596:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800259a:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800259c:	9a03      	ldr	r2, [sp, #12]
 800259e:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80025a2:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 80025a4:	b00a      	add	sp, #40	; 0x28
 80025a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 80025aa:	20ff      	movs	r0, #255	; 0xff
 80025ac:	e7fa      	b.n	80025a4 <aci_gap_init_IDB04A1+0x70>

080025ae <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80025ae:	b570      	push	{r4, r5, r6, lr}
 80025b0:	b092      	sub	sp, #72	; 0x48
 80025b2:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80025b6:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80025ba:	192e      	adds	r6, r5, r4
 80025bc:	2e1a      	cmp	r6, #26
 80025be:	dc4f      	bgt.n	8002660 <aci_gap_set_discoverable+0xb2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 80025c0:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 80025c4:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 80025c8:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 80025cc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80025d0:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 80025d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80025d6:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 80025d8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80025dc:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 80025de:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80025e2:	f000 fd33 	bl	800304c <memcpy>
  indx +=  LocalNameLen;
 80025e6:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 80025ea:	aa12      	add	r2, sp, #72	; 0x48
 80025ec:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 80025f0:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80025f2:	ae08      	add	r6, sp, #32
  indx++;
 80025f4:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 80025f6:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80025fa:	4622      	mov	r2, r4
 80025fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80025fe:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 8002600:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8002602:	f000 fd23 	bl	800304c <memcpy>
  indx +=  ServiceUUIDLen;  
 8002606:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8002608:	ab12      	add	r3, sp, #72	; 0x48
 800260a:	4423      	add	r3, r4
 800260c:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8002610:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 8002614:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8002616:	aa12      	add	r2, sp, #72	; 0x48
 8002618:	fa52 f383 	uxtab	r3, r2, r3
 800261c:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8002620:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002624:	2100      	movs	r1, #0
 8002626:	2218      	movs	r2, #24
 8002628:	a802      	add	r0, sp, #8
 800262a:	f000 fd1a 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800262e:	233f      	movs	r3, #63	; 0x3f
 8002630:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8002634:	2383      	movs	r3, #131	; 0x83
 8002636:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  2;    
 800263a:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 800263c:	f10d 0307 	add.w	r3, sp, #7
 8002640:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8002642:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8002644:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002646:	2100      	movs	r1, #0
 8002648:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 800264a:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 800264c:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800264e:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002650:	f000 fb82 	bl	8002d58 <hci_send_req>
 8002654:	2800      	cmp	r0, #0
 8002656:	db05      	blt.n	8002664 <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8002658:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 800265c:	b012      	add	sp, #72	; 0x48
 800265e:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002660:	2042      	movs	r0, #66	; 0x42
 8002662:	e7fb      	b.n	800265c <aci_gap_set_discoverable+0xae>
    return BLE_STATUS_TIMEOUT;
 8002664:	20ff      	movs	r0, #255	; 0xff
 8002666:	e7f9      	b.n	800265c <aci_gap_set_discoverable+0xae>

08002668 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8002668:	b510      	push	{r4, lr}
 800266a:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800266c:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 8002670:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8002674:	f102 0010 	add.w	r0, r2, #16
 8002678:	f10d 011e 	add.w	r1, sp, #30
 800267c:	f852 4b04 	ldr.w	r4, [r2], #4
 8002680:	f841 4b04 	str.w	r4, [r1], #4
 8002684:	4282      	cmp	r2, r0
 8002686:	d1f9      	bne.n	800267c <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 8002688:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 800268c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8002690:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8002694:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8002698:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 800269c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800269e:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80026a2:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 80026a4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80026a8:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80026ac:	2100      	movs	r1, #0
 80026ae:	a801      	add	r0, sp, #4
 80026b0:	f000 fcd7 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80026b4:	233f      	movs	r3, #63	; 0x3f
 80026b6:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80026ba:	2386      	movs	r3, #134	; 0x86
 80026bc:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 80026c0:	ab07      	add	r3, sp, #28
 80026c2:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 80026c4:	231a      	movs	r3, #26
 80026c6:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 80026c8:	f10d 0303 	add.w	r3, sp, #3
 80026cc:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80026ce:	2100      	movs	r1, #0
  rq.rlen = 1;
 80026d0:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80026d2:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 80026d4:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 80026d6:	f000 fb3f 	bl	8002d58 <hci_send_req>
 80026da:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80026dc:	bfac      	ite	ge
 80026de:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80026e2:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 80026e4:	b00e      	add	sp, #56	; 0x38
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 80026e8:	b510      	push	{r4, lr}
 80026ea:	b08e      	sub	sp, #56	; 0x38
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
  cp.max_conn_length = htobs(max_conn_length);

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80026ec:	2418      	movs	r4, #24
  cp.peer_bdaddr_type = peer_bdaddr_type;
 80026ee:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	889b      	ldrh	r3, [r3, #4]
 80026f6:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
  cp.own_bdaddr_type = own_bdaddr_type;
 80026fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80026fe:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp.conn_min_interval = htobs(conn_min_interval);
 8002702:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8002706:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  cp.conn_max_interval = htobs(conn_max_interval);
 800270a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 800270e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  cp.conn_latency = htobs(conn_latency);
 8002712:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8002716:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  cp.supervision_timeout = htobs(supervision_timeout);
 800271a:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800271e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  cp.min_conn_length = htobs(min_conn_length);
 8002722:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
  cp.scanInterval = htobs(scanInterval);
 8002726:	f8ad 0020 	strh.w	r0, [sp, #32]
  cp.scanWindow = htobs(scanWindow);
 800272a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 800272e:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
  cp.min_conn_length = htobs(min_conn_length);
 8002732:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002736:	4622      	mov	r2, r4
  cp.max_conn_length = htobs(max_conn_length);
 8002738:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 800273c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002740:	2100      	movs	r1, #0
 8002742:	a802      	add	r0, sp, #8
 8002744:	f000 fc8d 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002748:	233f      	movs	r3, #63	; 0x3f
 800274a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 800274e:	239c      	movs	r3, #156	; 0x9c
 8002750:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8002754:	ab08      	add	r3, sp, #32
 8002756:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.event = EVT_CMD_STATUS;
 8002758:	230f      	movs	r3, #15
 800275a:	9303      	str	r3, [sp, #12]
  rq.rparam = &status;
 800275c:	f10d 0307 	add.w	r3, sp, #7
 8002760:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002762:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002764:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002766:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 8002768:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 800276a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800276c:	f000 faf4 	bl	8002d58 <hci_send_req>
 8002770:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8002772:	bfac      	ite	ge
 8002774:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8002778:	20ff      	movlt	r0, #255	; 0xff
}
 800277a:	b00e      	add	sp, #56	; 0x38
 800277c:	bd10      	pop	{r4, pc}

0800277e <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 800277e:	b500      	push	{lr}
 8002780:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002782:	2218      	movs	r2, #24
 8002784:	2100      	movs	r1, #0
 8002786:	a802      	add	r0, sp, #8
 8002788:	f000 fc6b 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800278c:	233f      	movs	r3, #63	; 0x3f
 800278e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8002792:	f240 1301 	movw	r3, #257	; 0x101
 8002796:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800279a:	f10d 0307 	add.w	r3, sp, #7
 800279e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80027a0:	2100      	movs	r1, #0
  rq.rlen = 1;
 80027a2:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80027a4:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80027a6:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80027a8:	f000 fad6 	bl	8002d58 <hci_send_req>
 80027ac:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80027ae:	bfac      	ite	ge
 80027b0:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80027b4:	20ff      	movlt	r0, #255	; 0xff
}
 80027b6:	b009      	add	sp, #36	; 0x24
 80027b8:	f85d fb04 	ldr.w	pc, [sp], #4

080027bc <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80027bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027be:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80027c0:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 80027c2:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 80027c4:	bf0c      	ite	eq
 80027c6:	2402      	moveq	r4, #2
 80027c8:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 80027ca:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 80027ce:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80027d0:	f10d 0005 	add.w	r0, sp, #5
 80027d4:	4622      	mov	r2, r4
{
 80027d6:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80027d8:	f000 fc38 	bl	800304c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 80027dc:	ab0c      	add	r3, sp, #48	; 0x30
 80027de:	4423      	add	r3, r4
 80027e0:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 80027e4:	ab0c      	add	r3, sp, #48	; 0x30
 80027e6:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 80027e8:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 80027ea:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80027ee:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80027f0:	2218      	movs	r2, #24
 80027f2:	4629      	mov	r1, r5
 80027f4:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80027f8:	f8ad 5000 	strh.w	r5, [sp]
 80027fc:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002800:	f000 fc2f 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002804:	233f      	movs	r3, #63	; 0x3f
 8002806:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800280a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800280e:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 8002812:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8002814:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8002816:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 8002818:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 800281a:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800281c:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8002820:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8002822:	f000 fa99 	bl	8002d58 <hci_send_req>
 8002826:	42a8      	cmp	r0, r5
 8002828:	db09      	blt.n	800283e <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800282a:	f89d 0000 	ldrb.w	r0, [sp]
 800282e:	b920      	cbnz	r0, 800283a <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8002830:	9b00      	ldr	r3, [sp, #0]
 8002832:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002834:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8002838:	8013      	strh	r3, [r2, #0]

  return 0;
}
 800283a:	b00d      	add	sp, #52	; 0x34
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 800283e:	20ff      	movs	r0, #255	; 0xff
 8002840:	e7fb      	b.n	800283a <aci_gatt_add_serv+0x7e>

08002842 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8002842:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8002844:	2901      	cmp	r1, #1
{
 8002846:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 8002848:	bf0c      	ite	eq
 800284a:	2402      	moveq	r4, #2
 800284c:	2410      	movne	r4, #16
{
 800284e:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8002850:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8002854:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 8002856:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800285a:	f10d 001f 	add.w	r0, sp, #31
 800285e:	4631      	mov	r1, r6
{
 8002860:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8002862:	f000 fbf3 	bl	800304c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8002866:	ab0e      	add	r3, sp, #56	; 0x38
 8002868:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 800286a:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 800286c:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 8002870:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8002874:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 8002878:	ab0e      	add	r3, sp, #56	; 0x38
 800287a:	4423      	add	r3, r4
 800287c:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8002880:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 8002884:	ab0e      	add	r3, sp, #56	; 0x38
 8002886:	4423      	add	r3, r4
 8002888:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800288c:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 8002890:	ab0e      	add	r3, sp, #56	; 0x38
 8002892:	4423      	add	r3, r4
 8002894:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8002898:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 800289c:	ab0e      	add	r3, sp, #56	; 0x38
 800289e:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80028a0:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 80028a2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80028a6:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80028aa:	4629      	mov	r1, r5
 80028ac:	2218      	movs	r2, #24
 80028ae:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80028b0:	f8ad 5000 	strh.w	r5, [sp]
 80028b4:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80028b8:	f000 fbd3 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80028bc:	233f      	movs	r3, #63	; 0x3f
 80028be:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 80028c2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80028c6:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 80028ca:	ab07      	add	r3, sp, #28
 80028cc:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 80028ce:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80028d0:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 80028d2:	4629      	mov	r1, r5
 80028d4:	a801      	add	r0, sp, #4
  rq.clen = indx;
 80028d6:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 80028d8:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80028dc:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 80028de:	f000 fa3b 	bl	8002d58 <hci_send_req>
 80028e2:	42a8      	cmp	r0, r5
 80028e4:	db09      	blt.n	80028fa <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80028e6:	f89d 0000 	ldrb.w	r0, [sp]
 80028ea:	b920      	cbnz	r0, 80028f6 <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 80028ec:	9b00      	ldr	r3, [sp, #0]
 80028ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80028f0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80028f4:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80028f6:	b00e      	add	sp, #56	; 0x38
 80028f8:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80028fa:	20ff      	movs	r0, #255	; 0xff
 80028fc:	e7fb      	b.n	80028f6 <aci_gatt_add_char+0xb4>

080028fe <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 80028fe:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8002900:	2b7a      	cmp	r3, #122	; 0x7a
{
 8002902:	b0a8      	sub	sp, #160	; 0xa0
 8002904:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8002906:	dc2d      	bgt.n	8002964 <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8002908:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800290c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 8002910:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8002914:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 8002916:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800291a:	461a      	mov	r2, r3
 800291c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8002920:	f000 fb94 	bl	800304c <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002924:	2218      	movs	r2, #24
 8002926:	2100      	movs	r1, #0
 8002928:	a802      	add	r0, sp, #8
 800292a:	f000 fb9a 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800292e:	233f      	movs	r3, #63	; 0x3f
 8002930:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8002934:	f44f 7383 	mov.w	r3, #262	; 0x106
 8002938:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800293c:	ab08      	add	r3, sp, #32
 800293e:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 8002940:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 8002942:	f10d 0307 	add.w	r3, sp, #7
 8002946:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8002948:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800294a:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800294c:	2100      	movs	r1, #0
 800294e:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8002950:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8002952:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002954:	f000 fa00 	bl	8002d58 <hci_send_req>
 8002958:	2800      	cmp	r0, #0
 800295a:	db05      	blt.n	8002968 <aci_gatt_update_char_value+0x6a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800295c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8002960:	b028      	add	sp, #160	; 0xa0
 8002962:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002964:	2042      	movs	r0, #66	; 0x42
 8002966:	e7fb      	b.n	8002960 <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;
 8002968:	20ff      	movs	r0, #255	; 0xff
 800296a:	e7f9      	b.n	8002960 <aci_gatt_update_char_value+0x62>

0800296c <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 800296c:	b510      	push	{r4, lr}
  indx += 2;
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
 800296e:	2b01      	cmp	r3, #1
{
 8002970:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8002972:	bf0c      	ite	eq
 8002974:	2402      	moveq	r4, #2
 8002976:	2410      	movne	r4, #16
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8002978:	f8ad 0008 	strh.w	r0, [sp, #8]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 800297c:	f8ad 100a 	strh.w	r1, [sp, #10]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8002980:	f8ad 200c 	strh.w	r2, [sp, #12]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8002984:	9910      	ldr	r1, [sp, #64]	; 0x40
  buffer[indx] = charUuidType;
 8002986:	f88d 300e 	strb.w	r3, [sp, #14]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 800298a:	4622      	mov	r2, r4
 800298c:	f10d 000f 	add.w	r0, sp, #15
 8002990:	f000 fb5c 	bl	800304c <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002994:	2218      	movs	r2, #24
 8002996:	2100      	movs	r1, #0
 8002998:	a808      	add	r0, sp, #32
 800299a:	f000 fb62 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800299e:	233f      	movs	r3, #63	; 0x3f
 80029a0:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80029a4:	f44f 738b 	mov.w	r3, #278	; 0x116
 80029a8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 80029ac:	ab02      	add	r3, sp, #8
 80029ae:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
 80029b0:	230f      	movs	r3, #15
 80029b2:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 80029b4:	f10d 0307 	add.w	r3, sp, #7
 80029b8:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 80029ba:	3407      	adds	r4, #7
  rq.rlen = 1;
 80029bc:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80029be:	2100      	movs	r1, #0
 80029c0:	a808      	add	r0, sp, #32
  rq.clen = indx;
 80029c2:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rlen = 1;
 80029c4:	930d      	str	r3, [sp, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80029c6:	f000 f9c7 	bl	8002d58 <hci_send_req>
 80029ca:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80029cc:	bfac      	ite	ge
 80029ce:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 80029d2:	20ff      	movlt	r0, #255	; 0xff
}
 80029d4:	b00e      	add	sp, #56	; 0x38
 80029d6:	bd10      	pop	{r4, pc}

080029d8 <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80029d8:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80029da:	2a7b      	cmp	r2, #123	; 0x7b
{
 80029dc:	b0a8      	sub	sp, #160	; 0xa0
 80029de:	4614      	mov	r4, r2
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80029e0:	dc2c      	bgt.n	8002a3c <aci_gatt_write_charac_descriptor+0x64>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80029e2:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 80029e6:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 80029ea:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 80029ee:	4619      	mov	r1, r3
  buffer[indx] = value_len;
 80029f0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 80029f4:	f000 fb2a 	bl	800304c <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80029f8:	2218      	movs	r2, #24
 80029fa:	2100      	movs	r1, #0
 80029fc:	a802      	add	r0, sp, #8
 80029fe:	f000 fb30 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002a02:	233f      	movs	r3, #63	; 0x3f
 8002a04:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 8002a08:	f240 1321 	movw	r3, #289	; 0x121
 8002a0c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8002a10:	ab08      	add	r3, sp, #32
 8002a12:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
 8002a14:	230f      	movs	r3, #15
 8002a16:	9303      	str	r3, [sp, #12]
  indx +=  value_len;
 8002a18:	3405      	adds	r4, #5
  rq.rparam = &status;
 8002a1a:	f10d 0307 	add.w	r3, sp, #7
 8002a1e:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8002a20:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8002a22:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002a24:	2100      	movs	r1, #0
 8002a26:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8002a28:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8002a2a:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002a2c:	f000 f994 	bl	8002d58 <hci_send_req>
 8002a30:	2800      	cmp	r0, #0
 8002a32:	db05      	blt.n	8002a40 <aci_gatt_write_charac_descriptor+0x68>
    return BLE_STATUS_TIMEOUT;

  return status;
 8002a34:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002a38:	b028      	add	sp, #160	; 0xa0
 8002a3a:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002a3c:	2042      	movs	r0, #66	; 0x42
 8002a3e:	e7fb      	b.n	8002a38 <aci_gatt_write_charac_descriptor+0x60>
    return BLE_STATUS_TIMEOUT;
 8002a40:	20ff      	movs	r0, #255	; 0xff
 8002a42:	e7f9      	b.n	8002a38 <aci_gatt_write_charac_descriptor+0x60>

08002a44 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8002a44:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8002a46:	2a14      	cmp	r2, #20
{
 8002a48:	b08e      	sub	sp, #56	; 0x38
 8002a4a:	4614      	mov	r4, r2
  if(val_len > sizeof(cp.attr_val))
 8002a4c:	d829      	bhi.n	8002aa2 <aci_gatt_write_without_response+0x5e>
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 8002a4e:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp.attr_handle = htobs(attr_handle);
 8002a52:	f8ad 101e 	strh.w	r1, [sp, #30]
  cp.val_len = val_len;
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8002a56:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8002a5a:	4619      	mov	r1, r3
  cp.val_len = val_len;
 8002a5c:	f88d 2020 	strb.w	r2, [sp, #32]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8002a60:	f000 faf4 	bl	800304c <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002a64:	2218      	movs	r2, #24
 8002a66:	2100      	movs	r1, #0
 8002a68:	a801      	add	r0, sp, #4
 8002a6a:	f000 fafa 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002a6e:	233f      	movs	r3, #63	; 0x3f
 8002a70:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 8002a74:	f240 1323 	movw	r3, #291	; 0x123
 8002a78:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8002a7c:	ab07      	add	r3, sp, #28
 8002a7e:	9303      	str	r3, [sp, #12]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
  rq.rparam = &status;
 8002a80:	f10d 0303 	add.w	r3, sp, #3
 8002a84:	9305      	str	r3, [sp, #20]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8002a86:	3405      	adds	r4, #5
  rq.rlen = 1;
 8002a88:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	a801      	add	r0, sp, #4
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8002a8e:	9404      	str	r4, [sp, #16]
  rq.rlen = 1;
 8002a90:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8002a92:	f000 f961 	bl	8002d58 <hci_send_req>
 8002a96:	2800      	cmp	r0, #0
 8002a98:	db05      	blt.n	8002aa6 <aci_gatt_write_without_response+0x62>
    return BLE_STATUS_TIMEOUT;

  return status;
 8002a9a:	f89d 0003 	ldrb.w	r0, [sp, #3]
}
 8002a9e:	b00e      	add	sp, #56	; 0x38
 8002aa0:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002aa2:	2042      	movs	r0, #66	; 0x42
 8002aa4:	e7fb      	b.n	8002a9e <aci_gatt_write_without_response+0x5a>
    return BLE_STATUS_TIMEOUT;
 8002aa6:	20ff      	movs	r0, #255	; 0xff
 8002aa8:	e7f9      	b.n	8002a9e <aci_gatt_write_without_response+0x5a>

08002aaa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8002aae:	2c7e      	cmp	r4, #126	; 0x7e
{
 8002ab0:	b0a8      	sub	sp, #160	; 0xa0
 8002ab2:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8002ab4:	dc27      	bgt.n	8002b06 <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8002ab6:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8002ab8:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 8002abc:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8002ac0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 8002ac4:	f000 fac2 	bl	800304c <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002ac8:	2218      	movs	r2, #24
 8002aca:	2100      	movs	r1, #0
 8002acc:	a802      	add	r0, sp, #8
 8002ace:	f000 fac8 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002ad2:	233f      	movs	r3, #63	; 0x3f
 8002ad4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8002ad8:	230c      	movs	r3, #12
 8002ada:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8002ade:	ab08      	add	r3, sp, #32
 8002ae0:	9304      	str	r3, [sp, #16]
  indx +=  len;
 8002ae2:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 8002ae4:	f10d 0307 	add.w	r3, sp, #7
 8002ae8:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8002aea:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8002aec:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8002aee:	2100      	movs	r1, #0
 8002af0:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8002af2:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8002af4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002af6:	f000 f92f 	bl	8002d58 <hci_send_req>
 8002afa:	2800      	cmp	r0, #0
 8002afc:	db05      	blt.n	8002b0a <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 8002afe:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8002b02:	b028      	add	sp, #160	; 0xa0
 8002b04:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8002b06:	2042      	movs	r0, #66	; 0x42
 8002b08:	e7fb      	b.n	8002b02 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 8002b0a:	20ff      	movs	r0, #255	; 0xff
 8002b0c:	e7f9      	b.n	8002b02 <aci_hal_write_config_data+0x58>

08002b0e <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8002b0e:	b500      	push	{lr}
 8002b10:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002b12:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8002b14:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8002b18:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002b1c:	a802      	add	r0, sp, #8
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f000 fa9f 	bl	8003062 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8002b24:	233f      	movs	r3, #63	; 0x3f
 8002b26:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8002b2a:	230f      	movs	r3, #15
 8002b2c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8002b30:	ab01      	add	r3, sp, #4
 8002b32:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8002b34:	2302      	movs	r3, #2
 8002b36:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8002b38:	f10d 0303 	add.w	r3, sp, #3
 8002b3c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8002b3e:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002b40:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002b42:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8002b44:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002b46:	f000 f907 	bl	8002d58 <hci_send_req>
 8002b4a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8002b4c:	bfac      	ite	ge
 8002b4e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8002b52:	20ff      	movlt	r0, #255	; 0xff
}
 8002b54:	b009      	add	sp, #36	; 0x24
 8002b56:	f85d fb04 	ldr.w	pc, [sp], #4

08002b5a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8002b5a:	b530      	push	{r4, r5, lr}
 8002b5c:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8002b5e:	f10d 030e 	add.w	r3, sp, #14
 8002b62:	9300      	str	r3, [sp, #0]
{
 8002b64:	4605      	mov	r5, r0
 8002b66:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8002b68:	ab03      	add	r3, sp, #12
 8002b6a:	f10d 0209 	add.w	r2, sp, #9
 8002b6e:	f10d 010a 	add.w	r1, sp, #10
 8002b72:	a802      	add	r0, sp, #8
 8002b74:	f000 f82f 	bl	8002bd6 <hci_le_read_local_version>
 8002b78:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8002b7a:	b968      	cbnz	r0, 8002b98 <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 8002b7c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8002b80:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8002b84:	0a0b      	lsrs	r3, r1, #8
 8002b86:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8002b88:	f002 030f 	and.w	r3, r2, #15
 8002b8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8002b90:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8002b94:	4313      	orrs	r3, r2
 8002b96:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8002b98:	b005      	add	sp, #20
 8002b9a:	bd30      	pop	{r4, r5, pc}

08002b9c <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8002b9c:	b500      	push	{lr}
 8002b9e:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002ba0:	2218      	movs	r2, #24
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	a802      	add	r0, sp, #8
 8002ba6:	f000 fa5c 	bl	8003062 <memset>
  rq.ogf = OGF_HOST_CTL;
 8002baa:	2303      	movs	r3, #3
 8002bac:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8002bb0:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8002bb4:	f10d 0307 	add.w	r3, sp, #7
 8002bb8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002bba:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002bbc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002bbe:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8002bc0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002bc2:	f000 f8c9 	bl	8002d58 <hci_send_req>
 8002bc6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8002bc8:	bfac      	ite	ge
 8002bca:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8002bce:	20ff      	movlt	r0, #255	; 0xff
}
 8002bd0:	b009      	add	sp, #36	; 0x24
 8002bd2:	f85d fb04 	ldr.w	pc, [sp], #4

08002bd6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8002bd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002bda:	2400      	movs	r4, #0
{
 8002bdc:	b08b      	sub	sp, #44	; 0x2c
 8002bde:	4681      	mov	r9, r0
 8002be0:	4688      	mov	r8, r1
 8002be2:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002be4:	4621      	mov	r1, r4
 8002be6:	2218      	movs	r2, #24
 8002be8:	a804      	add	r0, sp, #16
{
 8002bea:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002bec:	9401      	str	r4, [sp, #4]
 8002bee:	9402      	str	r4, [sp, #8]
 8002bf0:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002bf4:	f000 fa35 	bl	8003062 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8002c04:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8002c06:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002c08:	4621      	mov	r1, r4
 8002c0a:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8002c0c:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8002c0e:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8002c10:	f000 f8a2 	bl	8002d58 <hci_send_req>
 8002c14:	42a0      	cmp	r0, r4
 8002c16:	db1c      	blt.n	8002c52 <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8002c18:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8002c1c:	b9b0      	cbnz	r0, 8002c4c <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 8002c1e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002c22:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 8002c26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002c2a:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 8002c2e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002c32:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8002c34:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8002c36:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8002c3a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002c3e:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8002c40:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8002c44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002c4a:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8002c4c:	b00b      	add	sp, #44	; 0x2c
 8002c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 8002c52:	20ff      	movs	r0, #255	; 0xff
 8002c54:	e7fa      	b.n	8002c4c <hci_le_read_local_version+0x76>

08002c56 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8002c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c58:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8002c5a:	ad08      	add	r5, sp, #32
 8002c5c:	2420      	movs	r4, #32
{
 8002c5e:	4606      	mov	r6, r0
 8002c60:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8002c62:	4622      	mov	r2, r4
 8002c64:	2100      	movs	r1, #0
 8002c66:	4628      	mov	r0, r5
 8002c68:	f000 f9fb 	bl	8003062 <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8002c6c:	2e1f      	cmp	r6, #31
 8002c6e:	4632      	mov	r2, r6
 8002c70:	4639      	mov	r1, r7
 8002c72:	bf28      	it	cs
 8002c74:	221f      	movcs	r2, #31
 8002c76:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 8002c7a:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8002c7e:	f000 f9e5 	bl	800304c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8002c82:	2218      	movs	r2, #24
 8002c84:	2100      	movs	r1, #0
 8002c86:	a802      	add	r0, sp, #8
 8002c88:	f000 f9eb 	bl	8003062 <memset>
  rq.ogf = OGF_LE_CTL;
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8002c92:	2309      	movs	r3, #9
 8002c94:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 8002c98:	f10d 0307 	add.w	r3, sp, #7
 8002c9c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8002c9e:	2100      	movs	r1, #0
  rq.rlen = 1;
 8002ca0:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8002ca2:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 8002ca4:	9504      	str	r5, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8002ca6:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8002ca8:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8002caa:	f000 f855 	bl	8002d58 <hci_send_req>
 8002cae:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8002cb0:	bfac      	ite	ge
 8002cb2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8002cb6:	20ff      	movlt	r0, #255	; 0xff
}
 8002cb8:	b011      	add	sp, #68	; 0x44
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cbc <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 8002cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 8002cbe:	4d08      	ldr	r5, [pc, #32]	; (8002ce0 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 8002cc0:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	f000 f963 	bl	8002f8e <list_is_empty>
 8002cc8:	b108      	cbz	r0, 8002cce <move_list.constprop.0+0x12>
  }
}
 8002cca:	b003      	add	sp, #12
 8002ccc:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 8002cce:	a901      	add	r1, sp, #4
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f000 f981 	bl	8002fd8 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8002cd6:	9901      	ldr	r1, [sp, #4]
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f000 f95d 	bl	8002f98 <list_insert_head>
 8002cde:	e7f0      	b.n	8002cc2 <move_list.constprop.0+0x6>
 8002ce0:	20000550 	.word	0x20000550

08002ce4 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8002ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ce8:	4d10      	ldr	r5, [pc, #64]	; (8002d2c <hci_init+0x48>)
  uint8_t index;
  
  if(UserEvtRx != NULL)
 8002cea:	b100      	cbz	r0, 8002cee <hci_init+0xa>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8002cec:	61e8      	str	r0, [r5, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8002cee:	f7fd fea9 	bl	8000a44 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8002cf2:	480f      	ldr	r0, [pc, #60]	; (8002d30 <hci_init+0x4c>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8002cf4:	4f0f      	ldr	r7, [pc, #60]	; (8002d34 <hci_init+0x50>)
 8002cf6:	4e0e      	ldr	r6, [pc, #56]	; (8002d30 <hci_init+0x4c>)
  list_init_head(&hciReadPktPool);
 8002cf8:	f000 f946 	bl	8002f88 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8002cfc:	480e      	ldr	r0, [pc, #56]	; (8002d38 <hci_init+0x54>)
 8002cfe:	f000 f943 	bl	8002f88 <list_init_head>
 8002d02:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8002d04:	1939      	adds	r1, r7, r4
 8002d06:	4630      	mov	r0, r6
 8002d08:	348c      	adds	r4, #140	; 0x8c
 8002d0a:	f000 f94c 	bl	8002fa6 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8002d0e:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8002d12:	d1f7      	bne.n	8002d04 <hci_init+0x20>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8002d14:	682b      	ldr	r3, [r5, #0]
 8002d16:	b10b      	cbz	r3, 8002d1c <hci_init+0x38>
 8002d18:	2000      	movs	r0, #0
 8002d1a:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8002d1c:	68ab      	ldr	r3, [r5, #8]
 8002d1e:	b113      	cbz	r3, 8002d26 <hci_init+0x42>
}
 8002d20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8002d24:	4718      	bx	r3
 8002d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d2a:	bf00      	nop
 8002d2c:	200001a0 	.word	0x200001a0
 8002d30:	20000548 	.word	0x20000548
 8002d34:	200001c0 	.word	0x200001c0
 8002d38:	20000550 	.word	0x20000550

08002d3c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8002d3c:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <hci_register_io_bus+0x18>)
 8002d3e:	6802      	ldr	r2, [r0, #0]
 8002d40:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8002d42:	68c2      	ldr	r2, [r0, #12]
 8002d44:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8002d46:	6902      	ldr	r2, [r0, #16]
 8002d48:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 8002d4a:	6982      	ldr	r2, [r0, #24]
 8002d4c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 8002d4e:	6882      	ldr	r2, [r0, #8]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	4770      	bx	lr
 8002d54:	200001a0 	.word	0x200001a0

08002d58 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 8002d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5c:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002d5e:	8846      	ldrh	r6, [r0, #2]
 8002d60:	f8b0 9000 	ldrh.w	r9, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8002d64:	4f5e      	ldr	r7, [pc, #376]	; (8002ee0 <hci_send_req+0x188>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8002d66:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002ee8 <hci_send_req+0x190>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8002d6a:	2300      	movs	r3, #0
{
 8002d6c:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8002d6e:	a802      	add	r0, sp, #8
{
 8002d70:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 8002d72:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 8002d74:	f000 f908 	bl	8002f88 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8002d78:	4638      	mov	r0, r7
 8002d7a:	f000 f939 	bl	8002ff0 <list_get_size>
 8002d7e:	2801      	cmp	r0, #1
 8002d80:	dd5e      	ble.n	8002e40 <hci_send_req+0xe8>

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8002d82:	8867      	ldrh	r7, [r4, #2]
 8002d84:	f894 800c 	ldrb.w	r8, [r4, #12]
 8002d88:	f8b4 b000 	ldrh.w	fp, [r4]
 8002d8c:	f8d4 a008 	ldr.w	sl, [r4, #8]
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002d90:	2006      	movs	r0, #6
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8002d92:	f3c7 0709 	ubfx	r7, r7, #0, #10
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002d96:	f7fe fc2b 	bl	80015f0 <HAL_NVIC_DisableIRQ>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8002d9a:	ea47 278b 	orr.w	r7, r7, fp, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8002d9e:	2301      	movs	r3, #1
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8002da0:	4642      	mov	r2, r8
 8002da2:	4651      	mov	r1, sl
 8002da4:	a805      	add	r0, sp, #20
  payload[0] = HCI_COMMAND_PKT;
 8002da6:	f88d 3010 	strb.w	r3, [sp, #16]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8002daa:	f8ad 7011 	strh.w	r7, [sp, #17]
 8002dae:	f88d 8013 	strb.w	r8, [sp, #19]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8002db2:	f000 f94b 	bl	800304c <memcpy>
  if (hciContext.io.Send)
 8002db6:	4b4b      	ldr	r3, [pc, #300]	; (8002ee4 <hci_send_req+0x18c>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	b11b      	cbz	r3, 8002dc4 <hci_send_req+0x6c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8002dbc:	f108 0104 	add.w	r1, r8, #4
 8002dc0:	a804      	add	r0, sp, #16
 8002dc2:	4798      	blx	r3
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002dc4:	2006      	movs	r0, #6
 8002dc6:	f7fe fc07 	bl	80015d8 <HAL_NVIC_EnableIRQ>
  
  if (async)
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	d178      	bne.n	8002ec0 <hci_send_req+0x168>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002dce:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8002dd2:	ea45 2589 	orr.w	r5, r5, r9, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8002dd6:	4e44      	ldr	r6, [pc, #272]	; (8002ee8 <hci_send_req+0x190>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8002dd8:	4f41      	ldr	r7, [pc, #260]	; (8002ee0 <hci_send_req+0x188>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8002dda:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 8002ddc:	f7fe fb9c 	bl	8001518 <HAL_GetTick>
 8002de0:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8002de2:	f7fe fb99 	bl	8001518 <HAL_GetTick>
 8002de6:	eba0 0008 	sub.w	r0, r0, r8
 8002dea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dee:	d84a      	bhi.n	8002e86 <hci_send_req+0x12e>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8002df0:	4630      	mov	r0, r6
 8002df2:	f000 f8cc 	bl	8002f8e <list_is_empty>
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d1f3      	bne.n	8002de2 <hci_send_req+0x8a>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8002dfa:	a901      	add	r1, sp, #4
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	f000 f8df 	bl	8002fc0 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8002e02:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 8002e04:	7a0b      	ldrb	r3, [r1, #8]
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d109      	bne.n	8002e1e <hci_send_req+0xc6>
      switch (event_pckt->evt) 
 8002e0a:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8002e0c:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8002e10:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8002e12:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 8002e16:	d02c      	beq.n	8002e72 <hci_send_req+0x11a>
 8002e18:	d81b      	bhi.n	8002e52 <hci_send_req+0xfa>
 8002e1a:	280e      	cmp	r0, #14
 8002e1c:	d052      	beq.n	8002ec4 <hci_send_req+0x16c>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8002e1e:	4638      	mov	r0, r7
 8002e20:	f000 f8b5 	bl	8002f8e <list_is_empty>
 8002e24:	2800      	cmp	r0, #0
 8002e26:	d058      	beq.n	8002eda <hci_send_req+0x182>
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f000 f8b0 	bl	8002f8e <list_is_empty>
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d053      	beq.n	8002eda <hci_send_req+0x182>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002e32:	9901      	ldr	r1, [sp, #4]
 8002e34:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8002e36:	f000 f8b6 	bl	8002fa6 <list_insert_tail>
      hciReadPacket=NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	9301      	str	r3, [sp, #4]
 8002e3e:	e7cd      	b.n	8002ddc <hci_send_req+0x84>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8002e40:	a904      	add	r1, sp, #16
 8002e42:	4640      	mov	r0, r8
 8002e44:	f000 f8bc 	bl	8002fc0 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8002e48:	9904      	ldr	r1, [sp, #16]
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	f000 f8ab 	bl	8002fa6 <list_insert_tail>
 8002e50:	e792      	b.n	8002d78 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 8002e52:	2810      	cmp	r0, #16
 8002e54:	d017      	beq.n	8002e86 <hci_send_req+0x12e>
 8002e56:	283e      	cmp	r0, #62	; 0x3e
 8002e58:	d1e1      	bne.n	8002e1e <hci_send_req+0xc6>
        if (me->subevent != r->event)
 8002e5a:	7ac8      	ldrb	r0, [r1, #11]
 8002e5c:	6862      	ldr	r2, [r4, #4]
 8002e5e:	4290      	cmp	r0, r2
 8002e60:	d1dd      	bne.n	8002e1e <hci_send_req+0xc6>
        len -= 1;
 8002e62:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 8002e64:	6963      	ldr	r3, [r4, #20]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	bf28      	it	cs
 8002e6a:	461a      	movcs	r2, r3
 8002e6c:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8002e6e:	310c      	adds	r1, #12
 8002e70:	e01c      	b.n	8002eac <hci_send_req+0x154>
        if (cs->opcode != opcode)
 8002e72:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8002e76:	42ab      	cmp	r3, r5
 8002e78:	d105      	bne.n	8002e86 <hci_send_req+0x12e>
        if (r->event != EVT_CMD_STATUS) {
 8002e7a:	6863      	ldr	r3, [r4, #4]
 8002e7c:	2b0f      	cmp	r3, #15
 8002e7e:	d00f      	beq.n	8002ea0 <hci_send_req+0x148>
          if (cs->status) {
 8002e80:	7acb      	ldrb	r3, [r1, #11]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0cb      	beq.n	8002e1e <hci_send_req+0xc6>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8002e86:	9901      	ldr	r1, [sp, #4]
 8002e88:	b111      	cbz	r1, 8002e90 <hci_send_req+0x138>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002e8a:	4815      	ldr	r0, [pc, #84]	; (8002ee0 <hci_send_req+0x188>)
 8002e8c:	f000 f884 	bl	8002f98 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8002e90:	a802      	add	r0, sp, #8
 8002e92:	f7ff ff13 	bl	8002cbc <move_list.constprop.0>
  return -1;
 8002e96:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 8002e9a:	b025      	add	sp, #148	; 0x94
 8002e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        r->rlen = MIN(len, r->rlen);
 8002ea0:	6963      	ldr	r3, [r4, #20]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	bf28      	it	cs
 8002ea6:	461a      	movcs	r2, r3
 8002ea8:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8002eaa:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8002eac:	6920      	ldr	r0, [r4, #16]
 8002eae:	f000 f8cd 	bl	800304c <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8002eb2:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <hci_send_req+0x188>)
 8002eb4:	9901      	ldr	r1, [sp, #4]
 8002eb6:	f000 f86f 	bl	8002f98 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8002eba:	a802      	add	r0, sp, #8
 8002ebc:	f7ff fefe 	bl	8002cbc <move_list.constprop.0>
    return 0;
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	e7ea      	b.n	8002e9a <hci_send_req+0x142>
        if (cc->opcode != opcode)
 8002ec4:	898a      	ldrh	r2, [r1, #12]
 8002ec6:	42aa      	cmp	r2, r5
 8002ec8:	d1dd      	bne.n	8002e86 <hci_send_req+0x12e>
        len -= EVT_CMD_COMPLETE_SIZE;
 8002eca:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 8002ecc:	6963      	ldr	r3, [r4, #20]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	bf28      	it	cs
 8002ed2:	461a      	movcs	r2, r3
 8002ed4:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8002ed6:	310e      	adds	r1, #14
 8002ed8:	e7e8      	b.n	8002eac <hci_send_req+0x154>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8002eda:	9901      	ldr	r1, [sp, #4]
 8002edc:	a802      	add	r0, sp, #8
 8002ede:	e7aa      	b.n	8002e36 <hci_send_req+0xde>
 8002ee0:	20000548 	.word	0x20000548
 8002ee4:	200001a0 	.word	0x200001a0
 8002ee8:	20000550 	.word	0x20000550

08002eec <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8002eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8002eee:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8002ef0:	4c0b      	ldr	r4, [pc, #44]	; (8002f20 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
    if (hciContext.UserEvtRx != NULL)
 8002ef2:	4d0c      	ldr	r5, [pc, #48]	; (8002f24 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002ef4:	4e0c      	ldr	r6, [pc, #48]	; (8002f28 <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 8002ef6:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f000 f848 	bl	8002f8e <list_is_empty>
 8002efe:	b108      	cbz	r0, 8002f04 <hci_user_evt_proc+0x18>
  }
}
 8002f00:	b002      	add	sp, #8
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8002f04:	a901      	add	r1, sp, #4
 8002f06:	4620      	mov	r0, r4
 8002f08:	f000 f85a 	bl	8002fc0 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8002f0c:	69eb      	ldr	r3, [r5, #28]
 8002f0e:	b113      	cbz	r3, 8002f16 <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8002f10:	9801      	ldr	r0, [sp, #4]
 8002f12:	3008      	adds	r0, #8
 8002f14:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8002f16:	9901      	ldr	r1, [sp, #4]
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f000 f844 	bl	8002fa6 <list_insert_tail>
 8002f1e:	e7eb      	b.n	8002ef8 <hci_user_evt_proc+0xc>
 8002f20:	20000550 	.word	0x20000550
 8002f24:	200001a0 	.word	0x200001a0
 8002f28:	20000548 	.word	0x20000548

08002f2c <hci_notify_asynch_evt>:

void hci_notify_asynch_evt(void* pdata)
{
 8002f2c:	b507      	push	{r0, r1, r2, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8002f2e:	2300      	movs	r3, #0
  uint8_t data_len;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8002f30:	4812      	ldr	r0, [pc, #72]	; (8002f7c <hci_notify_asynch_evt+0x50>)
  tHciDataPacket * hciReadPacket = NULL;
 8002f32:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8002f34:	f000 f82b 	bl	8002f8e <list_is_empty>
 8002f38:	b9c8      	cbnz	r0, 8002f6e <hci_notify_asynch_evt+0x42>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8002f3a:	a901      	add	r1, sp, #4
 8002f3c:	480f      	ldr	r0, [pc, #60]	; (8002f7c <hci_notify_asynch_evt+0x50>)
 8002f3e:	f000 f83f 	bl	8002fc0 <list_remove_head>
    
    if (hciContext.io.Receive)
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <hci_notify_asynch_evt+0x54>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	b193      	cbz	r3, 8002f6e <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8002f48:	9801      	ldr	r0, [sp, #4]
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	3008      	adds	r0, #8
 8002f4e:	4798      	blx	r3
 8002f50:	b2c0      	uxtb	r0, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 8002f52:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 8002f54:	b170      	cbz	r0, 8002f74 <hci_notify_asynch_evt+0x48>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8002f56:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 8002f58:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d109      	bne.n	8002f74 <hci_notify_asynch_evt+0x48>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8002f60:	7a8b      	ldrb	r3, [r1, #10]
 8002f62:	3803      	subs	r0, #3
 8002f64:	4283      	cmp	r3, r0
 8002f66:	d105      	bne.n	8002f74 <hci_notify_asynch_evt+0x48>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8002f68:	4806      	ldr	r0, [pc, #24]	; (8002f84 <hci_notify_asynch_evt+0x58>)
 8002f6a:	f000 f81c 	bl	8002fa6 <list_insert_tail>
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
      }
    }
  }
}
 8002f6e:	b003      	add	sp, #12
 8002f70:	f85d fb04 	ldr.w	pc, [sp], #4
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8002f74:	4801      	ldr	r0, [pc, #4]	; (8002f7c <hci_notify_asynch_evt+0x50>)
 8002f76:	f000 f80f 	bl	8002f98 <list_insert_head>
 8002f7a:	e7f8      	b.n	8002f6e <hci_notify_asynch_evt+0x42>
 8002f7c:	20000548 	.word	0x20000548
 8002f80:	200001a0 	.word	0x200001a0
 8002f84:	20000550 	.word	0x20000550

08002f88 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8002f88:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8002f8a:	6040      	str	r0, [r0, #4]
 8002f8c:	4770      	bx	lr

08002f8e <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
  uint8_t return_value;
   
  if(listHead->next == listHead)
 8002f8e:	6803      	ldr	r3, [r0, #0]
  else
  {
    return_value = 0;
  }
  return return_value;
}
 8002f90:	1a1b      	subs	r3, r3, r0
 8002f92:	4258      	negs	r0, r3
 8002f94:	4158      	adcs	r0, r3
 8002f96:	4770      	bx	lr

08002f98 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
  node->next = listHead->next;
 8002f98:	6803      	ldr	r3, [r0, #0]
 8002f9a:	600b      	str	r3, [r1, #0]
  node->prev = listHead;
 8002f9c:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8002f9e:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8002fa0:	680b      	ldr	r3, [r1, #0]
 8002fa2:	6059      	str	r1, [r3, #4]
 8002fa4:	4770      	bx	lr

08002fa6 <list_insert_tail>:
}

void list_insert_tail (tListNode * listHead, tListNode * node)
{
  node->next = listHead;
  node->prev = listHead->prev;
 8002fa6:	6843      	ldr	r3, [r0, #4]
 8002fa8:	604b      	str	r3, [r1, #4]
  node->next = listHead;
 8002faa:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8002fac:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8002fae:	684b      	ldr	r3, [r1, #4]
 8002fb0:	6019      	str	r1, [r3, #0]
 8002fb2:	4770      	bx	lr

08002fb4 <list_remove_node>:
}

void list_remove_node (tListNode * node)
{
  (node->prev)->next = node->next;
 8002fb4:	e890 000c 	ldmia.w	r0, {r2, r3}
 8002fb8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8002fba:	6802      	ldr	r2, [r0, #0]
 8002fbc:	6053      	str	r3, [r2, #4]
 8002fbe:	4770      	bx	lr

08002fc0 <list_remove_head>:
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8002fc0:	b508      	push	{r3, lr}
  *node = listHead->next;
 8002fc2:	6803      	ldr	r3, [r0, #0]
 8002fc4:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8002fc6:	6800      	ldr	r0, [r0, #0]
 8002fc8:	f7ff fff4 	bl	8002fb4 <list_remove_node>
  (*node)->next = NULL;
 8002fcc:	680a      	ldr	r2, [r1, #0]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8002fd2:	680a      	ldr	r2, [r1, #0]
 8002fd4:	6053      	str	r3, [r2, #4]
 8002fd6:	bd08      	pop	{r3, pc}

08002fd8 <list_remove_tail>:
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8002fd8:	b508      	push	{r3, lr}
  *node = listHead->prev;
 8002fda:	6843      	ldr	r3, [r0, #4]
 8002fdc:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 8002fde:	6840      	ldr	r0, [r0, #4]
 8002fe0:	f7ff ffe8 	bl	8002fb4 <list_remove_node>
  (*node)->next = NULL;
 8002fe4:	680a      	ldr	r2, [r1, #0]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8002fea:	680a      	ldr	r2, [r1, #0]
 8002fec:	6053      	str	r3, [r2, #4]
 8002fee:	bd08      	pop	{r3, pc}

08002ff0 <list_get_size>:
int list_get_size (tListNode * listHead)
{
  int size = 0;
  tListNode * temp;

  temp = listHead->next;
 8002ff0:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 8002ff2:	2300      	movs	r3, #0
  while (temp != listHead)
 8002ff4:	4282      	cmp	r2, r0
 8002ff6:	d101      	bne.n	8002ffc <list_get_size+0xc>
  {
    size++;
    temp = temp->next;		
  }
  return (size);
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	4770      	bx	lr
    size++;
 8002ffc:	3301      	adds	r3, #1
    temp = temp->next;		
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	e7f8      	b.n	8002ff4 <list_get_size+0x4>
	...

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	4e0d      	ldr	r6, [pc, #52]	; (800303c <__libc_init_array+0x38>)
 8003008:	4c0d      	ldr	r4, [pc, #52]	; (8003040 <__libc_init_array+0x3c>)
 800300a:	1ba4      	subs	r4, r4, r6
 800300c:	10a4      	asrs	r4, r4, #2
 800300e:	2500      	movs	r5, #0
 8003010:	42a5      	cmp	r5, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	4e0b      	ldr	r6, [pc, #44]	; (8003044 <__libc_init_array+0x40>)
 8003016:	4c0c      	ldr	r4, [pc, #48]	; (8003048 <__libc_init_array+0x44>)
 8003018:	f001 f810 	bl	800403c <_init>
 800301c:	1ba4      	subs	r4, r4, r6
 800301e:	10a4      	asrs	r4, r4, #2
 8003020:	2500      	movs	r5, #0
 8003022:	42a5      	cmp	r5, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800302c:	4798      	blx	r3
 800302e:	3501      	adds	r5, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003036:	4798      	blx	r3
 8003038:	3501      	adds	r5, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	080042d8 	.word	0x080042d8
 8003040:	080042d8 	.word	0x080042d8
 8003044:	080042d8 	.word	0x080042d8
 8003048:	080042dc 	.word	0x080042dc

0800304c <memcpy>:
 800304c:	b510      	push	{r4, lr}
 800304e:	1e43      	subs	r3, r0, #1
 8003050:	440a      	add	r2, r1
 8003052:	4291      	cmp	r1, r2
 8003054:	d100      	bne.n	8003058 <memcpy+0xc>
 8003056:	bd10      	pop	{r4, pc}
 8003058:	f811 4b01 	ldrb.w	r4, [r1], #1
 800305c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003060:	e7f7      	b.n	8003052 <memcpy+0x6>

08003062 <memset>:
 8003062:	4402      	add	r2, r0
 8003064:	4603      	mov	r3, r0
 8003066:	4293      	cmp	r3, r2
 8003068:	d100      	bne.n	800306c <memset+0xa>
 800306a:	4770      	bx	lr
 800306c:	f803 1b01 	strb.w	r1, [r3], #1
 8003070:	e7f9      	b.n	8003066 <memset+0x4>
	...

08003074 <iprintf>:
 8003074:	b40f      	push	{r0, r1, r2, r3}
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <iprintf+0x2c>)
 8003078:	b513      	push	{r0, r1, r4, lr}
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	b124      	cbz	r4, 8003088 <iprintf+0x14>
 800307e:	69a3      	ldr	r3, [r4, #24]
 8003080:	b913      	cbnz	r3, 8003088 <iprintf+0x14>
 8003082:	4620      	mov	r0, r4
 8003084:	f000 fa38 	bl	80034f8 <__sinit>
 8003088:	ab05      	add	r3, sp, #20
 800308a:	9a04      	ldr	r2, [sp, #16]
 800308c:	68a1      	ldr	r1, [r4, #8]
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	4620      	mov	r0, r4
 8003092:	f000 fbf5 	bl	8003880 <_vfiprintf_r>
 8003096:	b002      	add	sp, #8
 8003098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800309c:	b004      	add	sp, #16
 800309e:	4770      	bx	lr
 80030a0:	20000010 	.word	0x20000010

080030a4 <putchar>:
 80030a4:	b538      	push	{r3, r4, r5, lr}
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <putchar+0x24>)
 80030a8:	681c      	ldr	r4, [r3, #0]
 80030aa:	4605      	mov	r5, r0
 80030ac:	b124      	cbz	r4, 80030b8 <putchar+0x14>
 80030ae:	69a3      	ldr	r3, [r4, #24]
 80030b0:	b913      	cbnz	r3, 80030b8 <putchar+0x14>
 80030b2:	4620      	mov	r0, r4
 80030b4:	f000 fa20 	bl	80034f8 <__sinit>
 80030b8:	68a2      	ldr	r2, [r4, #8]
 80030ba:	4629      	mov	r1, r5
 80030bc:	4620      	mov	r0, r4
 80030be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030c2:	f000 be89 	b.w	8003dd8 <_putc_r>
 80030c6:	bf00      	nop
 80030c8:	20000010 	.word	0x20000010

080030cc <_puts_r>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	460e      	mov	r6, r1
 80030d0:	4605      	mov	r5, r0
 80030d2:	b118      	cbz	r0, 80030dc <_puts_r+0x10>
 80030d4:	6983      	ldr	r3, [r0, #24]
 80030d6:	b90b      	cbnz	r3, 80030dc <_puts_r+0x10>
 80030d8:	f000 fa0e 	bl	80034f8 <__sinit>
 80030dc:	69ab      	ldr	r3, [r5, #24]
 80030de:	68ac      	ldr	r4, [r5, #8]
 80030e0:	b913      	cbnz	r3, 80030e8 <_puts_r+0x1c>
 80030e2:	4628      	mov	r0, r5
 80030e4:	f000 fa08 	bl	80034f8 <__sinit>
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <_puts_r+0xac>)
 80030ea:	429c      	cmp	r4, r3
 80030ec:	d117      	bne.n	800311e <_puts_r+0x52>
 80030ee:	686c      	ldr	r4, [r5, #4]
 80030f0:	89a3      	ldrh	r3, [r4, #12]
 80030f2:	071b      	lsls	r3, r3, #28
 80030f4:	d51d      	bpl.n	8003132 <_puts_r+0x66>
 80030f6:	6923      	ldr	r3, [r4, #16]
 80030f8:	b1db      	cbz	r3, 8003132 <_puts_r+0x66>
 80030fa:	3e01      	subs	r6, #1
 80030fc:	68a3      	ldr	r3, [r4, #8]
 80030fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003102:	3b01      	subs	r3, #1
 8003104:	60a3      	str	r3, [r4, #8]
 8003106:	b9e9      	cbnz	r1, 8003144 <_puts_r+0x78>
 8003108:	2b00      	cmp	r3, #0
 800310a:	da2e      	bge.n	800316a <_puts_r+0x9e>
 800310c:	4622      	mov	r2, r4
 800310e:	210a      	movs	r1, #10
 8003110:	4628      	mov	r0, r5
 8003112:	f000 f83f 	bl	8003194 <__swbuf_r>
 8003116:	3001      	adds	r0, #1
 8003118:	d011      	beq.n	800313e <_puts_r+0x72>
 800311a:	200a      	movs	r0, #10
 800311c:	bd70      	pop	{r4, r5, r6, pc}
 800311e:	4b17      	ldr	r3, [pc, #92]	; (800317c <_puts_r+0xb0>)
 8003120:	429c      	cmp	r4, r3
 8003122:	d101      	bne.n	8003128 <_puts_r+0x5c>
 8003124:	68ac      	ldr	r4, [r5, #8]
 8003126:	e7e3      	b.n	80030f0 <_puts_r+0x24>
 8003128:	4b15      	ldr	r3, [pc, #84]	; (8003180 <_puts_r+0xb4>)
 800312a:	429c      	cmp	r4, r3
 800312c:	bf08      	it	eq
 800312e:	68ec      	ldreq	r4, [r5, #12]
 8003130:	e7de      	b.n	80030f0 <_puts_r+0x24>
 8003132:	4621      	mov	r1, r4
 8003134:	4628      	mov	r0, r5
 8003136:	f000 f87f 	bl	8003238 <__swsetup_r>
 800313a:	2800      	cmp	r0, #0
 800313c:	d0dd      	beq.n	80030fa <_puts_r+0x2e>
 800313e:	f04f 30ff 	mov.w	r0, #4294967295
 8003142:	bd70      	pop	{r4, r5, r6, pc}
 8003144:	2b00      	cmp	r3, #0
 8003146:	da04      	bge.n	8003152 <_puts_r+0x86>
 8003148:	69a2      	ldr	r2, [r4, #24]
 800314a:	4293      	cmp	r3, r2
 800314c:	db06      	blt.n	800315c <_puts_r+0x90>
 800314e:	290a      	cmp	r1, #10
 8003150:	d004      	beq.n	800315c <_puts_r+0x90>
 8003152:	6823      	ldr	r3, [r4, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	6022      	str	r2, [r4, #0]
 8003158:	7019      	strb	r1, [r3, #0]
 800315a:	e7cf      	b.n	80030fc <_puts_r+0x30>
 800315c:	4622      	mov	r2, r4
 800315e:	4628      	mov	r0, r5
 8003160:	f000 f818 	bl	8003194 <__swbuf_r>
 8003164:	3001      	adds	r0, #1
 8003166:	d1c9      	bne.n	80030fc <_puts_r+0x30>
 8003168:	e7e9      	b.n	800313e <_puts_r+0x72>
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	200a      	movs	r0, #10
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	6022      	str	r2, [r4, #0]
 8003172:	7018      	strb	r0, [r3, #0]
 8003174:	bd70      	pop	{r4, r5, r6, pc}
 8003176:	bf00      	nop
 8003178:	08004258 	.word	0x08004258
 800317c:	08004278 	.word	0x08004278
 8003180:	08004238 	.word	0x08004238

08003184 <puts>:
 8003184:	4b02      	ldr	r3, [pc, #8]	; (8003190 <puts+0xc>)
 8003186:	4601      	mov	r1, r0
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	f7ff bf9f 	b.w	80030cc <_puts_r>
 800318e:	bf00      	nop
 8003190:	20000010 	.word	0x20000010

08003194 <__swbuf_r>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	460e      	mov	r6, r1
 8003198:	4614      	mov	r4, r2
 800319a:	4605      	mov	r5, r0
 800319c:	b118      	cbz	r0, 80031a6 <__swbuf_r+0x12>
 800319e:	6983      	ldr	r3, [r0, #24]
 80031a0:	b90b      	cbnz	r3, 80031a6 <__swbuf_r+0x12>
 80031a2:	f000 f9a9 	bl	80034f8 <__sinit>
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <__swbuf_r+0x98>)
 80031a8:	429c      	cmp	r4, r3
 80031aa:	d12a      	bne.n	8003202 <__swbuf_r+0x6e>
 80031ac:	686c      	ldr	r4, [r5, #4]
 80031ae:	69a3      	ldr	r3, [r4, #24]
 80031b0:	60a3      	str	r3, [r4, #8]
 80031b2:	89a3      	ldrh	r3, [r4, #12]
 80031b4:	071a      	lsls	r2, r3, #28
 80031b6:	d52e      	bpl.n	8003216 <__swbuf_r+0x82>
 80031b8:	6923      	ldr	r3, [r4, #16]
 80031ba:	b363      	cbz	r3, 8003216 <__swbuf_r+0x82>
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	6820      	ldr	r0, [r4, #0]
 80031c0:	1ac0      	subs	r0, r0, r3
 80031c2:	6963      	ldr	r3, [r4, #20]
 80031c4:	b2f6      	uxtb	r6, r6
 80031c6:	4298      	cmp	r0, r3
 80031c8:	4637      	mov	r7, r6
 80031ca:	db04      	blt.n	80031d6 <__swbuf_r+0x42>
 80031cc:	4621      	mov	r1, r4
 80031ce:	4628      	mov	r0, r5
 80031d0:	f000 f928 	bl	8003424 <_fflush_r>
 80031d4:	bb28      	cbnz	r0, 8003222 <__swbuf_r+0x8e>
 80031d6:	68a3      	ldr	r3, [r4, #8]
 80031d8:	3b01      	subs	r3, #1
 80031da:	60a3      	str	r3, [r4, #8]
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	6022      	str	r2, [r4, #0]
 80031e2:	701e      	strb	r6, [r3, #0]
 80031e4:	6963      	ldr	r3, [r4, #20]
 80031e6:	3001      	adds	r0, #1
 80031e8:	4298      	cmp	r0, r3
 80031ea:	d004      	beq.n	80031f6 <__swbuf_r+0x62>
 80031ec:	89a3      	ldrh	r3, [r4, #12]
 80031ee:	07db      	lsls	r3, r3, #31
 80031f0:	d519      	bpl.n	8003226 <__swbuf_r+0x92>
 80031f2:	2e0a      	cmp	r6, #10
 80031f4:	d117      	bne.n	8003226 <__swbuf_r+0x92>
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 f913 	bl	8003424 <_fflush_r>
 80031fe:	b190      	cbz	r0, 8003226 <__swbuf_r+0x92>
 8003200:	e00f      	b.n	8003222 <__swbuf_r+0x8e>
 8003202:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <__swbuf_r+0x9c>)
 8003204:	429c      	cmp	r4, r3
 8003206:	d101      	bne.n	800320c <__swbuf_r+0x78>
 8003208:	68ac      	ldr	r4, [r5, #8]
 800320a:	e7d0      	b.n	80031ae <__swbuf_r+0x1a>
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <__swbuf_r+0xa0>)
 800320e:	429c      	cmp	r4, r3
 8003210:	bf08      	it	eq
 8003212:	68ec      	ldreq	r4, [r5, #12]
 8003214:	e7cb      	b.n	80031ae <__swbuf_r+0x1a>
 8003216:	4621      	mov	r1, r4
 8003218:	4628      	mov	r0, r5
 800321a:	f000 f80d 	bl	8003238 <__swsetup_r>
 800321e:	2800      	cmp	r0, #0
 8003220:	d0cc      	beq.n	80031bc <__swbuf_r+0x28>
 8003222:	f04f 37ff 	mov.w	r7, #4294967295
 8003226:	4638      	mov	r0, r7
 8003228:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800322a:	bf00      	nop
 800322c:	08004258 	.word	0x08004258
 8003230:	08004278 	.word	0x08004278
 8003234:	08004238 	.word	0x08004238

08003238 <__swsetup_r>:
 8003238:	4b32      	ldr	r3, [pc, #200]	; (8003304 <__swsetup_r+0xcc>)
 800323a:	b570      	push	{r4, r5, r6, lr}
 800323c:	681d      	ldr	r5, [r3, #0]
 800323e:	4606      	mov	r6, r0
 8003240:	460c      	mov	r4, r1
 8003242:	b125      	cbz	r5, 800324e <__swsetup_r+0x16>
 8003244:	69ab      	ldr	r3, [r5, #24]
 8003246:	b913      	cbnz	r3, 800324e <__swsetup_r+0x16>
 8003248:	4628      	mov	r0, r5
 800324a:	f000 f955 	bl	80034f8 <__sinit>
 800324e:	4b2e      	ldr	r3, [pc, #184]	; (8003308 <__swsetup_r+0xd0>)
 8003250:	429c      	cmp	r4, r3
 8003252:	d10f      	bne.n	8003274 <__swsetup_r+0x3c>
 8003254:	686c      	ldr	r4, [r5, #4]
 8003256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800325a:	b29a      	uxth	r2, r3
 800325c:	0715      	lsls	r5, r2, #28
 800325e:	d42c      	bmi.n	80032ba <__swsetup_r+0x82>
 8003260:	06d0      	lsls	r0, r2, #27
 8003262:	d411      	bmi.n	8003288 <__swsetup_r+0x50>
 8003264:	2209      	movs	r2, #9
 8003266:	6032      	str	r2, [r6, #0]
 8003268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800326c:	81a3      	strh	r3, [r4, #12]
 800326e:	f04f 30ff 	mov.w	r0, #4294967295
 8003272:	bd70      	pop	{r4, r5, r6, pc}
 8003274:	4b25      	ldr	r3, [pc, #148]	; (800330c <__swsetup_r+0xd4>)
 8003276:	429c      	cmp	r4, r3
 8003278:	d101      	bne.n	800327e <__swsetup_r+0x46>
 800327a:	68ac      	ldr	r4, [r5, #8]
 800327c:	e7eb      	b.n	8003256 <__swsetup_r+0x1e>
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <__swsetup_r+0xd8>)
 8003280:	429c      	cmp	r4, r3
 8003282:	bf08      	it	eq
 8003284:	68ec      	ldreq	r4, [r5, #12]
 8003286:	e7e6      	b.n	8003256 <__swsetup_r+0x1e>
 8003288:	0751      	lsls	r1, r2, #29
 800328a:	d512      	bpl.n	80032b2 <__swsetup_r+0x7a>
 800328c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800328e:	b141      	cbz	r1, 80032a2 <__swsetup_r+0x6a>
 8003290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003294:	4299      	cmp	r1, r3
 8003296:	d002      	beq.n	800329e <__swsetup_r+0x66>
 8003298:	4630      	mov	r0, r6
 800329a:	f000 fa1b 	bl	80036d4 <_free_r>
 800329e:	2300      	movs	r3, #0
 80032a0:	6363      	str	r3, [r4, #52]	; 0x34
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	2300      	movs	r3, #0
 80032ac:	6063      	str	r3, [r4, #4]
 80032ae:	6923      	ldr	r3, [r4, #16]
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	f043 0308 	orr.w	r3, r3, #8
 80032b8:	81a3      	strh	r3, [r4, #12]
 80032ba:	6923      	ldr	r3, [r4, #16]
 80032bc:	b94b      	cbnz	r3, 80032d2 <__swsetup_r+0x9a>
 80032be:	89a3      	ldrh	r3, [r4, #12]
 80032c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c8:	d003      	beq.n	80032d2 <__swsetup_r+0x9a>
 80032ca:	4621      	mov	r1, r4
 80032cc:	4630      	mov	r0, r6
 80032ce:	f000 f9c1 	bl	8003654 <__smakebuf_r>
 80032d2:	89a2      	ldrh	r2, [r4, #12]
 80032d4:	f012 0301 	ands.w	r3, r2, #1
 80032d8:	d00c      	beq.n	80032f4 <__swsetup_r+0xbc>
 80032da:	2300      	movs	r3, #0
 80032dc:	60a3      	str	r3, [r4, #8]
 80032de:	6963      	ldr	r3, [r4, #20]
 80032e0:	425b      	negs	r3, r3
 80032e2:	61a3      	str	r3, [r4, #24]
 80032e4:	6923      	ldr	r3, [r4, #16]
 80032e6:	b953      	cbnz	r3, 80032fe <__swsetup_r+0xc6>
 80032e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80032f0:	d1ba      	bne.n	8003268 <__swsetup_r+0x30>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	0792      	lsls	r2, r2, #30
 80032f6:	bf58      	it	pl
 80032f8:	6963      	ldrpl	r3, [r4, #20]
 80032fa:	60a3      	str	r3, [r4, #8]
 80032fc:	e7f2      	b.n	80032e4 <__swsetup_r+0xac>
 80032fe:	2000      	movs	r0, #0
 8003300:	e7f7      	b.n	80032f2 <__swsetup_r+0xba>
 8003302:	bf00      	nop
 8003304:	20000010 	.word	0x20000010
 8003308:	08004258 	.word	0x08004258
 800330c:	08004278 	.word	0x08004278
 8003310:	08004238 	.word	0x08004238

08003314 <__sflush_r>:
 8003314:	898a      	ldrh	r2, [r1, #12]
 8003316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800331a:	4605      	mov	r5, r0
 800331c:	0710      	lsls	r0, r2, #28
 800331e:	460c      	mov	r4, r1
 8003320:	d45a      	bmi.n	80033d8 <__sflush_r+0xc4>
 8003322:	684b      	ldr	r3, [r1, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	dc05      	bgt.n	8003334 <__sflush_r+0x20>
 8003328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	dc02      	bgt.n	8003334 <__sflush_r+0x20>
 800332e:	2000      	movs	r0, #0
 8003330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003336:	2e00      	cmp	r6, #0
 8003338:	d0f9      	beq.n	800332e <__sflush_r+0x1a>
 800333a:	2300      	movs	r3, #0
 800333c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003340:	682f      	ldr	r7, [r5, #0]
 8003342:	602b      	str	r3, [r5, #0]
 8003344:	d033      	beq.n	80033ae <__sflush_r+0x9a>
 8003346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003348:	89a3      	ldrh	r3, [r4, #12]
 800334a:	075a      	lsls	r2, r3, #29
 800334c:	d505      	bpl.n	800335a <__sflush_r+0x46>
 800334e:	6863      	ldr	r3, [r4, #4]
 8003350:	1ac0      	subs	r0, r0, r3
 8003352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003354:	b10b      	cbz	r3, 800335a <__sflush_r+0x46>
 8003356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003358:	1ac0      	subs	r0, r0, r3
 800335a:	2300      	movs	r3, #0
 800335c:	4602      	mov	r2, r0
 800335e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003360:	6a21      	ldr	r1, [r4, #32]
 8003362:	4628      	mov	r0, r5
 8003364:	47b0      	blx	r6
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	89a3      	ldrh	r3, [r4, #12]
 800336a:	d106      	bne.n	800337a <__sflush_r+0x66>
 800336c:	6829      	ldr	r1, [r5, #0]
 800336e:	291d      	cmp	r1, #29
 8003370:	d84b      	bhi.n	800340a <__sflush_r+0xf6>
 8003372:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <__sflush_r+0x10c>)
 8003374:	40ca      	lsrs	r2, r1
 8003376:	07d6      	lsls	r6, r2, #31
 8003378:	d547      	bpl.n	800340a <__sflush_r+0xf6>
 800337a:	2200      	movs	r2, #0
 800337c:	6062      	str	r2, [r4, #4]
 800337e:	04d9      	lsls	r1, r3, #19
 8003380:	6922      	ldr	r2, [r4, #16]
 8003382:	6022      	str	r2, [r4, #0]
 8003384:	d504      	bpl.n	8003390 <__sflush_r+0x7c>
 8003386:	1c42      	adds	r2, r0, #1
 8003388:	d101      	bne.n	800338e <__sflush_r+0x7a>
 800338a:	682b      	ldr	r3, [r5, #0]
 800338c:	b903      	cbnz	r3, 8003390 <__sflush_r+0x7c>
 800338e:	6560      	str	r0, [r4, #84]	; 0x54
 8003390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003392:	602f      	str	r7, [r5, #0]
 8003394:	2900      	cmp	r1, #0
 8003396:	d0ca      	beq.n	800332e <__sflush_r+0x1a>
 8003398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800339c:	4299      	cmp	r1, r3
 800339e:	d002      	beq.n	80033a6 <__sflush_r+0x92>
 80033a0:	4628      	mov	r0, r5
 80033a2:	f000 f997 	bl	80036d4 <_free_r>
 80033a6:	2000      	movs	r0, #0
 80033a8:	6360      	str	r0, [r4, #52]	; 0x34
 80033aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033ae:	6a21      	ldr	r1, [r4, #32]
 80033b0:	2301      	movs	r3, #1
 80033b2:	4628      	mov	r0, r5
 80033b4:	47b0      	blx	r6
 80033b6:	1c41      	adds	r1, r0, #1
 80033b8:	d1c6      	bne.n	8003348 <__sflush_r+0x34>
 80033ba:	682b      	ldr	r3, [r5, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0c3      	beq.n	8003348 <__sflush_r+0x34>
 80033c0:	2b1d      	cmp	r3, #29
 80033c2:	d001      	beq.n	80033c8 <__sflush_r+0xb4>
 80033c4:	2b16      	cmp	r3, #22
 80033c6:	d101      	bne.n	80033cc <__sflush_r+0xb8>
 80033c8:	602f      	str	r7, [r5, #0]
 80033ca:	e7b0      	b.n	800332e <__sflush_r+0x1a>
 80033cc:	89a3      	ldrh	r3, [r4, #12]
 80033ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d2:	81a3      	strh	r3, [r4, #12]
 80033d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033d8:	690f      	ldr	r7, [r1, #16]
 80033da:	2f00      	cmp	r7, #0
 80033dc:	d0a7      	beq.n	800332e <__sflush_r+0x1a>
 80033de:	0793      	lsls	r3, r2, #30
 80033e0:	680e      	ldr	r6, [r1, #0]
 80033e2:	bf08      	it	eq
 80033e4:	694b      	ldreq	r3, [r1, #20]
 80033e6:	600f      	str	r7, [r1, #0]
 80033e8:	bf18      	it	ne
 80033ea:	2300      	movne	r3, #0
 80033ec:	eba6 0807 	sub.w	r8, r6, r7
 80033f0:	608b      	str	r3, [r1, #8]
 80033f2:	f1b8 0f00 	cmp.w	r8, #0
 80033f6:	dd9a      	ble.n	800332e <__sflush_r+0x1a>
 80033f8:	4643      	mov	r3, r8
 80033fa:	463a      	mov	r2, r7
 80033fc:	6a21      	ldr	r1, [r4, #32]
 80033fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003400:	4628      	mov	r0, r5
 8003402:	47b0      	blx	r6
 8003404:	2800      	cmp	r0, #0
 8003406:	dc07      	bgt.n	8003418 <__sflush_r+0x104>
 8003408:	89a3      	ldrh	r3, [r4, #12]
 800340a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	f04f 30ff 	mov.w	r0, #4294967295
 8003414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003418:	4407      	add	r7, r0
 800341a:	eba8 0800 	sub.w	r8, r8, r0
 800341e:	e7e8      	b.n	80033f2 <__sflush_r+0xde>
 8003420:	20400001 	.word	0x20400001

08003424 <_fflush_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	690b      	ldr	r3, [r1, #16]
 8003428:	4605      	mov	r5, r0
 800342a:	460c      	mov	r4, r1
 800342c:	b1db      	cbz	r3, 8003466 <_fflush_r+0x42>
 800342e:	b118      	cbz	r0, 8003438 <_fflush_r+0x14>
 8003430:	6983      	ldr	r3, [r0, #24]
 8003432:	b90b      	cbnz	r3, 8003438 <_fflush_r+0x14>
 8003434:	f000 f860 	bl	80034f8 <__sinit>
 8003438:	4b0c      	ldr	r3, [pc, #48]	; (800346c <_fflush_r+0x48>)
 800343a:	429c      	cmp	r4, r3
 800343c:	d109      	bne.n	8003452 <_fflush_r+0x2e>
 800343e:	686c      	ldr	r4, [r5, #4]
 8003440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003444:	b17b      	cbz	r3, 8003466 <_fflush_r+0x42>
 8003446:	4621      	mov	r1, r4
 8003448:	4628      	mov	r0, r5
 800344a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800344e:	f7ff bf61 	b.w	8003314 <__sflush_r>
 8003452:	4b07      	ldr	r3, [pc, #28]	; (8003470 <_fflush_r+0x4c>)
 8003454:	429c      	cmp	r4, r3
 8003456:	d101      	bne.n	800345c <_fflush_r+0x38>
 8003458:	68ac      	ldr	r4, [r5, #8]
 800345a:	e7f1      	b.n	8003440 <_fflush_r+0x1c>
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <_fflush_r+0x50>)
 800345e:	429c      	cmp	r4, r3
 8003460:	bf08      	it	eq
 8003462:	68ec      	ldreq	r4, [r5, #12]
 8003464:	e7ec      	b.n	8003440 <_fflush_r+0x1c>
 8003466:	2000      	movs	r0, #0
 8003468:	bd38      	pop	{r3, r4, r5, pc}
 800346a:	bf00      	nop
 800346c:	08004258 	.word	0x08004258
 8003470:	08004278 	.word	0x08004278
 8003474:	08004238 	.word	0x08004238

08003478 <_cleanup_r>:
 8003478:	4901      	ldr	r1, [pc, #4]	; (8003480 <_cleanup_r+0x8>)
 800347a:	f000 b8a9 	b.w	80035d0 <_fwalk_reent>
 800347e:	bf00      	nop
 8003480:	08003425 	.word	0x08003425

08003484 <std.isra.0>:
 8003484:	2300      	movs	r3, #0
 8003486:	b510      	push	{r4, lr}
 8003488:	4604      	mov	r4, r0
 800348a:	6003      	str	r3, [r0, #0]
 800348c:	6043      	str	r3, [r0, #4]
 800348e:	6083      	str	r3, [r0, #8]
 8003490:	8181      	strh	r1, [r0, #12]
 8003492:	6643      	str	r3, [r0, #100]	; 0x64
 8003494:	81c2      	strh	r2, [r0, #14]
 8003496:	6103      	str	r3, [r0, #16]
 8003498:	6143      	str	r3, [r0, #20]
 800349a:	6183      	str	r3, [r0, #24]
 800349c:	4619      	mov	r1, r3
 800349e:	2208      	movs	r2, #8
 80034a0:	305c      	adds	r0, #92	; 0x5c
 80034a2:	f7ff fdde 	bl	8003062 <memset>
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <std.isra.0+0x38>)
 80034a8:	6263      	str	r3, [r4, #36]	; 0x24
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <std.isra.0+0x3c>)
 80034ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ae:	4b05      	ldr	r3, [pc, #20]	; (80034c4 <std.isra.0+0x40>)
 80034b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <std.isra.0+0x44>)
 80034b4:	6224      	str	r4, [r4, #32]
 80034b6:	6323      	str	r3, [r4, #48]	; 0x30
 80034b8:	bd10      	pop	{r4, pc}
 80034ba:	bf00      	nop
 80034bc:	08003e65 	.word	0x08003e65
 80034c0:	08003e87 	.word	0x08003e87
 80034c4:	08003ebf 	.word	0x08003ebf
 80034c8:	08003ee3 	.word	0x08003ee3

080034cc <__sfmoreglue>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	1e4a      	subs	r2, r1, #1
 80034d0:	2568      	movs	r5, #104	; 0x68
 80034d2:	4355      	muls	r5, r2
 80034d4:	460e      	mov	r6, r1
 80034d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034da:	f000 f949 	bl	8003770 <_malloc_r>
 80034de:	4604      	mov	r4, r0
 80034e0:	b140      	cbz	r0, 80034f4 <__sfmoreglue+0x28>
 80034e2:	2100      	movs	r1, #0
 80034e4:	e880 0042 	stmia.w	r0, {r1, r6}
 80034e8:	300c      	adds	r0, #12
 80034ea:	60a0      	str	r0, [r4, #8]
 80034ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80034f0:	f7ff fdb7 	bl	8003062 <memset>
 80034f4:	4620      	mov	r0, r4
 80034f6:	bd70      	pop	{r4, r5, r6, pc}

080034f8 <__sinit>:
 80034f8:	6983      	ldr	r3, [r0, #24]
 80034fa:	b510      	push	{r4, lr}
 80034fc:	4604      	mov	r4, r0
 80034fe:	bb33      	cbnz	r3, 800354e <__sinit+0x56>
 8003500:	6483      	str	r3, [r0, #72]	; 0x48
 8003502:	64c3      	str	r3, [r0, #76]	; 0x4c
 8003504:	6503      	str	r3, [r0, #80]	; 0x50
 8003506:	4b12      	ldr	r3, [pc, #72]	; (8003550 <__sinit+0x58>)
 8003508:	4a12      	ldr	r2, [pc, #72]	; (8003554 <__sinit+0x5c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6282      	str	r2, [r0, #40]	; 0x28
 800350e:	4298      	cmp	r0, r3
 8003510:	bf04      	itt	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	6183      	streq	r3, [r0, #24]
 8003516:	f000 f81f 	bl	8003558 <__sfp>
 800351a:	6060      	str	r0, [r4, #4]
 800351c:	4620      	mov	r0, r4
 800351e:	f000 f81b 	bl	8003558 <__sfp>
 8003522:	60a0      	str	r0, [r4, #8]
 8003524:	4620      	mov	r0, r4
 8003526:	f000 f817 	bl	8003558 <__sfp>
 800352a:	2200      	movs	r2, #0
 800352c:	60e0      	str	r0, [r4, #12]
 800352e:	2104      	movs	r1, #4
 8003530:	6860      	ldr	r0, [r4, #4]
 8003532:	f7ff ffa7 	bl	8003484 <std.isra.0>
 8003536:	2201      	movs	r2, #1
 8003538:	2109      	movs	r1, #9
 800353a:	68a0      	ldr	r0, [r4, #8]
 800353c:	f7ff ffa2 	bl	8003484 <std.isra.0>
 8003540:	2202      	movs	r2, #2
 8003542:	2112      	movs	r1, #18
 8003544:	68e0      	ldr	r0, [r4, #12]
 8003546:	f7ff ff9d 	bl	8003484 <std.isra.0>
 800354a:	2301      	movs	r3, #1
 800354c:	61a3      	str	r3, [r4, #24]
 800354e:	bd10      	pop	{r4, pc}
 8003550:	08004298 	.word	0x08004298
 8003554:	08003479 	.word	0x08003479

08003558 <__sfp>:
 8003558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355a:	4b1c      	ldr	r3, [pc, #112]	; (80035cc <__sfp+0x74>)
 800355c:	681e      	ldr	r6, [r3, #0]
 800355e:	69b3      	ldr	r3, [r6, #24]
 8003560:	4607      	mov	r7, r0
 8003562:	b913      	cbnz	r3, 800356a <__sfp+0x12>
 8003564:	4630      	mov	r0, r6
 8003566:	f7ff ffc7 	bl	80034f8 <__sinit>
 800356a:	3648      	adds	r6, #72	; 0x48
 800356c:	68b4      	ldr	r4, [r6, #8]
 800356e:	6873      	ldr	r3, [r6, #4]
 8003570:	3b01      	subs	r3, #1
 8003572:	d503      	bpl.n	800357c <__sfp+0x24>
 8003574:	6833      	ldr	r3, [r6, #0]
 8003576:	b133      	cbz	r3, 8003586 <__sfp+0x2e>
 8003578:	6836      	ldr	r6, [r6, #0]
 800357a:	e7f7      	b.n	800356c <__sfp+0x14>
 800357c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003580:	b16d      	cbz	r5, 800359e <__sfp+0x46>
 8003582:	3468      	adds	r4, #104	; 0x68
 8003584:	e7f4      	b.n	8003570 <__sfp+0x18>
 8003586:	2104      	movs	r1, #4
 8003588:	4638      	mov	r0, r7
 800358a:	f7ff ff9f 	bl	80034cc <__sfmoreglue>
 800358e:	6030      	str	r0, [r6, #0]
 8003590:	2800      	cmp	r0, #0
 8003592:	d1f1      	bne.n	8003578 <__sfp+0x20>
 8003594:	230c      	movs	r3, #12
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4604      	mov	r4, r0
 800359a:	4620      	mov	r0, r4
 800359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800359e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035a2:	81e3      	strh	r3, [r4, #14]
 80035a4:	2301      	movs	r3, #1
 80035a6:	81a3      	strh	r3, [r4, #12]
 80035a8:	6665      	str	r5, [r4, #100]	; 0x64
 80035aa:	6025      	str	r5, [r4, #0]
 80035ac:	60a5      	str	r5, [r4, #8]
 80035ae:	6065      	str	r5, [r4, #4]
 80035b0:	6125      	str	r5, [r4, #16]
 80035b2:	6165      	str	r5, [r4, #20]
 80035b4:	61a5      	str	r5, [r4, #24]
 80035b6:	2208      	movs	r2, #8
 80035b8:	4629      	mov	r1, r5
 80035ba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035be:	f7ff fd50 	bl	8003062 <memset>
 80035c2:	6365      	str	r5, [r4, #52]	; 0x34
 80035c4:	63a5      	str	r5, [r4, #56]	; 0x38
 80035c6:	64a5      	str	r5, [r4, #72]	; 0x48
 80035c8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80035ca:	e7e6      	b.n	800359a <__sfp+0x42>
 80035cc:	08004298 	.word	0x08004298

080035d0 <_fwalk_reent>:
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	4680      	mov	r8, r0
 80035d6:	4689      	mov	r9, r1
 80035d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035dc:	2600      	movs	r6, #0
 80035de:	b914      	cbnz	r4, 80035e6 <_fwalk_reent+0x16>
 80035e0:	4630      	mov	r0, r6
 80035e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035e6:	68a5      	ldr	r5, [r4, #8]
 80035e8:	6867      	ldr	r7, [r4, #4]
 80035ea:	3f01      	subs	r7, #1
 80035ec:	d501      	bpl.n	80035f2 <_fwalk_reent+0x22>
 80035ee:	6824      	ldr	r4, [r4, #0]
 80035f0:	e7f5      	b.n	80035de <_fwalk_reent+0xe>
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d907      	bls.n	8003608 <_fwalk_reent+0x38>
 80035f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80035fc:	3301      	adds	r3, #1
 80035fe:	d003      	beq.n	8003608 <_fwalk_reent+0x38>
 8003600:	4629      	mov	r1, r5
 8003602:	4640      	mov	r0, r8
 8003604:	47c8      	blx	r9
 8003606:	4306      	orrs	r6, r0
 8003608:	3568      	adds	r5, #104	; 0x68
 800360a:	e7ee      	b.n	80035ea <_fwalk_reent+0x1a>

0800360c <__swhatbuf_r>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	460e      	mov	r6, r1
 8003610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003614:	2900      	cmp	r1, #0
 8003616:	b090      	sub	sp, #64	; 0x40
 8003618:	4614      	mov	r4, r2
 800361a:	461d      	mov	r5, r3
 800361c:	da07      	bge.n	800362e <__swhatbuf_r+0x22>
 800361e:	2300      	movs	r3, #0
 8003620:	602b      	str	r3, [r5, #0]
 8003622:	89b3      	ldrh	r3, [r6, #12]
 8003624:	061a      	lsls	r2, r3, #24
 8003626:	d410      	bmi.n	800364a <__swhatbuf_r+0x3e>
 8003628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800362c:	e00e      	b.n	800364c <__swhatbuf_r+0x40>
 800362e:	aa01      	add	r2, sp, #4
 8003630:	f000 fc7e 	bl	8003f30 <_fstat_r>
 8003634:	2800      	cmp	r0, #0
 8003636:	dbf2      	blt.n	800361e <__swhatbuf_r+0x12>
 8003638:	9a02      	ldr	r2, [sp, #8]
 800363a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800363e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003642:	425a      	negs	r2, r3
 8003644:	415a      	adcs	r2, r3
 8003646:	602a      	str	r2, [r5, #0]
 8003648:	e7ee      	b.n	8003628 <__swhatbuf_r+0x1c>
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	2000      	movs	r0, #0
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	b010      	add	sp, #64	; 0x40
 8003652:	bd70      	pop	{r4, r5, r6, pc}

08003654 <__smakebuf_r>:
 8003654:	898b      	ldrh	r3, [r1, #12]
 8003656:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003658:	079d      	lsls	r5, r3, #30
 800365a:	4606      	mov	r6, r0
 800365c:	460c      	mov	r4, r1
 800365e:	d507      	bpl.n	8003670 <__smakebuf_r+0x1c>
 8003660:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003664:	6023      	str	r3, [r4, #0]
 8003666:	6123      	str	r3, [r4, #16]
 8003668:	2301      	movs	r3, #1
 800366a:	6163      	str	r3, [r4, #20]
 800366c:	b002      	add	sp, #8
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	ab01      	add	r3, sp, #4
 8003672:	466a      	mov	r2, sp
 8003674:	f7ff ffca 	bl	800360c <__swhatbuf_r>
 8003678:	9900      	ldr	r1, [sp, #0]
 800367a:	4605      	mov	r5, r0
 800367c:	4630      	mov	r0, r6
 800367e:	f000 f877 	bl	8003770 <_malloc_r>
 8003682:	b948      	cbnz	r0, 8003698 <__smakebuf_r+0x44>
 8003684:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003688:	059a      	lsls	r2, r3, #22
 800368a:	d4ef      	bmi.n	800366c <__smakebuf_r+0x18>
 800368c:	f023 0303 	bic.w	r3, r3, #3
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	81a3      	strh	r3, [r4, #12]
 8003696:	e7e3      	b.n	8003660 <__smakebuf_r+0xc>
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <__smakebuf_r+0x7c>)
 800369a:	62b3      	str	r3, [r6, #40]	; 0x28
 800369c:	89a3      	ldrh	r3, [r4, #12]
 800369e:	6020      	str	r0, [r4, #0]
 80036a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a4:	81a3      	strh	r3, [r4, #12]
 80036a6:	9b00      	ldr	r3, [sp, #0]
 80036a8:	6163      	str	r3, [r4, #20]
 80036aa:	9b01      	ldr	r3, [sp, #4]
 80036ac:	6120      	str	r0, [r4, #16]
 80036ae:	b15b      	cbz	r3, 80036c8 <__smakebuf_r+0x74>
 80036b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 fc4d 	bl	8003f54 <_isatty_r>
 80036ba:	b128      	cbz	r0, 80036c8 <__smakebuf_r+0x74>
 80036bc:	89a3      	ldrh	r3, [r4, #12]
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	81a3      	strh	r3, [r4, #12]
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	431d      	orrs	r5, r3
 80036cc:	81a5      	strh	r5, [r4, #12]
 80036ce:	e7cd      	b.n	800366c <__smakebuf_r+0x18>
 80036d0:	08003479 	.word	0x08003479

080036d4 <_free_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4605      	mov	r5, r0
 80036d8:	2900      	cmp	r1, #0
 80036da:	d045      	beq.n	8003768 <_free_r+0x94>
 80036dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036e0:	1f0c      	subs	r4, r1, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bfb8      	it	lt
 80036e6:	18e4      	addlt	r4, r4, r3
 80036e8:	f000 fc56 	bl	8003f98 <__malloc_lock>
 80036ec:	4a1f      	ldr	r2, [pc, #124]	; (800376c <_free_r+0x98>)
 80036ee:	6813      	ldr	r3, [r2, #0]
 80036f0:	4610      	mov	r0, r2
 80036f2:	b933      	cbnz	r3, 8003702 <_free_r+0x2e>
 80036f4:	6063      	str	r3, [r4, #4]
 80036f6:	6014      	str	r4, [r2, #0]
 80036f8:	4628      	mov	r0, r5
 80036fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036fe:	f000 bc4c 	b.w	8003f9a <__malloc_unlock>
 8003702:	42a3      	cmp	r3, r4
 8003704:	d90c      	bls.n	8003720 <_free_r+0x4c>
 8003706:	6821      	ldr	r1, [r4, #0]
 8003708:	1862      	adds	r2, r4, r1
 800370a:	4293      	cmp	r3, r2
 800370c:	bf04      	itt	eq
 800370e:	681a      	ldreq	r2, [r3, #0]
 8003710:	685b      	ldreq	r3, [r3, #4]
 8003712:	6063      	str	r3, [r4, #4]
 8003714:	bf04      	itt	eq
 8003716:	1852      	addeq	r2, r2, r1
 8003718:	6022      	streq	r2, [r4, #0]
 800371a:	6004      	str	r4, [r0, #0]
 800371c:	e7ec      	b.n	80036f8 <_free_r+0x24>
 800371e:	4613      	mov	r3, r2
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	b10a      	cbz	r2, 8003728 <_free_r+0x54>
 8003724:	42a2      	cmp	r2, r4
 8003726:	d9fa      	bls.n	800371e <_free_r+0x4a>
 8003728:	6819      	ldr	r1, [r3, #0]
 800372a:	1858      	adds	r0, r3, r1
 800372c:	42a0      	cmp	r0, r4
 800372e:	d10b      	bne.n	8003748 <_free_r+0x74>
 8003730:	6820      	ldr	r0, [r4, #0]
 8003732:	4401      	add	r1, r0
 8003734:	1858      	adds	r0, r3, r1
 8003736:	4282      	cmp	r2, r0
 8003738:	6019      	str	r1, [r3, #0]
 800373a:	d1dd      	bne.n	80036f8 <_free_r+0x24>
 800373c:	6810      	ldr	r0, [r2, #0]
 800373e:	6852      	ldr	r2, [r2, #4]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	4401      	add	r1, r0
 8003744:	6019      	str	r1, [r3, #0]
 8003746:	e7d7      	b.n	80036f8 <_free_r+0x24>
 8003748:	d902      	bls.n	8003750 <_free_r+0x7c>
 800374a:	230c      	movs	r3, #12
 800374c:	602b      	str	r3, [r5, #0]
 800374e:	e7d3      	b.n	80036f8 <_free_r+0x24>
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	1821      	adds	r1, r4, r0
 8003754:	428a      	cmp	r2, r1
 8003756:	bf04      	itt	eq
 8003758:	6811      	ldreq	r1, [r2, #0]
 800375a:	6852      	ldreq	r2, [r2, #4]
 800375c:	6062      	str	r2, [r4, #4]
 800375e:	bf04      	itt	eq
 8003760:	1809      	addeq	r1, r1, r0
 8003762:	6021      	streq	r1, [r4, #0]
 8003764:	605c      	str	r4, [r3, #4]
 8003766:	e7c7      	b.n	80036f8 <_free_r+0x24>
 8003768:	bd38      	pop	{r3, r4, r5, pc}
 800376a:	bf00      	nop
 800376c:	2000047c 	.word	0x2000047c

08003770 <_malloc_r>:
 8003770:	b570      	push	{r4, r5, r6, lr}
 8003772:	1ccd      	adds	r5, r1, #3
 8003774:	f025 0503 	bic.w	r5, r5, #3
 8003778:	3508      	adds	r5, #8
 800377a:	2d0c      	cmp	r5, #12
 800377c:	bf38      	it	cc
 800377e:	250c      	movcc	r5, #12
 8003780:	2d00      	cmp	r5, #0
 8003782:	4606      	mov	r6, r0
 8003784:	db01      	blt.n	800378a <_malloc_r+0x1a>
 8003786:	42a9      	cmp	r1, r5
 8003788:	d903      	bls.n	8003792 <_malloc_r+0x22>
 800378a:	230c      	movs	r3, #12
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	2000      	movs	r0, #0
 8003790:	bd70      	pop	{r4, r5, r6, pc}
 8003792:	f000 fc01 	bl	8003f98 <__malloc_lock>
 8003796:	4a23      	ldr	r2, [pc, #140]	; (8003824 <_malloc_r+0xb4>)
 8003798:	6814      	ldr	r4, [r2, #0]
 800379a:	4621      	mov	r1, r4
 800379c:	b991      	cbnz	r1, 80037c4 <_malloc_r+0x54>
 800379e:	4c22      	ldr	r4, [pc, #136]	; (8003828 <_malloc_r+0xb8>)
 80037a0:	6823      	ldr	r3, [r4, #0]
 80037a2:	b91b      	cbnz	r3, 80037ac <_malloc_r+0x3c>
 80037a4:	4630      	mov	r0, r6
 80037a6:	f000 fb4d 	bl	8003e44 <_sbrk_r>
 80037aa:	6020      	str	r0, [r4, #0]
 80037ac:	4629      	mov	r1, r5
 80037ae:	4630      	mov	r0, r6
 80037b0:	f000 fb48 	bl	8003e44 <_sbrk_r>
 80037b4:	1c43      	adds	r3, r0, #1
 80037b6:	d126      	bne.n	8003806 <_malloc_r+0x96>
 80037b8:	230c      	movs	r3, #12
 80037ba:	6033      	str	r3, [r6, #0]
 80037bc:	4630      	mov	r0, r6
 80037be:	f000 fbec 	bl	8003f9a <__malloc_unlock>
 80037c2:	e7e4      	b.n	800378e <_malloc_r+0x1e>
 80037c4:	680b      	ldr	r3, [r1, #0]
 80037c6:	1b5b      	subs	r3, r3, r5
 80037c8:	d41a      	bmi.n	8003800 <_malloc_r+0x90>
 80037ca:	2b0b      	cmp	r3, #11
 80037cc:	d90f      	bls.n	80037ee <_malloc_r+0x7e>
 80037ce:	600b      	str	r3, [r1, #0]
 80037d0:	50cd      	str	r5, [r1, r3]
 80037d2:	18cc      	adds	r4, r1, r3
 80037d4:	4630      	mov	r0, r6
 80037d6:	f000 fbe0 	bl	8003f9a <__malloc_unlock>
 80037da:	f104 000b 	add.w	r0, r4, #11
 80037de:	1d23      	adds	r3, r4, #4
 80037e0:	f020 0007 	bic.w	r0, r0, #7
 80037e4:	1ac3      	subs	r3, r0, r3
 80037e6:	d01b      	beq.n	8003820 <_malloc_r+0xb0>
 80037e8:	425a      	negs	r2, r3
 80037ea:	50e2      	str	r2, [r4, r3]
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	428c      	cmp	r4, r1
 80037f0:	bf0d      	iteet	eq
 80037f2:	6863      	ldreq	r3, [r4, #4]
 80037f4:	684b      	ldrne	r3, [r1, #4]
 80037f6:	6063      	strne	r3, [r4, #4]
 80037f8:	6013      	streq	r3, [r2, #0]
 80037fa:	bf18      	it	ne
 80037fc:	460c      	movne	r4, r1
 80037fe:	e7e9      	b.n	80037d4 <_malloc_r+0x64>
 8003800:	460c      	mov	r4, r1
 8003802:	6849      	ldr	r1, [r1, #4]
 8003804:	e7ca      	b.n	800379c <_malloc_r+0x2c>
 8003806:	1cc4      	adds	r4, r0, #3
 8003808:	f024 0403 	bic.w	r4, r4, #3
 800380c:	42a0      	cmp	r0, r4
 800380e:	d005      	beq.n	800381c <_malloc_r+0xac>
 8003810:	1a21      	subs	r1, r4, r0
 8003812:	4630      	mov	r0, r6
 8003814:	f000 fb16 	bl	8003e44 <_sbrk_r>
 8003818:	3001      	adds	r0, #1
 800381a:	d0cd      	beq.n	80037b8 <_malloc_r+0x48>
 800381c:	6025      	str	r5, [r4, #0]
 800381e:	e7d9      	b.n	80037d4 <_malloc_r+0x64>
 8003820:	bd70      	pop	{r4, r5, r6, pc}
 8003822:	bf00      	nop
 8003824:	2000047c 	.word	0x2000047c
 8003828:	20000480 	.word	0x20000480

0800382c <__sfputc_r>:
 800382c:	6893      	ldr	r3, [r2, #8]
 800382e:	3b01      	subs	r3, #1
 8003830:	2b00      	cmp	r3, #0
 8003832:	b410      	push	{r4}
 8003834:	6093      	str	r3, [r2, #8]
 8003836:	da09      	bge.n	800384c <__sfputc_r+0x20>
 8003838:	6994      	ldr	r4, [r2, #24]
 800383a:	42a3      	cmp	r3, r4
 800383c:	db02      	blt.n	8003844 <__sfputc_r+0x18>
 800383e:	b2cb      	uxtb	r3, r1
 8003840:	2b0a      	cmp	r3, #10
 8003842:	d103      	bne.n	800384c <__sfputc_r+0x20>
 8003844:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003848:	f7ff bca4 	b.w	8003194 <__swbuf_r>
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	1c58      	adds	r0, r3, #1
 8003850:	6010      	str	r0, [r2, #0]
 8003852:	7019      	strb	r1, [r3, #0]
 8003854:	b2c8      	uxtb	r0, r1
 8003856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800385a:	4770      	bx	lr

0800385c <__sfputs_r>:
 800385c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385e:	4606      	mov	r6, r0
 8003860:	460f      	mov	r7, r1
 8003862:	4614      	mov	r4, r2
 8003864:	18d5      	adds	r5, r2, r3
 8003866:	42ac      	cmp	r4, r5
 8003868:	d101      	bne.n	800386e <__sfputs_r+0x12>
 800386a:	2000      	movs	r0, #0
 800386c:	e007      	b.n	800387e <__sfputs_r+0x22>
 800386e:	463a      	mov	r2, r7
 8003870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003874:	4630      	mov	r0, r6
 8003876:	f7ff ffd9 	bl	800382c <__sfputc_r>
 800387a:	1c43      	adds	r3, r0, #1
 800387c:	d1f3      	bne.n	8003866 <__sfputs_r+0xa>
 800387e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003880 <_vfiprintf_r>:
 8003880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	b09d      	sub	sp, #116	; 0x74
 8003886:	460c      	mov	r4, r1
 8003888:	4617      	mov	r7, r2
 800388a:	9303      	str	r3, [sp, #12]
 800388c:	4606      	mov	r6, r0
 800388e:	b118      	cbz	r0, 8003898 <_vfiprintf_r+0x18>
 8003890:	6983      	ldr	r3, [r0, #24]
 8003892:	b90b      	cbnz	r3, 8003898 <_vfiprintf_r+0x18>
 8003894:	f7ff fe30 	bl	80034f8 <__sinit>
 8003898:	4b7c      	ldr	r3, [pc, #496]	; (8003a8c <_vfiprintf_r+0x20c>)
 800389a:	429c      	cmp	r4, r3
 800389c:	d157      	bne.n	800394e <_vfiprintf_r+0xce>
 800389e:	6874      	ldr	r4, [r6, #4]
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	0718      	lsls	r0, r3, #28
 80038a4:	d55d      	bpl.n	8003962 <_vfiprintf_r+0xe2>
 80038a6:	6923      	ldr	r3, [r4, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d05a      	beq.n	8003962 <_vfiprintf_r+0xe2>
 80038ac:	2300      	movs	r3, #0
 80038ae:	9309      	str	r3, [sp, #36]	; 0x24
 80038b0:	2320      	movs	r3, #32
 80038b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038b6:	2330      	movs	r3, #48	; 0x30
 80038b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038bc:	f04f 0b01 	mov.w	fp, #1
 80038c0:	46b8      	mov	r8, r7
 80038c2:	4645      	mov	r5, r8
 80038c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d155      	bne.n	8003978 <_vfiprintf_r+0xf8>
 80038cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80038d0:	d00b      	beq.n	80038ea <_vfiprintf_r+0x6a>
 80038d2:	4653      	mov	r3, sl
 80038d4:	463a      	mov	r2, r7
 80038d6:	4621      	mov	r1, r4
 80038d8:	4630      	mov	r0, r6
 80038da:	f7ff ffbf 	bl	800385c <__sfputs_r>
 80038de:	3001      	adds	r0, #1
 80038e0:	f000 80c4 	beq.w	8003a6c <_vfiprintf_r+0x1ec>
 80038e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e6:	4453      	add	r3, sl
 80038e8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ea:	f898 3000 	ldrb.w	r3, [r8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80bc 	beq.w	8003a6c <_vfiprintf_r+0x1ec>
 80038f4:	2300      	movs	r3, #0
 80038f6:	f04f 32ff 	mov.w	r2, #4294967295
 80038fa:	9304      	str	r3, [sp, #16]
 80038fc:	9307      	str	r3, [sp, #28]
 80038fe:	9205      	str	r2, [sp, #20]
 8003900:	9306      	str	r3, [sp, #24]
 8003902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003906:	931a      	str	r3, [sp, #104]	; 0x68
 8003908:	2205      	movs	r2, #5
 800390a:	7829      	ldrb	r1, [r5, #0]
 800390c:	4860      	ldr	r0, [pc, #384]	; (8003a90 <_vfiprintf_r+0x210>)
 800390e:	f7fc fc67 	bl	80001e0 <memchr>
 8003912:	f105 0801 	add.w	r8, r5, #1
 8003916:	9b04      	ldr	r3, [sp, #16]
 8003918:	2800      	cmp	r0, #0
 800391a:	d131      	bne.n	8003980 <_vfiprintf_r+0x100>
 800391c:	06d9      	lsls	r1, r3, #27
 800391e:	bf44      	itt	mi
 8003920:	2220      	movmi	r2, #32
 8003922:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003926:	071a      	lsls	r2, r3, #28
 8003928:	bf44      	itt	mi
 800392a:	222b      	movmi	r2, #43	; 0x2b
 800392c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003930:	782a      	ldrb	r2, [r5, #0]
 8003932:	2a2a      	cmp	r2, #42	; 0x2a
 8003934:	d02c      	beq.n	8003990 <_vfiprintf_r+0x110>
 8003936:	9a07      	ldr	r2, [sp, #28]
 8003938:	2100      	movs	r1, #0
 800393a:	200a      	movs	r0, #10
 800393c:	46a8      	mov	r8, r5
 800393e:	3501      	adds	r5, #1
 8003940:	f898 3000 	ldrb.w	r3, [r8]
 8003944:	3b30      	subs	r3, #48	; 0x30
 8003946:	2b09      	cmp	r3, #9
 8003948:	d96d      	bls.n	8003a26 <_vfiprintf_r+0x1a6>
 800394a:	b371      	cbz	r1, 80039aa <_vfiprintf_r+0x12a>
 800394c:	e026      	b.n	800399c <_vfiprintf_r+0x11c>
 800394e:	4b51      	ldr	r3, [pc, #324]	; (8003a94 <_vfiprintf_r+0x214>)
 8003950:	429c      	cmp	r4, r3
 8003952:	d101      	bne.n	8003958 <_vfiprintf_r+0xd8>
 8003954:	68b4      	ldr	r4, [r6, #8]
 8003956:	e7a3      	b.n	80038a0 <_vfiprintf_r+0x20>
 8003958:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <_vfiprintf_r+0x218>)
 800395a:	429c      	cmp	r4, r3
 800395c:	bf08      	it	eq
 800395e:	68f4      	ldreq	r4, [r6, #12]
 8003960:	e79e      	b.n	80038a0 <_vfiprintf_r+0x20>
 8003962:	4621      	mov	r1, r4
 8003964:	4630      	mov	r0, r6
 8003966:	f7ff fc67 	bl	8003238 <__swsetup_r>
 800396a:	2800      	cmp	r0, #0
 800396c:	d09e      	beq.n	80038ac <_vfiprintf_r+0x2c>
 800396e:	f04f 30ff 	mov.w	r0, #4294967295
 8003972:	b01d      	add	sp, #116	; 0x74
 8003974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003978:	2b25      	cmp	r3, #37	; 0x25
 800397a:	d0a7      	beq.n	80038cc <_vfiprintf_r+0x4c>
 800397c:	46a8      	mov	r8, r5
 800397e:	e7a0      	b.n	80038c2 <_vfiprintf_r+0x42>
 8003980:	4a43      	ldr	r2, [pc, #268]	; (8003a90 <_vfiprintf_r+0x210>)
 8003982:	1a80      	subs	r0, r0, r2
 8003984:	fa0b f000 	lsl.w	r0, fp, r0
 8003988:	4318      	orrs	r0, r3
 800398a:	9004      	str	r0, [sp, #16]
 800398c:	4645      	mov	r5, r8
 800398e:	e7bb      	b.n	8003908 <_vfiprintf_r+0x88>
 8003990:	9a03      	ldr	r2, [sp, #12]
 8003992:	1d11      	adds	r1, r2, #4
 8003994:	6812      	ldr	r2, [r2, #0]
 8003996:	9103      	str	r1, [sp, #12]
 8003998:	2a00      	cmp	r2, #0
 800399a:	db01      	blt.n	80039a0 <_vfiprintf_r+0x120>
 800399c:	9207      	str	r2, [sp, #28]
 800399e:	e004      	b.n	80039aa <_vfiprintf_r+0x12a>
 80039a0:	4252      	negs	r2, r2
 80039a2:	f043 0302 	orr.w	r3, r3, #2
 80039a6:	9207      	str	r2, [sp, #28]
 80039a8:	9304      	str	r3, [sp, #16]
 80039aa:	f898 3000 	ldrb.w	r3, [r8]
 80039ae:	2b2e      	cmp	r3, #46	; 0x2e
 80039b0:	d110      	bne.n	80039d4 <_vfiprintf_r+0x154>
 80039b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039b6:	2b2a      	cmp	r3, #42	; 0x2a
 80039b8:	f108 0101 	add.w	r1, r8, #1
 80039bc:	d137      	bne.n	8003a2e <_vfiprintf_r+0x1ae>
 80039be:	9b03      	ldr	r3, [sp, #12]
 80039c0:	1d1a      	adds	r2, r3, #4
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	9203      	str	r2, [sp, #12]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bfb8      	it	lt
 80039ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80039ce:	f108 0802 	add.w	r8, r8, #2
 80039d2:	9305      	str	r3, [sp, #20]
 80039d4:	4d31      	ldr	r5, [pc, #196]	; (8003a9c <_vfiprintf_r+0x21c>)
 80039d6:	f898 1000 	ldrb.w	r1, [r8]
 80039da:	2203      	movs	r2, #3
 80039dc:	4628      	mov	r0, r5
 80039de:	f7fc fbff 	bl	80001e0 <memchr>
 80039e2:	b140      	cbz	r0, 80039f6 <_vfiprintf_r+0x176>
 80039e4:	2340      	movs	r3, #64	; 0x40
 80039e6:	1b40      	subs	r0, r0, r5
 80039e8:	fa03 f000 	lsl.w	r0, r3, r0
 80039ec:	9b04      	ldr	r3, [sp, #16]
 80039ee:	4303      	orrs	r3, r0
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	f108 0801 	add.w	r8, r8, #1
 80039f6:	f898 1000 	ldrb.w	r1, [r8]
 80039fa:	4829      	ldr	r0, [pc, #164]	; (8003aa0 <_vfiprintf_r+0x220>)
 80039fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a00:	2206      	movs	r2, #6
 8003a02:	f108 0701 	add.w	r7, r8, #1
 8003a06:	f7fc fbeb 	bl	80001e0 <memchr>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d034      	beq.n	8003a78 <_vfiprintf_r+0x1f8>
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <_vfiprintf_r+0x224>)
 8003a10:	bb03      	cbnz	r3, 8003a54 <_vfiprintf_r+0x1d4>
 8003a12:	9b03      	ldr	r3, [sp, #12]
 8003a14:	3307      	adds	r3, #7
 8003a16:	f023 0307 	bic.w	r3, r3, #7
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	9303      	str	r3, [sp, #12]
 8003a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a20:	444b      	add	r3, r9
 8003a22:	9309      	str	r3, [sp, #36]	; 0x24
 8003a24:	e74c      	b.n	80038c0 <_vfiprintf_r+0x40>
 8003a26:	fb00 3202 	mla	r2, r0, r2, r3
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	e786      	b.n	800393c <_vfiprintf_r+0xbc>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9305      	str	r3, [sp, #20]
 8003a32:	4618      	mov	r0, r3
 8003a34:	250a      	movs	r5, #10
 8003a36:	4688      	mov	r8, r1
 8003a38:	3101      	adds	r1, #1
 8003a3a:	f898 2000 	ldrb.w	r2, [r8]
 8003a3e:	3a30      	subs	r2, #48	; 0x30
 8003a40:	2a09      	cmp	r2, #9
 8003a42:	d903      	bls.n	8003a4c <_vfiprintf_r+0x1cc>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0c5      	beq.n	80039d4 <_vfiprintf_r+0x154>
 8003a48:	9005      	str	r0, [sp, #20]
 8003a4a:	e7c3      	b.n	80039d4 <_vfiprintf_r+0x154>
 8003a4c:	fb05 2000 	mla	r0, r5, r0, r2
 8003a50:	2301      	movs	r3, #1
 8003a52:	e7f0      	b.n	8003a36 <_vfiprintf_r+0x1b6>
 8003a54:	ab03      	add	r3, sp, #12
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	4622      	mov	r2, r4
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <_vfiprintf_r+0x228>)
 8003a5c:	a904      	add	r1, sp, #16
 8003a5e:	4630      	mov	r0, r6
 8003a60:	f3af 8000 	nop.w
 8003a64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a68:	4681      	mov	r9, r0
 8003a6a:	d1d8      	bne.n	8003a1e <_vfiprintf_r+0x19e>
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	065b      	lsls	r3, r3, #25
 8003a70:	f53f af7d 	bmi.w	800396e <_vfiprintf_r+0xee>
 8003a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a76:	e77c      	b.n	8003972 <_vfiprintf_r+0xf2>
 8003a78:	ab03      	add	r3, sp, #12
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	4622      	mov	r2, r4
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <_vfiprintf_r+0x228>)
 8003a80:	a904      	add	r1, sp, #16
 8003a82:	4630      	mov	r0, r6
 8003a84:	f000 f888 	bl	8003b98 <_printf_i>
 8003a88:	e7ec      	b.n	8003a64 <_vfiprintf_r+0x1e4>
 8003a8a:	bf00      	nop
 8003a8c:	08004258 	.word	0x08004258
 8003a90:	0800429c 	.word	0x0800429c
 8003a94:	08004278 	.word	0x08004278
 8003a98:	08004238 	.word	0x08004238
 8003a9c:	080042a2 	.word	0x080042a2
 8003aa0:	080042a6 	.word	0x080042a6
 8003aa4:	00000000 	.word	0x00000000
 8003aa8:	0800385d 	.word	0x0800385d

08003aac <_printf_common>:
 8003aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab0:	4691      	mov	r9, r2
 8003ab2:	461f      	mov	r7, r3
 8003ab4:	688a      	ldr	r2, [r1, #8]
 8003ab6:	690b      	ldr	r3, [r1, #16]
 8003ab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	bfb8      	it	lt
 8003ac0:	4613      	movlt	r3, r2
 8003ac2:	f8c9 3000 	str.w	r3, [r9]
 8003ac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003aca:	4606      	mov	r6, r0
 8003acc:	460c      	mov	r4, r1
 8003ace:	b112      	cbz	r2, 8003ad6 <_printf_common+0x2a>
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f8c9 3000 	str.w	r3, [r9]
 8003ad6:	6823      	ldr	r3, [r4, #0]
 8003ad8:	0699      	lsls	r1, r3, #26
 8003ada:	bf42      	ittt	mi
 8003adc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ae0:	3302      	addmi	r3, #2
 8003ae2:	f8c9 3000 	strmi.w	r3, [r9]
 8003ae6:	6825      	ldr	r5, [r4, #0]
 8003ae8:	f015 0506 	ands.w	r5, r5, #6
 8003aec:	d107      	bne.n	8003afe <_printf_common+0x52>
 8003aee:	f104 0a19 	add.w	sl, r4, #25
 8003af2:	68e3      	ldr	r3, [r4, #12]
 8003af4:	f8d9 2000 	ldr.w	r2, [r9]
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	429d      	cmp	r5, r3
 8003afc:	db29      	blt.n	8003b52 <_printf_common+0xa6>
 8003afe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	3300      	adds	r3, #0
 8003b06:	bf18      	it	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	0692      	lsls	r2, r2, #26
 8003b0c:	d42e      	bmi.n	8003b6c <_printf_common+0xc0>
 8003b0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b12:	4639      	mov	r1, r7
 8003b14:	4630      	mov	r0, r6
 8003b16:	47c0      	blx	r8
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d021      	beq.n	8003b60 <_printf_common+0xb4>
 8003b1c:	6823      	ldr	r3, [r4, #0]
 8003b1e:	68e5      	ldr	r5, [r4, #12]
 8003b20:	f8d9 2000 	ldr.w	r2, [r9]
 8003b24:	f003 0306 	and.w	r3, r3, #6
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	bf08      	it	eq
 8003b2c:	1aad      	subeq	r5, r5, r2
 8003b2e:	68a3      	ldr	r3, [r4, #8]
 8003b30:	6922      	ldr	r2, [r4, #16]
 8003b32:	bf0c      	ite	eq
 8003b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b38:	2500      	movne	r5, #0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfc4      	itt	gt
 8003b3e:	1a9b      	subgt	r3, r3, r2
 8003b40:	18ed      	addgt	r5, r5, r3
 8003b42:	f04f 0900 	mov.w	r9, #0
 8003b46:	341a      	adds	r4, #26
 8003b48:	454d      	cmp	r5, r9
 8003b4a:	d11b      	bne.n	8003b84 <_printf_common+0xd8>
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b52:	2301      	movs	r3, #1
 8003b54:	4652      	mov	r2, sl
 8003b56:	4639      	mov	r1, r7
 8003b58:	4630      	mov	r0, r6
 8003b5a:	47c0      	blx	r8
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d103      	bne.n	8003b68 <_printf_common+0xbc>
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b68:	3501      	adds	r5, #1
 8003b6a:	e7c2      	b.n	8003af2 <_printf_common+0x46>
 8003b6c:	18e1      	adds	r1, r4, r3
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	2030      	movs	r0, #48	; 0x30
 8003b72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b76:	4422      	add	r2, r4
 8003b78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b80:	3302      	adds	r3, #2
 8003b82:	e7c4      	b.n	8003b0e <_printf_common+0x62>
 8003b84:	2301      	movs	r3, #1
 8003b86:	4622      	mov	r2, r4
 8003b88:	4639      	mov	r1, r7
 8003b8a:	4630      	mov	r0, r6
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d0e6      	beq.n	8003b60 <_printf_common+0xb4>
 8003b92:	f109 0901 	add.w	r9, r9, #1
 8003b96:	e7d7      	b.n	8003b48 <_printf_common+0x9c>

08003b98 <_printf_i>:
 8003b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b9c:	4617      	mov	r7, r2
 8003b9e:	7e0a      	ldrb	r2, [r1, #24]
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	2a6e      	cmp	r2, #110	; 0x6e
 8003ba4:	4698      	mov	r8, r3
 8003ba6:	4606      	mov	r6, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bac:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003bb0:	f000 80bc 	beq.w	8003d2c <_printf_i+0x194>
 8003bb4:	d81a      	bhi.n	8003bec <_printf_i+0x54>
 8003bb6:	2a63      	cmp	r2, #99	; 0x63
 8003bb8:	d02e      	beq.n	8003c18 <_printf_i+0x80>
 8003bba:	d80a      	bhi.n	8003bd2 <_printf_i+0x3a>
 8003bbc:	2a00      	cmp	r2, #0
 8003bbe:	f000 80c8 	beq.w	8003d52 <_printf_i+0x1ba>
 8003bc2:	2a58      	cmp	r2, #88	; 0x58
 8003bc4:	f000 808a 	beq.w	8003cdc <_printf_i+0x144>
 8003bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bcc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003bd0:	e02a      	b.n	8003c28 <_printf_i+0x90>
 8003bd2:	2a64      	cmp	r2, #100	; 0x64
 8003bd4:	d001      	beq.n	8003bda <_printf_i+0x42>
 8003bd6:	2a69      	cmp	r2, #105	; 0x69
 8003bd8:	d1f6      	bne.n	8003bc8 <_printf_i+0x30>
 8003bda:	6821      	ldr	r1, [r4, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003be2:	d023      	beq.n	8003c2c <_printf_i+0x94>
 8003be4:	1d11      	adds	r1, r2, #4
 8003be6:	6019      	str	r1, [r3, #0]
 8003be8:	6813      	ldr	r3, [r2, #0]
 8003bea:	e027      	b.n	8003c3c <_printf_i+0xa4>
 8003bec:	2a73      	cmp	r2, #115	; 0x73
 8003bee:	f000 80b4 	beq.w	8003d5a <_printf_i+0x1c2>
 8003bf2:	d808      	bhi.n	8003c06 <_printf_i+0x6e>
 8003bf4:	2a6f      	cmp	r2, #111	; 0x6f
 8003bf6:	d02a      	beq.n	8003c4e <_printf_i+0xb6>
 8003bf8:	2a70      	cmp	r2, #112	; 0x70
 8003bfa:	d1e5      	bne.n	8003bc8 <_printf_i+0x30>
 8003bfc:	680a      	ldr	r2, [r1, #0]
 8003bfe:	f042 0220 	orr.w	r2, r2, #32
 8003c02:	600a      	str	r2, [r1, #0]
 8003c04:	e003      	b.n	8003c0e <_printf_i+0x76>
 8003c06:	2a75      	cmp	r2, #117	; 0x75
 8003c08:	d021      	beq.n	8003c4e <_printf_i+0xb6>
 8003c0a:	2a78      	cmp	r2, #120	; 0x78
 8003c0c:	d1dc      	bne.n	8003bc8 <_printf_i+0x30>
 8003c0e:	2278      	movs	r2, #120	; 0x78
 8003c10:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003c14:	496e      	ldr	r1, [pc, #440]	; (8003dd0 <_printf_i+0x238>)
 8003c16:	e064      	b.n	8003ce2 <_printf_i+0x14a>
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003c1e:	1d11      	adds	r1, r2, #4
 8003c20:	6019      	str	r1, [r3, #0]
 8003c22:	6813      	ldr	r3, [r2, #0]
 8003c24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0a3      	b.n	8003d74 <_printf_i+0x1dc>
 8003c2c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003c30:	f102 0104 	add.w	r1, r2, #4
 8003c34:	6019      	str	r1, [r3, #0]
 8003c36:	d0d7      	beq.n	8003be8 <_printf_i+0x50>
 8003c38:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	da03      	bge.n	8003c48 <_printf_i+0xb0>
 8003c40:	222d      	movs	r2, #45	; 0x2d
 8003c42:	425b      	negs	r3, r3
 8003c44:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c48:	4962      	ldr	r1, [pc, #392]	; (8003dd4 <_printf_i+0x23c>)
 8003c4a:	220a      	movs	r2, #10
 8003c4c:	e017      	b.n	8003c7e <_printf_i+0xe6>
 8003c4e:	6820      	ldr	r0, [r4, #0]
 8003c50:	6819      	ldr	r1, [r3, #0]
 8003c52:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003c56:	d003      	beq.n	8003c60 <_printf_i+0xc8>
 8003c58:	1d08      	adds	r0, r1, #4
 8003c5a:	6018      	str	r0, [r3, #0]
 8003c5c:	680b      	ldr	r3, [r1, #0]
 8003c5e:	e006      	b.n	8003c6e <_printf_i+0xd6>
 8003c60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c64:	f101 0004 	add.w	r0, r1, #4
 8003c68:	6018      	str	r0, [r3, #0]
 8003c6a:	d0f7      	beq.n	8003c5c <_printf_i+0xc4>
 8003c6c:	880b      	ldrh	r3, [r1, #0]
 8003c6e:	4959      	ldr	r1, [pc, #356]	; (8003dd4 <_printf_i+0x23c>)
 8003c70:	2a6f      	cmp	r2, #111	; 0x6f
 8003c72:	bf14      	ite	ne
 8003c74:	220a      	movne	r2, #10
 8003c76:	2208      	moveq	r2, #8
 8003c78:	2000      	movs	r0, #0
 8003c7a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003c7e:	6865      	ldr	r5, [r4, #4]
 8003c80:	60a5      	str	r5, [r4, #8]
 8003c82:	2d00      	cmp	r5, #0
 8003c84:	f2c0 809c 	blt.w	8003dc0 <_printf_i+0x228>
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	f020 0004 	bic.w	r0, r0, #4
 8003c8e:	6020      	str	r0, [r4, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d13f      	bne.n	8003d14 <_printf_i+0x17c>
 8003c94:	2d00      	cmp	r5, #0
 8003c96:	f040 8095 	bne.w	8003dc4 <_printf_i+0x22c>
 8003c9a:	4675      	mov	r5, lr
 8003c9c:	2a08      	cmp	r2, #8
 8003c9e:	d10b      	bne.n	8003cb8 <_printf_i+0x120>
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	07da      	lsls	r2, r3, #31
 8003ca4:	d508      	bpl.n	8003cb8 <_printf_i+0x120>
 8003ca6:	6923      	ldr	r3, [r4, #16]
 8003ca8:	6862      	ldr	r2, [r4, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	bfde      	ittt	le
 8003cae:	2330      	movle	r3, #48	; 0x30
 8003cb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cb8:	ebae 0305 	sub.w	r3, lr, r5
 8003cbc:	6123      	str	r3, [r4, #16]
 8003cbe:	f8cd 8000 	str.w	r8, [sp]
 8003cc2:	463b      	mov	r3, r7
 8003cc4:	aa03      	add	r2, sp, #12
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f7ff feef 	bl	8003aac <_printf_common>
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d155      	bne.n	8003d7e <_printf_i+0x1e6>
 8003cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd6:	b005      	add	sp, #20
 8003cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003cdc:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003ce0:	493c      	ldr	r1, [pc, #240]	; (8003dd4 <_printf_i+0x23c>)
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003cea:	f100 0504 	add.w	r5, r0, #4
 8003cee:	601d      	str	r5, [r3, #0]
 8003cf0:	d001      	beq.n	8003cf6 <_printf_i+0x15e>
 8003cf2:	6803      	ldr	r3, [r0, #0]
 8003cf4:	e002      	b.n	8003cfc <_printf_i+0x164>
 8003cf6:	0655      	lsls	r5, r2, #25
 8003cf8:	d5fb      	bpl.n	8003cf2 <_printf_i+0x15a>
 8003cfa:	8803      	ldrh	r3, [r0, #0]
 8003cfc:	07d0      	lsls	r0, r2, #31
 8003cfe:	bf44      	itt	mi
 8003d00:	f042 0220 	orrmi.w	r2, r2, #32
 8003d04:	6022      	strmi	r2, [r4, #0]
 8003d06:	b91b      	cbnz	r3, 8003d10 <_printf_i+0x178>
 8003d08:	6822      	ldr	r2, [r4, #0]
 8003d0a:	f022 0220 	bic.w	r2, r2, #32
 8003d0e:	6022      	str	r2, [r4, #0]
 8003d10:	2210      	movs	r2, #16
 8003d12:	e7b1      	b.n	8003c78 <_printf_i+0xe0>
 8003d14:	4675      	mov	r5, lr
 8003d16:	fbb3 f0f2 	udiv	r0, r3, r2
 8003d1a:	fb02 3310 	mls	r3, r2, r0, r3
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d24:	4603      	mov	r3, r0
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d1f5      	bne.n	8003d16 <_printf_i+0x17e>
 8003d2a:	e7b7      	b.n	8003c9c <_printf_i+0x104>
 8003d2c:	6808      	ldr	r0, [r1, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	6949      	ldr	r1, [r1, #20]
 8003d32:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d36:	d004      	beq.n	8003d42 <_printf_i+0x1aa>
 8003d38:	1d10      	adds	r0, r2, #4
 8003d3a:	6018      	str	r0, [r3, #0]
 8003d3c:	6813      	ldr	r3, [r2, #0]
 8003d3e:	6019      	str	r1, [r3, #0]
 8003d40:	e007      	b.n	8003d52 <_printf_i+0x1ba>
 8003d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d46:	f102 0004 	add.w	r0, r2, #4
 8003d4a:	6018      	str	r0, [r3, #0]
 8003d4c:	6813      	ldr	r3, [r2, #0]
 8003d4e:	d0f6      	beq.n	8003d3e <_printf_i+0x1a6>
 8003d50:	8019      	strh	r1, [r3, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	6123      	str	r3, [r4, #16]
 8003d56:	4675      	mov	r5, lr
 8003d58:	e7b1      	b.n	8003cbe <_printf_i+0x126>
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	1d11      	adds	r1, r2, #4
 8003d5e:	6019      	str	r1, [r3, #0]
 8003d60:	6815      	ldr	r5, [r2, #0]
 8003d62:	6862      	ldr	r2, [r4, #4]
 8003d64:	2100      	movs	r1, #0
 8003d66:	4628      	mov	r0, r5
 8003d68:	f7fc fa3a 	bl	80001e0 <memchr>
 8003d6c:	b108      	cbz	r0, 8003d72 <_printf_i+0x1da>
 8003d6e:	1b40      	subs	r0, r0, r5
 8003d70:	6060      	str	r0, [r4, #4]
 8003d72:	6863      	ldr	r3, [r4, #4]
 8003d74:	6123      	str	r3, [r4, #16]
 8003d76:	2300      	movs	r3, #0
 8003d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d7c:	e79f      	b.n	8003cbe <_printf_i+0x126>
 8003d7e:	6923      	ldr	r3, [r4, #16]
 8003d80:	462a      	mov	r2, r5
 8003d82:	4639      	mov	r1, r7
 8003d84:	4630      	mov	r0, r6
 8003d86:	47c0      	blx	r8
 8003d88:	3001      	adds	r0, #1
 8003d8a:	d0a2      	beq.n	8003cd2 <_printf_i+0x13a>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	079b      	lsls	r3, r3, #30
 8003d90:	d507      	bpl.n	8003da2 <_printf_i+0x20a>
 8003d92:	2500      	movs	r5, #0
 8003d94:	f104 0919 	add.w	r9, r4, #25
 8003d98:	68e3      	ldr	r3, [r4, #12]
 8003d9a:	9a03      	ldr	r2, [sp, #12]
 8003d9c:	1a9b      	subs	r3, r3, r2
 8003d9e:	429d      	cmp	r5, r3
 8003da0:	db05      	blt.n	8003dae <_printf_i+0x216>
 8003da2:	68e0      	ldr	r0, [r4, #12]
 8003da4:	9b03      	ldr	r3, [sp, #12]
 8003da6:	4298      	cmp	r0, r3
 8003da8:	bfb8      	it	lt
 8003daa:	4618      	movlt	r0, r3
 8003dac:	e793      	b.n	8003cd6 <_printf_i+0x13e>
 8003dae:	2301      	movs	r3, #1
 8003db0:	464a      	mov	r2, r9
 8003db2:	4639      	mov	r1, r7
 8003db4:	4630      	mov	r0, r6
 8003db6:	47c0      	blx	r8
 8003db8:	3001      	adds	r0, #1
 8003dba:	d08a      	beq.n	8003cd2 <_printf_i+0x13a>
 8003dbc:	3501      	adds	r5, #1
 8003dbe:	e7eb      	b.n	8003d98 <_printf_i+0x200>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1a7      	bne.n	8003d14 <_printf_i+0x17c>
 8003dc4:	780b      	ldrb	r3, [r1, #0]
 8003dc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dce:	e765      	b.n	8003c9c <_printf_i+0x104>
 8003dd0:	080042be 	.word	0x080042be
 8003dd4:	080042ad 	.word	0x080042ad

08003dd8 <_putc_r>:
 8003dd8:	b570      	push	{r4, r5, r6, lr}
 8003dda:	460d      	mov	r5, r1
 8003ddc:	4614      	mov	r4, r2
 8003dde:	4606      	mov	r6, r0
 8003de0:	b118      	cbz	r0, 8003dea <_putc_r+0x12>
 8003de2:	6983      	ldr	r3, [r0, #24]
 8003de4:	b90b      	cbnz	r3, 8003dea <_putc_r+0x12>
 8003de6:	f7ff fb87 	bl	80034f8 <__sinit>
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <_putc_r+0x60>)
 8003dec:	429c      	cmp	r4, r3
 8003dee:	d112      	bne.n	8003e16 <_putc_r+0x3e>
 8003df0:	6874      	ldr	r4, [r6, #4]
 8003df2:	68a3      	ldr	r3, [r4, #8]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	60a3      	str	r3, [r4, #8]
 8003dfa:	da16      	bge.n	8003e2a <_putc_r+0x52>
 8003dfc:	69a2      	ldr	r2, [r4, #24]
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	db02      	blt.n	8003e08 <_putc_r+0x30>
 8003e02:	b2eb      	uxtb	r3, r5
 8003e04:	2b0a      	cmp	r3, #10
 8003e06:	d110      	bne.n	8003e2a <_putc_r+0x52>
 8003e08:	4622      	mov	r2, r4
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	4630      	mov	r0, r6
 8003e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003e12:	f7ff b9bf 	b.w	8003194 <__swbuf_r>
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <_putc_r+0x64>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d101      	bne.n	8003e20 <_putc_r+0x48>
 8003e1c:	68b4      	ldr	r4, [r6, #8]
 8003e1e:	e7e8      	b.n	8003df2 <_putc_r+0x1a>
 8003e20:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <_putc_r+0x68>)
 8003e22:	429c      	cmp	r4, r3
 8003e24:	bf08      	it	eq
 8003e26:	68f4      	ldreq	r4, [r6, #12]
 8003e28:	e7e3      	b.n	8003df2 <_putc_r+0x1a>
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	6022      	str	r2, [r4, #0]
 8003e30:	701d      	strb	r5, [r3, #0]
 8003e32:	b2e8      	uxtb	r0, r5
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	bf00      	nop
 8003e38:	08004258 	.word	0x08004258
 8003e3c:	08004278 	.word	0x08004278
 8003e40:	08004238 	.word	0x08004238

08003e44 <_sbrk_r>:
 8003e44:	b538      	push	{r3, r4, r5, lr}
 8003e46:	4c06      	ldr	r4, [pc, #24]	; (8003e60 <_sbrk_r+0x1c>)
 8003e48:	2300      	movs	r3, #0
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	6023      	str	r3, [r4, #0]
 8003e50:	f000 f8de 	bl	8004010 <_sbrk>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <_sbrk_r+0x1a>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	b103      	cbz	r3, 8003e5e <_sbrk_r+0x1a>
 8003e5c:	602b      	str	r3, [r5, #0]
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	20000558 	.word	0x20000558

08003e64 <__sread>:
 8003e64:	b510      	push	{r4, lr}
 8003e66:	460c      	mov	r4, r1
 8003e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e6c:	f000 f896 	bl	8003f9c <_read_r>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	bfab      	itete	ge
 8003e74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e76:	89a3      	ldrhlt	r3, [r4, #12]
 8003e78:	181b      	addge	r3, r3, r0
 8003e7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e7e:	bfac      	ite	ge
 8003e80:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e82:	81a3      	strhlt	r3, [r4, #12]
 8003e84:	bd10      	pop	{r4, pc}

08003e86 <__swrite>:
 8003e86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8a:	461f      	mov	r7, r3
 8003e8c:	898b      	ldrh	r3, [r1, #12]
 8003e8e:	05db      	lsls	r3, r3, #23
 8003e90:	4605      	mov	r5, r0
 8003e92:	460c      	mov	r4, r1
 8003e94:	4616      	mov	r6, r2
 8003e96:	d505      	bpl.n	8003ea4 <__swrite+0x1e>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ea0:	f000 f868 	bl	8003f74 <_lseek_r>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eae:	81a3      	strh	r3, [r4, #12]
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003eba:	f000 b817 	b.w	8003eec <_write_r>

08003ebe <__sseek>:
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ec6:	f000 f855 	bl	8003f74 <_lseek_r>
 8003eca:	1c43      	adds	r3, r0, #1
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	bf15      	itete	ne
 8003ed0:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ed2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003ed6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eda:	81a3      	strheq	r3, [r4, #12]
 8003edc:	bf18      	it	ne
 8003ede:	81a3      	strhne	r3, [r4, #12]
 8003ee0:	bd10      	pop	{r4, pc}

08003ee2 <__sclose>:
 8003ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee6:	f000 b813 	b.w	8003f10 <_close_r>
	...

08003eec <_write_r>:
 8003eec:	b538      	push	{r3, r4, r5, lr}
 8003eee:	4c07      	ldr	r4, [pc, #28]	; (8003f0c <_write_r+0x20>)
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	4608      	mov	r0, r1
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	6022      	str	r2, [r4, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	f000 f896 	bl	800402c <_write>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_write_r+0x1e>
 8003f04:	6823      	ldr	r3, [r4, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_write_r+0x1e>
 8003f08:	602b      	str	r3, [r5, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000558 	.word	0x20000558

08003f10 <_close_r>:
 8003f10:	b538      	push	{r3, r4, r5, lr}
 8003f12:	4c06      	ldr	r4, [pc, #24]	; (8003f2c <_close_r+0x1c>)
 8003f14:	2300      	movs	r3, #0
 8003f16:	4605      	mov	r5, r0
 8003f18:	4608      	mov	r0, r1
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	f000 f850 	bl	8003fc0 <_close>
 8003f20:	1c43      	adds	r3, r0, #1
 8003f22:	d102      	bne.n	8003f2a <_close_r+0x1a>
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	b103      	cbz	r3, 8003f2a <_close_r+0x1a>
 8003f28:	602b      	str	r3, [r5, #0]
 8003f2a:	bd38      	pop	{r3, r4, r5, pc}
 8003f2c:	20000558 	.word	0x20000558

08003f30 <_fstat_r>:
 8003f30:	b538      	push	{r3, r4, r5, lr}
 8003f32:	4c07      	ldr	r4, [pc, #28]	; (8003f50 <_fstat_r+0x20>)
 8003f34:	2300      	movs	r3, #0
 8003f36:	4605      	mov	r5, r0
 8003f38:	4608      	mov	r0, r1
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	6023      	str	r3, [r4, #0]
 8003f3e:	f000 f847 	bl	8003fd0 <_fstat>
 8003f42:	1c43      	adds	r3, r0, #1
 8003f44:	d102      	bne.n	8003f4c <_fstat_r+0x1c>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	b103      	cbz	r3, 8003f4c <_fstat_r+0x1c>
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	bd38      	pop	{r3, r4, r5, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000558 	.word	0x20000558

08003f54 <_isatty_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4c06      	ldr	r4, [pc, #24]	; (8003f70 <_isatty_r+0x1c>)
 8003f58:	2300      	movs	r3, #0
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	4608      	mov	r0, r1
 8003f5e:	6023      	str	r3, [r4, #0]
 8003f60:	f000 f83e 	bl	8003fe0 <_isatty>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_isatty_r+0x1a>
 8003f68:	6823      	ldr	r3, [r4, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_isatty_r+0x1a>
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	20000558 	.word	0x20000558

08003f74 <_lseek_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4c07      	ldr	r4, [pc, #28]	; (8003f94 <_lseek_r+0x20>)
 8003f78:	4605      	mov	r5, r0
 8003f7a:	4608      	mov	r0, r1
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	2200      	movs	r2, #0
 8003f80:	6022      	str	r2, [r4, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f000 f834 	bl	8003ff0 <_lseek>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_lseek_r+0x1e>
 8003f8c:	6823      	ldr	r3, [r4, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_lseek_r+0x1e>
 8003f90:	602b      	str	r3, [r5, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	20000558 	.word	0x20000558

08003f98 <__malloc_lock>:
 8003f98:	4770      	bx	lr

08003f9a <__malloc_unlock>:
 8003f9a:	4770      	bx	lr

08003f9c <_read_r>:
 8003f9c:	b538      	push	{r3, r4, r5, lr}
 8003f9e:	4c07      	ldr	r4, [pc, #28]	; (8003fbc <_read_r+0x20>)
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	6022      	str	r2, [r4, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	f000 f828 	bl	8004000 <_read>
 8003fb0:	1c43      	adds	r3, r0, #1
 8003fb2:	d102      	bne.n	8003fba <_read_r+0x1e>
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b103      	cbz	r3, 8003fba <_read_r+0x1e>
 8003fb8:	602b      	str	r3, [r5, #0]
 8003fba:	bd38      	pop	{r3, r4, r5, pc}
 8003fbc:	20000558 	.word	0x20000558

08003fc0 <_close>:
 8003fc0:	4b02      	ldr	r3, [pc, #8]	; (8003fcc <_close+0xc>)
 8003fc2:	2258      	movs	r2, #88	; 0x58
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fca:	4770      	bx	lr
 8003fcc:	20000558 	.word	0x20000558

08003fd0 <_fstat>:
 8003fd0:	4b02      	ldr	r3, [pc, #8]	; (8003fdc <_fstat+0xc>)
 8003fd2:	2258      	movs	r2, #88	; 0x58
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fda:	4770      	bx	lr
 8003fdc:	20000558 	.word	0x20000558

08003fe0 <_isatty>:
 8003fe0:	4b02      	ldr	r3, [pc, #8]	; (8003fec <_isatty+0xc>)
 8003fe2:	2258      	movs	r2, #88	; 0x58
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000558 	.word	0x20000558

08003ff0 <_lseek>:
 8003ff0:	4b02      	ldr	r3, [pc, #8]	; (8003ffc <_lseek+0xc>)
 8003ff2:	2258      	movs	r2, #88	; 0x58
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffa:	4770      	bx	lr
 8003ffc:	20000558 	.word	0x20000558

08004000 <_read>:
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <_read+0xc>)
 8004002:	2258      	movs	r2, #88	; 0x58
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	f04f 30ff 	mov.w	r0, #4294967295
 800400a:	4770      	bx	lr
 800400c:	20000558 	.word	0x20000558

08004010 <_sbrk>:
 8004010:	4b04      	ldr	r3, [pc, #16]	; (8004024 <_sbrk+0x14>)
 8004012:	6819      	ldr	r1, [r3, #0]
 8004014:	4602      	mov	r2, r0
 8004016:	b909      	cbnz	r1, 800401c <_sbrk+0xc>
 8004018:	4903      	ldr	r1, [pc, #12]	; (8004028 <_sbrk+0x18>)
 800401a:	6019      	str	r1, [r3, #0]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	4402      	add	r2, r0
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	4770      	bx	lr
 8004024:	20000484 	.word	0x20000484
 8004028:	20000560 	.word	0x20000560

0800402c <_write>:
 800402c:	4b02      	ldr	r3, [pc, #8]	; (8004038 <_write+0xc>)
 800402e:	2258      	movs	r2, #88	; 0x58
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f04f 30ff 	mov.w	r0, #4294967295
 8004036:	4770      	bx	lr
 8004038:	20000558 	.word	0x20000558

0800403c <_init>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr

08004048 <_fini>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	bf00      	nop
 800404c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404e:	bc08      	pop	{r3}
 8004050:	469e      	mov	lr, r3
 8004052:	4770      	bx	lr
