
SampleApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007358  08000198  08000198  00008198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  080074f0  080074f0  0000f4f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080078ac  080078ac  0000f8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080078b4  080078b4  0000f8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080078b8  080078b8  0000f8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000574  20000000  080078bc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000514  20000574  08007e30  00010574  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a88  08007e30  00010a88  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010574  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014bc0  00000000  00000000  000105a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003110  00000000  00000000  00025164  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009239  00000000  00000000  00028274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e38  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000fa8  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001911d  00000000  00000000  00033290  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000d6a7  00000000  00000000  0004c3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00089eda  00000000  00000000  00059a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      00000082  00000000  00000000  000e392e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003458  00000000  00000000  000e39b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000574 	.word	0x20000574
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080074d8 	.word	0x080074d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4903      	ldr	r1, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080074d8 	.word	0x080074d8
 80001d4:	20000578 	.word	0x20000578

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf14      	ite	ne
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e720      	b.n	800031c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aedc 	beq.w	80002ca <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6c1      	b.n	80002ca <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b94b      	cbnz	r3, 8000ae2 <__aeabi_uldivmod+0x16>
 8000ace:	b942      	cbnz	r2, 8000ae2 <__aeabi_uldivmod+0x16>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	d002      	beq.n	8000ade <__aeabi_uldivmod+0x12>
 8000ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8000adc:	4608      	mov	r0, r1
 8000ade:	f000 b83b 	b.w	8000b58 <__aeabi_idiv0>
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	46ec      	mov	ip, sp
 8000ae6:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000aea:	f000 f81d 	bl	8000b28 <__gnu_uldivmod_helper>
 8000aee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af2:	b002      	add	sp, #8
 8000af4:	bc0c      	pop	{r2, r3}
 8000af6:	4770      	bx	lr

08000af8 <__gnu_ldivmod_helper>:
 8000af8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000afc:	9e06      	ldr	r6, [sp, #24]
 8000afe:	4614      	mov	r4, r2
 8000b00:	461d      	mov	r5, r3
 8000b02:	4680      	mov	r8, r0
 8000b04:	4689      	mov	r9, r1
 8000b06:	f000 f829 	bl	8000b5c <__divdi3>
 8000b0a:	fb04 f301 	mul.w	r3, r4, r1
 8000b0e:	fb00 3305 	mla	r3, r0, r5, r3
 8000b12:	fba4 4500 	umull	r4, r5, r4, r0
 8000b16:	441d      	add	r5, r3
 8000b18:	ebb8 0404 	subs.w	r4, r8, r4
 8000b1c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b20:	e9c6 4500 	strd	r4, r5, [r6]
 8000b24:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b28 <__gnu_uldivmod_helper>:
 8000b28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b2c:	9e06      	ldr	r6, [sp, #24]
 8000b2e:	4614      	mov	r4, r2
 8000b30:	4680      	mov	r8, r0
 8000b32:	4689      	mov	r9, r1
 8000b34:	461d      	mov	r5, r3
 8000b36:	f000 f95d 	bl	8000df4 <__udivdi3>
 8000b3a:	fb00 f505 	mul.w	r5, r0, r5
 8000b3e:	fb04 5301 	mla	r3, r4, r1, r5
 8000b42:	fba0 4504 	umull	r4, r5, r0, r4
 8000b46:	441d      	add	r5, r3
 8000b48:	ebb8 0404 	subs.w	r4, r8, r4
 8000b4c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b50:	e9c6 4500 	strd	r4, r5, [r6]
 8000b54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b58 <__aeabi_idiv0>:
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__divdi3>:
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000b62:	f2c0 809f 	blt.w	8000ca4 <__divdi3+0x148>
 8000b66:	2400      	movs	r4, #0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	f2c0 8096 	blt.w	8000c9a <__divdi3+0x13e>
 8000b6e:	4615      	mov	r5, r2
 8000b70:	4606      	mov	r6, r0
 8000b72:	460f      	mov	r7, r1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d13e      	bne.n	8000bf6 <__divdi3+0x9a>
 8000b78:	428a      	cmp	r2, r1
 8000b7a:	d957      	bls.n	8000c2c <__divdi3+0xd0>
 8000b7c:	fab2 f382 	clz	r3, r2
 8000b80:	b14b      	cbz	r3, 8000b96 <__divdi3+0x3a>
 8000b82:	f1c3 0220 	rsb	r2, r3, #32
 8000b86:	fa01 f703 	lsl.w	r7, r1, r3
 8000b8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8e:	409d      	lsls	r5, r3
 8000b90:	4317      	orrs	r7, r2
 8000b92:	fa00 f603 	lsl.w	r6, r0, r3
 8000b96:	0c29      	lsrs	r1, r5, #16
 8000b98:	fbb7 f2f1 	udiv	r2, r7, r1
 8000b9c:	0c33      	lsrs	r3, r6, #16
 8000b9e:	fb01 7c12 	mls	ip, r1, r2, r7
 8000ba2:	b2a8      	uxth	r0, r5
 8000ba4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8000ba8:	fb00 f302 	mul.w	r3, r0, r2
 8000bac:	42bb      	cmp	r3, r7
 8000bae:	d909      	bls.n	8000bc4 <__divdi3+0x68>
 8000bb0:	197f      	adds	r7, r7, r5
 8000bb2:	f102 3cff 	add.w	ip, r2, #4294967295
 8000bb6:	f080 8101 	bcs.w	8000dbc <__divdi3+0x260>
 8000bba:	42bb      	cmp	r3, r7
 8000bbc:	f240 80fe 	bls.w	8000dbc <__divdi3+0x260>
 8000bc0:	3a02      	subs	r2, #2
 8000bc2:	442f      	add	r7, r5
 8000bc4:	1aff      	subs	r7, r7, r3
 8000bc6:	fbb7 f3f1 	udiv	r3, r7, r1
 8000bca:	b2b6      	uxth	r6, r6
 8000bcc:	fb01 7113 	mls	r1, r1, r3, r7
 8000bd0:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000bd4:	fb00 f003 	mul.w	r0, r0, r3
 8000bd8:	4288      	cmp	r0, r1
 8000bda:	d908      	bls.n	8000bee <__divdi3+0x92>
 8000bdc:	1949      	adds	r1, r1, r5
 8000bde:	f103 37ff 	add.w	r7, r3, #4294967295
 8000be2:	f080 80ed 	bcs.w	8000dc0 <__divdi3+0x264>
 8000be6:	4288      	cmp	r0, r1
 8000be8:	f240 80ea 	bls.w	8000dc0 <__divdi3+0x264>
 8000bec:	3b02      	subs	r3, #2
 8000bee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e003      	b.n	8000bfe <__divdi3+0xa2>
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d90a      	bls.n	8000c10 <__divdi3+0xb4>
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4610      	mov	r0, r2
 8000c00:	4619      	mov	r1, r3
 8000c02:	b114      	cbz	r4, 8000c0a <__divdi3+0xae>
 8000c04:	4240      	negs	r0, r0
 8000c06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c0e:	4770      	bx	lr
 8000c10:	fab3 f883 	clz	r8, r3
 8000c14:	f1b8 0f00 	cmp.w	r8, #0
 8000c18:	f040 8084 	bne.w	8000d24 <__divdi3+0x1c8>
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d302      	bcc.n	8000c26 <__divdi3+0xca>
 8000c20:	4282      	cmp	r2, r0
 8000c22:	f200 80de 	bhi.w	8000de2 <__divdi3+0x286>
 8000c26:	2300      	movs	r3, #0
 8000c28:	2201      	movs	r2, #1
 8000c2a:	e7e8      	b.n	8000bfe <__divdi3+0xa2>
 8000c2c:	b912      	cbnz	r2, 8000c34 <__divdi3+0xd8>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	fbb3 f5f2 	udiv	r5, r3, r2
 8000c34:	fab5 f285 	clz	r2, r5
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	d139      	bne.n	8000cb0 <__divdi3+0x154>
 8000c3c:	1b7f      	subs	r7, r7, r5
 8000c3e:	0c28      	lsrs	r0, r5, #16
 8000c40:	fa1f fc85 	uxth.w	ip, r5
 8000c44:	2301      	movs	r3, #1
 8000c46:	fbb7 f1f0 	udiv	r1, r7, r0
 8000c4a:	0c32      	lsrs	r2, r6, #16
 8000c4c:	fb00 7711 	mls	r7, r0, r1, r7
 8000c50:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c54:	fb0c f201 	mul.w	r2, ip, r1
 8000c58:	42ba      	cmp	r2, r7
 8000c5a:	d907      	bls.n	8000c6c <__divdi3+0x110>
 8000c5c:	197f      	adds	r7, r7, r5
 8000c5e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__divdi3+0x10e>
 8000c64:	42ba      	cmp	r2, r7
 8000c66:	f200 80c1 	bhi.w	8000dec <__divdi3+0x290>
 8000c6a:	4641      	mov	r1, r8
 8000c6c:	1abf      	subs	r7, r7, r2
 8000c6e:	fbb7 f2f0 	udiv	r2, r7, r0
 8000c72:	b2b6      	uxth	r6, r6
 8000c74:	fb00 7012 	mls	r0, r0, r2, r7
 8000c78:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8000c7c:	fb0c fc02 	mul.w	ip, ip, r2
 8000c80:	4584      	cmp	ip, r0
 8000c82:	d907      	bls.n	8000c94 <__divdi3+0x138>
 8000c84:	1940      	adds	r0, r0, r5
 8000c86:	f102 37ff 	add.w	r7, r2, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__divdi3+0x136>
 8000c8c:	4584      	cmp	ip, r0
 8000c8e:	f200 80ab 	bhi.w	8000de8 <__divdi3+0x28c>
 8000c92:	463a      	mov	r2, r7
 8000c94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c98:	e7b1      	b.n	8000bfe <__divdi3+0xa2>
 8000c9a:	43e4      	mvns	r4, r4
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca2:	e764      	b.n	8000b6e <__divdi3+0x12>
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000caa:	f04f 34ff 	mov.w	r4, #4294967295
 8000cae:	e75b      	b.n	8000b68 <__divdi3+0xc>
 8000cb0:	4095      	lsls	r5, r2
 8000cb2:	f1c2 0320 	rsb	r3, r2, #32
 8000cb6:	fa27 f103 	lsr.w	r1, r7, r3
 8000cba:	0c28      	lsrs	r0, r5, #16
 8000cbc:	fa26 f303 	lsr.w	r3, r6, r3
 8000cc0:	4097      	lsls	r7, r2
 8000cc2:	fbb1 f8f0 	udiv	r8, r1, r0
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fb00 1118 	mls	r1, r0, r8, r1
 8000cce:	fa1f fc85 	uxth.w	ip, r5
 8000cd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cd6:	fb0c f308 	mul.w	r3, ip, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa06 f602 	lsl.w	r6, r6, r2
 8000ce0:	d908      	bls.n	8000cf4 <__divdi3+0x198>
 8000ce2:	1949      	adds	r1, r1, r5
 8000ce4:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ce8:	d279      	bcs.n	8000dde <__divdi3+0x282>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d977      	bls.n	8000dde <__divdi3+0x282>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4429      	add	r1, r5
 8000cf4:	1ac9      	subs	r1, r1, r3
 8000cf6:	fbb1 f3f0 	udiv	r3, r1, r0
 8000cfa:	b2bf      	uxth	r7, r7
 8000cfc:	fb00 1113 	mls	r1, r0, r3, r1
 8000d00:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d04:	fb0c f203 	mul.w	r2, ip, r3
 8000d08:	42ba      	cmp	r2, r7
 8000d0a:	d907      	bls.n	8000d1c <__divdi3+0x1c0>
 8000d0c:	197f      	adds	r7, r7, r5
 8000d0e:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d12:	d260      	bcs.n	8000dd6 <__divdi3+0x27a>
 8000d14:	42ba      	cmp	r2, r7
 8000d16:	d95e      	bls.n	8000dd6 <__divdi3+0x27a>
 8000d18:	3b02      	subs	r3, #2
 8000d1a:	442f      	add	r7, r5
 8000d1c:	1abf      	subs	r7, r7, r2
 8000d1e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d22:	e790      	b.n	8000c46 <__divdi3+0xea>
 8000d24:	f1c8 0220 	rsb	r2, r8, #32
 8000d28:	fa03 fc08 	lsl.w	ip, r3, r8
 8000d2c:	fa25 f302 	lsr.w	r3, r5, r2
 8000d30:	ea43 0c0c 	orr.w	ip, r3, ip
 8000d34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d38:	fa21 f302 	lsr.w	r3, r1, r2
 8000d3c:	fa01 f708 	lsl.w	r7, r1, r8
 8000d40:	fa20 f202 	lsr.w	r2, r0, r2
 8000d44:	fbb3 f1f9 	udiv	r1, r3, r9
 8000d48:	4317      	orrs	r7, r2
 8000d4a:	fb09 3311 	mls	r3, r9, r1, r3
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa1f fb8c 	uxth.w	fp, ip
 8000d54:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d58:	fb0b fa01 	mul.w	sl, fp, r1
 8000d5c:	459a      	cmp	sl, r3
 8000d5e:	fa05 f008 	lsl.w	r0, r5, r8
 8000d62:	d908      	bls.n	8000d76 <__divdi3+0x21a>
 8000d64:	eb13 030c 	adds.w	r3, r3, ip
 8000d68:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d6c:	d235      	bcs.n	8000dda <__divdi3+0x27e>
 8000d6e:	459a      	cmp	sl, r3
 8000d70:	d933      	bls.n	8000dda <__divdi3+0x27e>
 8000d72:	3902      	subs	r1, #2
 8000d74:	4463      	add	r3, ip
 8000d76:	ebca 0303 	rsb	r3, sl, r3
 8000d7a:	fbb3 f2f9 	udiv	r2, r3, r9
 8000d7e:	fb09 3312 	mls	r3, r9, r2, r3
 8000d82:	b2bf      	uxth	r7, r7
 8000d84:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000d88:	fb0b f902 	mul.w	r9, fp, r2
 8000d8c:	45b9      	cmp	r9, r7
 8000d8e:	d908      	bls.n	8000da2 <__divdi3+0x246>
 8000d90:	eb17 070c 	adds.w	r7, r7, ip
 8000d94:	f102 33ff 	add.w	r3, r2, #4294967295
 8000d98:	d21b      	bcs.n	8000dd2 <__divdi3+0x276>
 8000d9a:	45b9      	cmp	r9, r7
 8000d9c:	d919      	bls.n	8000dd2 <__divdi3+0x276>
 8000d9e:	3a02      	subs	r2, #2
 8000da0:	4467      	add	r7, ip
 8000da2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8000da6:	fba5 0100 	umull	r0, r1, r5, r0
 8000daa:	ebc9 0707 	rsb	r7, r9, r7
 8000dae:	428f      	cmp	r7, r1
 8000db0:	f04f 0300 	mov.w	r3, #0
 8000db4:	d30a      	bcc.n	8000dcc <__divdi3+0x270>
 8000db6:	d005      	beq.n	8000dc4 <__divdi3+0x268>
 8000db8:	462a      	mov	r2, r5
 8000dba:	e720      	b.n	8000bfe <__divdi3+0xa2>
 8000dbc:	4662      	mov	r2, ip
 8000dbe:	e701      	b.n	8000bc4 <__divdi3+0x68>
 8000dc0:	463b      	mov	r3, r7
 8000dc2:	e714      	b.n	8000bee <__divdi3+0x92>
 8000dc4:	fa06 f608 	lsl.w	r6, r6, r8
 8000dc8:	4286      	cmp	r6, r0
 8000dca:	d2f5      	bcs.n	8000db8 <__divdi3+0x25c>
 8000dcc:	1e6a      	subs	r2, r5, #1
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e715      	b.n	8000bfe <__divdi3+0xa2>
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	e7e5      	b.n	8000da2 <__divdi3+0x246>
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	e7a0      	b.n	8000d1c <__divdi3+0x1c0>
 8000dda:	4611      	mov	r1, r2
 8000ddc:	e7cb      	b.n	8000d76 <__divdi3+0x21a>
 8000dde:	4690      	mov	r8, r2
 8000de0:	e788      	b.n	8000cf4 <__divdi3+0x198>
 8000de2:	4643      	mov	r3, r8
 8000de4:	4642      	mov	r2, r8
 8000de6:	e70a      	b.n	8000bfe <__divdi3+0xa2>
 8000de8:	3a02      	subs	r2, #2
 8000dea:	e753      	b.n	8000c94 <__divdi3+0x138>
 8000dec:	3902      	subs	r1, #2
 8000dee:	442f      	add	r7, r5
 8000df0:	e73c      	b.n	8000c6c <__divdi3+0x110>
 8000df2:	bf00      	nop

08000df4 <__udivdi3>:
 8000df4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000df8:	4614      	mov	r4, r2
 8000dfa:	4605      	mov	r5, r0
 8000dfc:	460e      	mov	r6, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d143      	bne.n	8000e8a <__udivdi3+0x96>
 8000e02:	428a      	cmp	r2, r1
 8000e04:	d953      	bls.n	8000eae <__udivdi3+0xba>
 8000e06:	fab2 f782 	clz	r7, r2
 8000e0a:	b157      	cbz	r7, 8000e22 <__udivdi3+0x2e>
 8000e0c:	f1c7 0620 	rsb	r6, r7, #32
 8000e10:	fa20 f606 	lsr.w	r6, r0, r6
 8000e14:	fa01 f307 	lsl.w	r3, r1, r7
 8000e18:	fa02 f407 	lsl.w	r4, r2, r7
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	fa00 f507 	lsl.w	r5, r0, r7
 8000e22:	0c21      	lsrs	r1, r4, #16
 8000e24:	fbb6 f2f1 	udiv	r2, r6, r1
 8000e28:	0c2b      	lsrs	r3, r5, #16
 8000e2a:	fb01 6712 	mls	r7, r1, r2, r6
 8000e2e:	b2a0      	uxth	r0, r4
 8000e30:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8000e34:	fb00 f302 	mul.w	r3, r0, r2
 8000e38:	42b3      	cmp	r3, r6
 8000e3a:	d909      	bls.n	8000e50 <__udivdi3+0x5c>
 8000e3c:	1936      	adds	r6, r6, r4
 8000e3e:	f102 37ff 	add.w	r7, r2, #4294967295
 8000e42:	f080 80f6 	bcs.w	8001032 <__udivdi3+0x23e>
 8000e46:	42b3      	cmp	r3, r6
 8000e48:	f240 80f3 	bls.w	8001032 <__udivdi3+0x23e>
 8000e4c:	3a02      	subs	r2, #2
 8000e4e:	4426      	add	r6, r4
 8000e50:	1af6      	subs	r6, r6, r3
 8000e52:	fbb6 f3f1 	udiv	r3, r6, r1
 8000e56:	b2ad      	uxth	r5, r5
 8000e58:	fb01 6113 	mls	r1, r1, r3, r6
 8000e5c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000e60:	fb00 f003 	mul.w	r0, r0, r3
 8000e64:	4288      	cmp	r0, r1
 8000e66:	d908      	bls.n	8000e7a <__udivdi3+0x86>
 8000e68:	1909      	adds	r1, r1, r4
 8000e6a:	f103 36ff 	add.w	r6, r3, #4294967295
 8000e6e:	f080 80e2 	bcs.w	8001036 <__udivdi3+0x242>
 8000e72:	4288      	cmp	r0, r1
 8000e74:	f240 80df 	bls.w	8001036 <__udivdi3+0x242>
 8000e78:	3b02      	subs	r3, #2
 8000e7a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000e7e:	2300      	movs	r3, #0
 8000e80:	4610      	mov	r0, r2
 8000e82:	4619      	mov	r1, r3
 8000e84:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e88:	4770      	bx	lr
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d84a      	bhi.n	8000f24 <__udivdi3+0x130>
 8000e8e:	fab3 f683 	clz	r6, r3
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d14d      	bne.n	8000f32 <__udivdi3+0x13e>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d302      	bcc.n	8000ea0 <__udivdi3+0xac>
 8000e9a:	4282      	cmp	r2, r0
 8000e9c:	f200 80d6 	bhi.w	800104c <__udivdi3+0x258>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000eac:	4770      	bx	lr
 8000eae:	b912      	cbnz	r2, 8000eb6 <__udivdi3+0xc2>
 8000eb0:	2401      	movs	r4, #1
 8000eb2:	fbb4 f4f2 	udiv	r4, r4, r2
 8000eb6:	fab4 f284 	clz	r2, r4
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	d17c      	bne.n	8000fb8 <__udivdi3+0x1c4>
 8000ebe:	1b09      	subs	r1, r1, r4
 8000ec0:	0c26      	lsrs	r6, r4, #16
 8000ec2:	b2a7      	uxth	r7, r4
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	fbb1 f0f6 	udiv	r0, r1, r6
 8000eca:	0c2a      	lsrs	r2, r5, #16
 8000ecc:	fb06 1110 	mls	r1, r6, r0, r1
 8000ed0:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000ed4:	fb07 f200 	mul.w	r2, r7, r0
 8000ed8:	428a      	cmp	r2, r1
 8000eda:	d907      	bls.n	8000eec <__udivdi3+0xf8>
 8000edc:	1909      	adds	r1, r1, r4
 8000ede:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ee2:	d202      	bcs.n	8000eea <__udivdi3+0xf6>
 8000ee4:	428a      	cmp	r2, r1
 8000ee6:	f200 80c3 	bhi.w	8001070 <__udivdi3+0x27c>
 8000eea:	4660      	mov	r0, ip
 8000eec:	1a89      	subs	r1, r1, r2
 8000eee:	fbb1 f2f6 	udiv	r2, r1, r6
 8000ef2:	b2ad      	uxth	r5, r5
 8000ef4:	fb06 1112 	mls	r1, r6, r2, r1
 8000ef8:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000efc:	fb07 f702 	mul.w	r7, r7, r2
 8000f00:	42af      	cmp	r7, r5
 8000f02:	d908      	bls.n	8000f16 <__udivdi3+0x122>
 8000f04:	192c      	adds	r4, r5, r4
 8000f06:	f102 31ff 	add.w	r1, r2, #4294967295
 8000f0a:	f080 8096 	bcs.w	800103a <__udivdi3+0x246>
 8000f0e:	42a7      	cmp	r7, r4
 8000f10:	f240 8093 	bls.w	800103a <__udivdi3+0x246>
 8000f14:	3a02      	subs	r2, #2
 8000f16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f1a:	4610      	mov	r0, r2
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f22:	4770      	bx	lr
 8000f24:	2300      	movs	r3, #0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f30:	4770      	bx	lr
 8000f32:	f1c6 0520 	rsb	r5, r6, #32
 8000f36:	fa22 f405 	lsr.w	r4, r2, r5
 8000f3a:	40b3      	lsls	r3, r6
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000f42:	fa21 f305 	lsr.w	r3, r1, r5
 8000f46:	fa01 f706 	lsl.w	r7, r1, r6
 8000f4a:	fa20 f505 	lsr.w	r5, r0, r5
 8000f4e:	fbb3 fcf8 	udiv	ip, r3, r8
 8000f52:	432f      	orrs	r7, r5
 8000f54:	fb08 331c 	mls	r3, r8, ip, r3
 8000f58:	0c3d      	lsrs	r5, r7, #16
 8000f5a:	fa1f fa84 	uxth.w	sl, r4
 8000f5e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8000f62:	fb0a f90c 	mul.w	r9, sl, ip
 8000f66:	4599      	cmp	r9, r3
 8000f68:	fa02 fb06 	lsl.w	fp, r2, r6
 8000f6c:	d904      	bls.n	8000f78 <__udivdi3+0x184>
 8000f6e:	191b      	adds	r3, r3, r4
 8000f70:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000f74:	d36d      	bcc.n	8001052 <__udivdi3+0x25e>
 8000f76:	4694      	mov	ip, r2
 8000f78:	ebc9 0303 	rsb	r3, r9, r3
 8000f7c:	fbb3 f5f8 	udiv	r5, r3, r8
 8000f80:	fb08 3315 	mls	r3, r8, r5, r3
 8000f84:	b2bf      	uxth	r7, r7
 8000f86:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000f8a:	fb0a f805 	mul.w	r8, sl, r5
 8000f8e:	45b8      	cmp	r8, r7
 8000f90:	d904      	bls.n	8000f9c <__udivdi3+0x1a8>
 8000f92:	193f      	adds	r7, r7, r4
 8000f94:	f105 33ff 	add.w	r3, r5, #4294967295
 8000f98:	d361      	bcc.n	800105e <__udivdi3+0x26a>
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8000fa0:	fbac 230b 	umull	r2, r3, ip, fp
 8000fa4:	ebc8 0707 	rsb	r7, r8, r7
 8000fa8:	429f      	cmp	r7, r3
 8000faa:	f04f 0500 	mov.w	r5, #0
 8000fae:	d349      	bcc.n	8001044 <__udivdi3+0x250>
 8000fb0:	d045      	beq.n	800103e <__udivdi3+0x24a>
 8000fb2:	4662      	mov	r2, ip
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e763      	b.n	8000e80 <__udivdi3+0x8c>
 8000fb8:	4094      	lsls	r4, r2
 8000fba:	f1c2 0320 	rsb	r3, r2, #32
 8000fbe:	fa21 fc03 	lsr.w	ip, r1, r3
 8000fc2:	0c26      	lsrs	r6, r4, #16
 8000fc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000fc8:	fa01 f502 	lsl.w	r5, r1, r2
 8000fcc:	fbbc f8f6 	udiv	r8, ip, r6
 8000fd0:	ea43 0105 	orr.w	r1, r3, r5
 8000fd4:	0c0b      	lsrs	r3, r1, #16
 8000fd6:	fb06 cc18 	mls	ip, r6, r8, ip
 8000fda:	b2a7      	uxth	r7, r4
 8000fdc:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8000fe0:	fb07 f308 	mul.w	r3, r7, r8
 8000fe4:	4563      	cmp	r3, ip
 8000fe6:	fa00 f502 	lsl.w	r5, r0, r2
 8000fea:	d909      	bls.n	8001000 <__udivdi3+0x20c>
 8000fec:	eb1c 0c04 	adds.w	ip, ip, r4
 8000ff0:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ff4:	d23a      	bcs.n	800106c <__udivdi3+0x278>
 8000ff6:	4563      	cmp	r3, ip
 8000ff8:	d938      	bls.n	800106c <__udivdi3+0x278>
 8000ffa:	f1a8 0802 	sub.w	r8, r8, #2
 8000ffe:	44a4      	add	ip, r4
 8001000:	ebc3 0c0c 	rsb	ip, r3, ip
 8001004:	fbbc f3f6 	udiv	r3, ip, r6
 8001008:	b289      	uxth	r1, r1
 800100a:	fb06 cc13 	mls	ip, r6, r3, ip
 800100e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001012:	fb07 f203 	mul.w	r2, r7, r3
 8001016:	428a      	cmp	r2, r1
 8001018:	d907      	bls.n	800102a <__udivdi3+0x236>
 800101a:	1909      	adds	r1, r1, r4
 800101c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001020:	d222      	bcs.n	8001068 <__udivdi3+0x274>
 8001022:	428a      	cmp	r2, r1
 8001024:	d920      	bls.n	8001068 <__udivdi3+0x274>
 8001026:	3b02      	subs	r3, #2
 8001028:	4421      	add	r1, r4
 800102a:	1a89      	subs	r1, r1, r2
 800102c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001030:	e749      	b.n	8000ec6 <__udivdi3+0xd2>
 8001032:	463a      	mov	r2, r7
 8001034:	e70c      	b.n	8000e50 <__udivdi3+0x5c>
 8001036:	4633      	mov	r3, r6
 8001038:	e71f      	b.n	8000e7a <__udivdi3+0x86>
 800103a:	460a      	mov	r2, r1
 800103c:	e76b      	b.n	8000f16 <__udivdi3+0x122>
 800103e:	40b0      	lsls	r0, r6
 8001040:	4290      	cmp	r0, r2
 8001042:	d2b6      	bcs.n	8000fb2 <__udivdi3+0x1be>
 8001044:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001048:	2300      	movs	r3, #0
 800104a:	e719      	b.n	8000e80 <__udivdi3+0x8c>
 800104c:	4633      	mov	r3, r6
 800104e:	4632      	mov	r2, r6
 8001050:	e716      	b.n	8000e80 <__udivdi3+0x8c>
 8001052:	4599      	cmp	r9, r3
 8001054:	d98f      	bls.n	8000f76 <__udivdi3+0x182>
 8001056:	f1ac 0c02 	sub.w	ip, ip, #2
 800105a:	4423      	add	r3, r4
 800105c:	e78c      	b.n	8000f78 <__udivdi3+0x184>
 800105e:	45b8      	cmp	r8, r7
 8001060:	d99b      	bls.n	8000f9a <__udivdi3+0x1a6>
 8001062:	3d02      	subs	r5, #2
 8001064:	4427      	add	r7, r4
 8001066:	e799      	b.n	8000f9c <__udivdi3+0x1a8>
 8001068:	4603      	mov	r3, r0
 800106a:	e7de      	b.n	800102a <__udivdi3+0x236>
 800106c:	4690      	mov	r8, r2
 800106e:	e7c7      	b.n	8001000 <__udivdi3+0x20c>
 8001070:	3802      	subs	r0, #2
 8001072:	4421      	add	r1, r4
 8001074:	e73a      	b.n	8000eec <__udivdi3+0xf8>
 8001076:	bf00      	nop

08001078 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8001078:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 800107a:	6040      	str	r0, [r0, #4]
 800107c:	4770      	bx	lr

0800107e <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
  uint8_t return_value;
   
  if(listHead->next == listHead)
 800107e:	6803      	ldr	r3, [r0, #0]
  else
  {
    return_value = 0;
  }
  return return_value;
}
 8001080:	1a1b      	subs	r3, r3, r0
 8001082:	4258      	negs	r0, r3
 8001084:	4158      	adcs	r0, r3
 8001086:	4770      	bx	lr

08001088 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
  node->next = listHead->next;
 8001088:	6803      	ldr	r3, [r0, #0]
 800108a:	600b      	str	r3, [r1, #0]
  node->prev = listHead;
 800108c:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800108e:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8001090:	680b      	ldr	r3, [r1, #0]
 8001092:	6059      	str	r1, [r3, #4]
 8001094:	4770      	bx	lr

08001096 <list_insert_tail>:
}

void list_insert_tail (tListNode * listHead, tListNode * node)
{
  node->next = listHead;
  node->prev = listHead->prev;
 8001096:	6843      	ldr	r3, [r0, #4]
 8001098:	604b      	str	r3, [r1, #4]
  (node->next)->prev = node;
}

void list_insert_tail (tListNode * listHead, tListNode * node)
{
  node->next = listHead;
 800109a:	6008      	str	r0, [r1, #0]
  node->prev = listHead->prev;
  listHead->prev = node;
 800109c:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 800109e:	684b      	ldr	r3, [r1, #4]
 80010a0:	6019      	str	r1, [r3, #0]
 80010a2:	4770      	bx	lr

080010a4 <list_remove_node>:
}

void list_remove_node (tListNode * node)
{
  (node->prev)->next = node->next;
 80010a4:	e890 000c 	ldmia.w	r0, {r2, r3}
 80010a8:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80010aa:	6802      	ldr	r2, [r0, #0]
 80010ac:	6053      	str	r3, [r2, #4]
 80010ae:	4770      	bx	lr

080010b0 <list_remove_head>:
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
  *node = listHead->next;
 80010b0:	6803      	ldr	r3, [r0, #0]
 80010b2:	600b      	str	r3, [r1, #0]
  (node->prev)->next = node->next;
  (node->next)->prev = node->prev;
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 80010b4:	b510      	push	{r4, lr}
 80010b6:	460c      	mov	r4, r1
  *node = listHead->next;
  list_remove_node (listHead->next);
 80010b8:	6800      	ldr	r0, [r0, #0]
 80010ba:	f7ff fff3 	bl	80010a4 <list_remove_node>
  (*node)->next = NULL;
 80010be:	6822      	ldr	r2, [r4, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 80010c4:	6822      	ldr	r2, [r4, #0]
 80010c6:	6053      	str	r3, [r2, #4]
 80010c8:	bd10      	pop	{r4, pc}

080010ca <list_remove_tail>:
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
  *node = listHead->prev;
 80010ca:	6843      	ldr	r3, [r0, #4]
 80010cc:	600b      	str	r3, [r1, #0]
  (*node)->next = NULL;
  (*node)->prev = NULL;
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 80010ce:	b510      	push	{r4, lr}
 80010d0:	460c      	mov	r4, r1
  *node = listHead->prev;
  list_remove_node (listHead->prev);
 80010d2:	6840      	ldr	r0, [r0, #4]
 80010d4:	f7ff ffe6 	bl	80010a4 <list_remove_node>
  (*node)->next = NULL;
 80010d8:	6822      	ldr	r2, [r4, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 80010de:	6822      	ldr	r2, [r4, #0]
 80010e0:	6053      	str	r3, [r2, #4]
 80010e2:	bd10      	pop	{r4, pc}

080010e4 <list_get_size>:
int list_get_size (tListNode * listHead)
{
  int size = 0;
  tListNode * temp;

  temp = listHead->next;
 80010e4:	6802      	ldr	r2, [r0, #0]
  (node->prev)->next = node;
}

int list_get_size (tListNode * listHead)
{
  int size = 0;
 80010e6:	2300      	movs	r3, #0
  tListNode * temp;

  temp = listHead->next;
  while (temp != listHead)
 80010e8:	4282      	cmp	r2, r0
 80010ea:	d002      	beq.n	80010f2 <list_get_size+0xe>
  {
    size++;
 80010ec:	3301      	adds	r3, #1
    temp = temp->next;		
 80010ee:	6812      	ldr	r2, [r2, #0]
 80010f0:	e7fa      	b.n	80010e8 <list_get_size+0x4>
  }
  return (size);
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	4770      	bx	lr
	...

080010f8 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 80010f8:	b513      	push	{r0, r1, r4, lr}
 80010fa:	4604      	mov	r4, r0
{
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80010fc:	4620      	mov	r0, r4
 80010fe:	f7ff ffbe 	bl	800107e <list_is_empty>
 8001102:	b940      	cbnz	r0, 8001116 <move_list.constprop.0+0x1e>
  {
    list_remove_tail(src_list, &tmp_node);
 8001104:	4620      	mov	r0, r4
 8001106:	a901      	add	r1, sp, #4
 8001108:	f7ff ffdf 	bl	80010ca <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <move_list.constprop.0+0x24>)
 800110e:	9901      	ldr	r1, [sp, #4]
 8001110:	f7ff ffba 	bl	8001088 <list_insert_head>
 8001114:	e7f2      	b.n	80010fc <move_list.constprop.0+0x4>
  }
}
 8001116:	b002      	add	sp, #8
 8001118:	bd10      	pop	{r4, pc}
 800111a:	bf00      	nop
 800111c:	200009bc 	.word	0x200009bc

08001120 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	4d0f      	ldr	r5, [pc, #60]	; (8001160 <hci_init+0x40>)
  uint8_t index;
  
  if(UserEvtRx != NULL)
 8001124:	b100      	cbz	r0, 8001128 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8001126:	61e8      	str	r0, [r5, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8001128:	f002 fab6 	bl	8003698 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <hci_init+0x44>)
 800112e:	f7ff ffa3 	bl	8001078 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8001132:	480d      	ldr	r0, [pc, #52]	; (8001168 <hci_init+0x48>)
 8001134:	f7ff ffa0 	bl	8001078 <list_init_head>
 8001138:	2400      	movs	r4, #0
 800113a:	4e09      	ldr	r6, [pc, #36]	; (8001160 <hci_init+0x40>)
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800113c:	4809      	ldr	r0, [pc, #36]	; (8001164 <hci_init+0x44>)
 800113e:	f106 0120 	add.w	r1, r6, #32
 8001142:	4421      	add	r1, r4
 8001144:	348c      	adds	r4, #140	; 0x8c
 8001146:	f7ff ffa6 	bl	8001096 <list_insert_tail>
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800114a:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 800114e:	d1f4      	bne.n	800113a <hci_init+0x1a>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8001150:	6833      	ldr	r3, [r6, #0]
 8001152:	b10b      	cbz	r3, 8001158 <hci_init+0x38>
 8001154:	2000      	movs	r0, #0
 8001156:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8001158:	68ab      	ldr	r3, [r5, #8]
 800115a:	b103      	cbz	r3, 800115e <hci_init+0x3e>
 800115c:	4798      	blx	r3
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	20000590 	.word	0x20000590
 8001164:	200009b4 	.word	0x200009b4
 8001168:	200009bc 	.word	0x200009bc

0800116c <hci_register_io_bus>:
}

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <hci_register_io_bus+0x18>)
 800116e:	6802      	ldr	r2, [r0, #0]
 8001170:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 8001172:	68c2      	ldr	r2, [r0, #12]
 8001174:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 8001176:	6902      	ldr	r2, [r0, #16]
 8001178:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 800117a:	6982      	ldr	r2, [r0, #24]
 800117c:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 800117e:	6882      	ldr	r2, [r0, #8]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	4770      	bx	lr
 8001184:	20000590 	.word	0x20000590

08001188 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 8001188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118c:	b0a4      	sub	sp, #144	; 0x90
 800118e:	4604      	mov	r4, r0
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8001190:	8847      	ldrh	r7, [r0, #2]
 8001192:	8806      	ldrh	r6, [r0, #0]
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8001194:	2300      	movs	r3, #0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8001196:	a802      	add	r0, sp, #8
  hciContext.io.GetTick = fops->GetTick;
  hciContext.io.Reset   = fops->Reset;    
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 8001198:	4688      	mov	r8, r1
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 800119a:	9301      	str	r3, [sp, #4]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800119c:	f7ff ff6c 	bl	8001078 <list_init_head>
  */
static void free_event_list(void)
{
  tHciDataPacket * pckt;
  
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80011a0:	4856      	ldr	r0, [pc, #344]	; (80012fc <hci_send_req+0x174>)
 80011a2:	f7ff ff9f 	bl	80010e4 <list_get_size>
 80011a6:	2801      	cmp	r0, #1
 80011a8:	dc08      	bgt.n	80011bc <hci_send_req+0x34>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80011aa:	a904      	add	r1, sp, #16
 80011ac:	4854      	ldr	r0, [pc, #336]	; (8001300 <hci_send_req+0x178>)
 80011ae:	f7ff ff7f 	bl	80010b0 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80011b2:	4852      	ldr	r0, [pc, #328]	; (80012fc <hci_send_req+0x174>)
 80011b4:	9904      	ldr	r1, [sp, #16]
 80011b6:	f7ff ff6e 	bl	8001096 <list_insert_tail>
 80011ba:	e7f1      	b.n	80011a0 <hci_send_req+0x18>
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80011bc:	8862      	ldrh	r2, [r4, #2]
 80011be:	8821      	ldrh	r1, [r4, #0]
  
  list_init_head(&hciTempQueue);

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80011c0:	7b25      	ldrb	r5, [r4, #12]
 80011c2:	68a3      	ldr	r3, [r4, #8]
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
  hc.plen = plen;

  payload[0] = HCI_COMMAND_PKT;
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80011c4:	f88d 5013 	strb.w	r5, [sp, #19]
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80011c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
  hc.plen = plen;

  payload[0] = HCI_COMMAND_PKT;
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80011cc:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
  hc.plen = plen;

  payload[0] = HCI_COMMAND_PKT;
 80011d0:	2001      	movs	r0, #1
 80011d2:	f88d 0010 	strb.w	r0, [sp, #16]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80011d6:	f8ad 2011 	strh.w	r2, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80011da:	4619      	mov	r1, r3
 80011dc:	a805      	add	r0, sp, #20
 80011de:	462a      	mov	r2, r5
 80011e0:	f002 fc06 	bl	80039f0 <memcpy>
  
  if (hciContext.io.Send)
 80011e4:	4b47      	ldr	r3, [pc, #284]	; (8001304 <hci_send_req+0x17c>)
 80011e6:	691b      	ldr	r3, [r3, #16]
 80011e8:	b113      	cbz	r3, 80011f0 <hci_send_req+0x68>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 80011ea:	a804      	add	r0, sp, #16
 80011ec:	1d29      	adds	r1, r5, #4
 80011ee:	4798      	blx	r3

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
  
  if (async)
 80011f0:	f1b8 0f00 	cmp.w	r8, #0
 80011f4:	d17d      	bne.n	80012f2 <hci_send_req+0x16a>
}

int hci_send_req(struct hci_request* r, BOOL async)
{
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80011f6:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80011fa:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 80011fe:	b2ad      	uxth	r5, r5
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8001200:	f001 fc44 	bl	8002a8c <HAL_GetTick>
 8001204:	4606      	mov	r6, r0
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8001206:	f001 fc41 	bl	8002a8c <HAL_GetTick>
 800120a:	1b80      	subs	r0, r0, r6
 800120c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001210:	d864      	bhi.n	80012dc <hci_send_req+0x154>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8001212:	483b      	ldr	r0, [pc, #236]	; (8001300 <hci_send_req+0x178>)
 8001214:	f7ff ff33 	bl	800107e <list_is_empty>
 8001218:	2800      	cmp	r0, #0
 800121a:	d1f4      	bne.n	8001206 <hci_send_req+0x7e>
        break;
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800121c:	a901      	add	r1, sp, #4
 800121e:	4838      	ldr	r0, [pc, #224]	; (8001300 <hci_send_req+0x178>)
 8001220:	f7ff ff46 	bl	80010b0 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8001224:	9901      	ldr	r1, [sp, #4]

    if (hci_hdr->type == HCI_EVENT_PKT)
 8001226:	7a0b      	ldrb	r3, [r1, #8]
 8001228:	2b04      	cmp	r3, #4
 800122a:	d146      	bne.n	80012ba <hci_send_req+0x132>
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
    
      switch (event_pckt->evt) 
 800122c:	7a4b      	ldrb	r3, [r1, #9]
    if (hci_hdr->type == HCI_EVENT_PKT)
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800122e:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    
      switch (event_pckt->evt) 
 8001232:	2b0f      	cmp	r3, #15
    if (hci_hdr->type == HCI_EVENT_PKT)
    {
      event_pckt = (void *)(hci_hdr->data);
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8001234:	f1a0 0203 	sub.w	r2, r0, #3
    
      switch (event_pckt->evt) 
 8001238:	d008      	beq.n	800124c <hci_send_req+0xc4>
 800123a:	d802      	bhi.n	8001242 <hci_send_req+0xba>
 800123c:	2b0e      	cmp	r3, #14
 800123e:	d018      	beq.n	8001272 <hci_send_req+0xea>
 8001240:	e03b      	b.n	80012ba <hci_send_req+0x132>
 8001242:	2b10      	cmp	r3, #16
 8001244:	d04a      	beq.n	80012dc <hci_send_req+0x154>
 8001246:	2b3e      	cmp	r3, #62	; 0x3e
 8001248:	d020      	beq.n	800128c <hci_send_req+0x104>
 800124a:	e036      	b.n	80012ba <hci_send_req+0x132>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
        
        if (cs->opcode != opcode)
 800124c:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 8001250:	42ab      	cmp	r3, r5
 8001252:	d143      	bne.n	80012dc <hci_send_req+0x154>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8001254:	6863      	ldr	r3, [r4, #4]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	d003      	beq.n	8001262 <hci_send_req+0xda>
          if (cs->status) {
 800125a:	7acb      	ldrb	r3, [r1, #11]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d02c      	beq.n	80012ba <hci_send_req+0x132>
 8001260:	e03c      	b.n	80012dc <hci_send_req+0x154>
            goto failed;
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8001262:	6963      	ldr	r3, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8001264:	6920      	ldr	r0, [r4, #16]
            goto failed;
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8001266:	429a      	cmp	r2, r3
 8001268:	bf28      	it	cs
 800126a:	461a      	movcs	r2, r3
 800126c:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800126e:	310b      	adds	r1, #11
 8001270:	e019      	b.n	80012a6 <hci_send_req+0x11e>
        goto done;
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
      
        if (cc->opcode != opcode)
 8001272:	898b      	ldrh	r3, [r1, #12]
 8001274:	42ab      	cmp	r3, r5
 8001276:	d131      	bne.n	80012dc <hci_send_req+0x154>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
        len -= EVT_CMD_COMPLETE_SIZE;
      
        r->rlen = MIN(len, r->rlen);
 8001278:	6963      	ldr	r3, [r4, #20]
      
        if (cc->opcode != opcode)
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
        len -= EVT_CMD_COMPLETE_SIZE;
 800127a:	3806      	subs	r0, #6
      
        r->rlen = MIN(len, r->rlen);
 800127c:	4298      	cmp	r0, r3
 800127e:	bf34      	ite	cc
 8001280:	4602      	movcc	r2, r0
 8001282:	461a      	movcs	r2, r3
 8001284:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8001286:	6920      	ldr	r0, [r4, #16]
 8001288:	310e      	adds	r1, #14
 800128a:	e00c      	b.n	80012a6 <hci_send_req+0x11e>
        goto done;
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
      
        if (me->subevent != r->event)
 800128c:	7aca      	ldrb	r2, [r1, #11]
 800128e:	6863      	ldr	r3, [r4, #4]
 8001290:	429a      	cmp	r2, r3
 8001292:	d112      	bne.n	80012ba <hci_send_req+0x132>
          break;
      
        len -= 1;
        r->rlen = MIN(len, r->rlen);
 8001294:	6963      	ldr	r3, [r4, #20]
        me = (void *) ptr;
      
        if (me->subevent != r->event)
          break;
      
        len -= 1;
 8001296:	3804      	subs	r0, #4
        r->rlen = MIN(len, r->rlen);
 8001298:	4298      	cmp	r0, r3
 800129a:	bf34      	ite	cc
 800129c:	4602      	movcc	r2, r0
 800129e:	461a      	movcs	r2, r3
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80012a0:	6920      	ldr	r0, [r4, #16]
      
        if (me->subevent != r->event)
          break;
      
        len -= 1;
        r->rlen = MIN(len, r->rlen);
 80012a2:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80012a4:	310c      	adds	r1, #12
 80012a6:	f002 fba3 	bl	80039f0 <memcpy>
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
  return -1;
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80012aa:	4814      	ldr	r0, [pc, #80]	; (80012fc <hci_send_req+0x174>)
 80012ac:	9901      	ldr	r1, [sp, #4]
 80012ae:	f7ff feeb 	bl	8001088 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80012b2:	a802      	add	r0, sp, #8
 80012b4:	f7ff ff20 	bl	80010f8 <move_list.constprop.0>
 80012b8:	e01b      	b.n	80012f2 <hci_send_req+0x16a>
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 80012ba:	4810      	ldr	r0, [pc, #64]	; (80012fc <hci_send_req+0x174>)
 80012bc:	f7ff fedf 	bl	800107e <list_is_empty>
 80012c0:	b128      	cbz	r0, 80012ce <hci_send_req+0x146>
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <hci_send_req+0x178>)
 80012c4:	f7ff fedb 	bl	800107e <list_is_empty>
 80012c8:	b108      	cbz	r0, 80012ce <hci_send_req+0x146>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80012ca:	480c      	ldr	r0, [pc, #48]	; (80012fc <hci_send_req+0x174>)
 80012cc:	e000      	b.n	80012d0 <hci_send_req+0x148>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80012ce:	a802      	add	r0, sp, #8
 80012d0:	9901      	ldr	r1, [sp, #4]
 80012d2:	f7ff fee0 	bl	8001096 <list_insert_tail>
      hciReadPacket=NULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	e791      	b.n	8001200 <hci_send_req+0x78>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80012dc:	9901      	ldr	r1, [sp, #4]
 80012de:	b111      	cbz	r1, 80012e6 <hci_send_req+0x15e>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80012e0:	4806      	ldr	r0, [pc, #24]	; (80012fc <hci_send_req+0x174>)
 80012e2:	f7ff fed1 	bl	8001088 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 80012e6:	a802      	add	r0, sp, #8
 80012e8:	f7ff ff06 	bl	80010f8 <move_list.constprop.0>
  return -1;
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	e000      	b.n	80012f4 <hci_send_req+0x16c>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
  
  if (async)
  {
    return 0;
 80012f2:	2000      	movs	r0, #0
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 80012f4:	b024      	add	sp, #144	; 0x90
 80012f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012fa:	bf00      	nop
 80012fc:	200009b4 	.word	0x200009b4
 8001300:	200009bc 	.word	0x200009bc
 8001304:	20000590 	.word	0x20000590

08001308 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8001308:	b507      	push	{r0, r1, r2, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800130a:	2300      	movs	r3, #0
 800130c:	9301      	str	r3, [sp, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <hci_user_evt_proc+0x34>)
 8001310:	f7ff feb5 	bl	800107e <list_is_empty>
 8001314:	b970      	cbnz	r0, 8001334 <hci_user_evt_proc+0x2c>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8001316:	4809      	ldr	r0, [pc, #36]	; (800133c <hci_user_evt_proc+0x34>)
 8001318:	a901      	add	r1, sp, #4
 800131a:	f7ff fec9 	bl	80010b0 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <hci_user_evt_proc+0x38>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	b113      	cbz	r3, 800132a <hci_user_evt_proc+0x22>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8001324:	9801      	ldr	r0, [sp, #4]
 8001326:	3008      	adds	r0, #8
 8001328:	4798      	blx	r3
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <hci_user_evt_proc+0x3c>)
 800132c:	9901      	ldr	r1, [sp, #4]
 800132e:	f7ff feb2 	bl	8001096 <list_insert_tail>
 8001332:	e7ec      	b.n	800130e <hci_user_evt_proc+0x6>
  }
}
 8001334:	b003      	add	sp, #12
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
 800133a:	bf00      	nop
 800133c:	200009bc 	.word	0x200009bc
 8001340:	20000590 	.word	0x20000590
 8001344:	200009b4 	.word	0x200009b4

08001348 <hci_notify_asynch_evt>:

void hci_notify_asynch_evt(void* pdata)
{
 8001348:	b507      	push	{r0, r1, r2, lr}
  tHciDataPacket * hciReadPacket = NULL;
 800134a:	2300      	movs	r3, #0
  uint8_t data_len;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800134c:	4814      	ldr	r0, [pc, #80]	; (80013a0 <hci_notify_asynch_evt+0x58>)
  }
}

void hci_notify_asynch_evt(void* pdata)
{
  tHciDataPacket * hciReadPacket = NULL;
 800134e:	9301      	str	r3, [sp, #4]
  uint8_t data_len;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8001350:	f7ff fe95 	bl	800107e <list_is_empty>
 8001354:	bb00      	cbnz	r0, 8001398 <hci_notify_asynch_evt+0x50>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8001356:	4812      	ldr	r0, [pc, #72]	; (80013a0 <hci_notify_asynch_evt+0x58>)
 8001358:	a901      	add	r1, sp, #4
 800135a:	f7ff fea9 	bl	80010b0 <list_remove_head>
    
    if (hciContext.io.Receive)
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <hci_notify_asynch_evt+0x5c>)
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	b1cb      	cbz	r3, 8001398 <hci_notify_asynch_evt+0x50>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8001364:	9801      	ldr	r0, [sp, #4]
 8001366:	2180      	movs	r1, #128	; 0x80
 8001368:	3008      	adds	r0, #8
 800136a:	4798      	blx	r3
 800136c:	b2c0      	uxtb	r0, r0
      if (data_len > 0)
 800136e:	b168      	cbz	r0, 800138c <hci_notify_asynch_evt+0x44>
      {                    
        hciReadPacket->data_len = data_len;
 8001370:	9901      	ldr	r1, [sp, #4]
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8001372:	7a0b      	ldrb	r3, [r1, #8]
    if (hciContext.io.Receive)
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 8001374:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8001378:	2b04      	cmp	r3, #4
 800137a:	d10a      	bne.n	8001392 <hci_notify_asynch_evt+0x4a>
    return 1; /* Incorrect type */
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 800137c:	7a8b      	ldrb	r3, [r1, #10]
 800137e:	3803      	subs	r0, #3
 8001380:	4283      	cmp	r3, r0
 8001382:	d106      	bne.n	8001392 <hci_notify_asynch_evt+0x4a>
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <hci_notify_asynch_evt+0x60>)
 8001386:	f7ff fe86 	bl	8001096 <list_insert_tail>
 800138a:	e005      	b.n	8001398 <hci_notify_asynch_evt+0x50>
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 800138c:	4804      	ldr	r0, [pc, #16]	; (80013a0 <hci_notify_asynch_evt+0x58>)
 800138e:	9901      	ldr	r1, [sp, #4]
 8001390:	e000      	b.n	8001394 <hci_notify_asynch_evt+0x4c>
      {                    
        hciReadPacket->data_len = data_len;
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <hci_notify_asynch_evt+0x58>)
 8001394:	f7ff fe78 	bl	8001088 <list_insert_head>
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
      }
    }
  }
}
 8001398:	b003      	add	sp, #12
 800139a:	f85d fb04 	ldr.w	pc, [sp], #4
 800139e:	bf00      	nop
 80013a0:	200009b4 	.word	0x200009b4
 80013a4:	20000590 	.word	0x20000590
 80013a8:	200009bc 	.word	0x200009bc

080013ac <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 80013ac:	b500      	push	{lr}
 80013ae:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80013b0:	2218      	movs	r2, #24
 80013b2:	a802      	add	r0, sp, #8
 80013b4:	2100      	movs	r1, #0
 80013b6:	f002 fb24 	bl	8003a02 <memset>
  rq.ogf = OGF_HOST_CTL;
 80013ba:	2303      	movs	r3, #3
 80013bc:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 80013c0:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80013c4:	f10d 0307 	add.w	r3, sp, #7
 80013c8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80013ca:	a802      	add	r0, sp, #8
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_HOST_CTL;
  rq.ocf = OCF_RESET;
  rq.rparam = &status;
  rq.rlen = 1;
 80013cc:	2301      	movs	r3, #1
  
  if (hci_send_req(&rq, FALSE) < 0)
 80013ce:	2100      	movs	r1, #0
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_HOST_CTL;
  rq.ocf = OCF_RESET;
  rq.rparam = &status;
  rq.rlen = 1;
 80013d0:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80013d2:	f7ff fed9 	bl	8001188 <hci_send_req>
 80013d6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 80013d8:	bfac      	ite	ge
 80013da:	f89d 0007 	ldrbge.w	r0, [sp, #7]
  rq.ocf = OCF_RESET;
  rq.rparam = &status;
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 80013de:	20ff      	movlt	r0, #255	; 0xff
  
  return status;  
}
 80013e0:	b009      	add	sp, #36	; 0x24
 80013e2:	f85d fb04 	ldr.w	pc, [sp], #4

080013e6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80013e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013ea:	b08b      	sub	sp, #44	; 0x2c
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80013ec:	ad01      	add	r5, sp, #4
 80013ee:	2409      	movs	r4, #9
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80013f0:	4680      	mov	r8, r0
 80013f2:	460f      	mov	r7, r1
 80013f4:	4616      	mov	r6, r2
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80013f6:	2100      	movs	r1, #0
 80013f8:	4622      	mov	r2, r4
 80013fa:	4628      	mov	r0, r5
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80013fc:	4699      	mov	r9, r3
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80013fe:	f002 fb00 	bl	8003a02 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001402:	2100      	movs	r1, #0
 8001404:	2218      	movs	r2, #24
 8001406:	a804      	add	r0, sp, #16
 8001408:	f002 fafb 	bl	8003a02 <memset>
  rq.ogf = OGF_INFO_PARAM;
 800140c:	2304      	movs	r3, #4
 800140e:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001412:	a804      	add	r0, sp, #16
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_INFO_PARAM;
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8001414:	2301      	movs	r3, #1
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001416:	2100      	movs	r1, #0
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_INFO_PARAM;
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8001418:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
 800141c:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800141e:	9409      	str	r4, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001420:	f7ff feb2 	bl	8001188 <hci_send_req>
 8001424:	2800      	cmp	r0, #0
 8001426:	db1a      	blt.n	800145e <hci_le_read_local_version+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8001428:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800142c:	b9c0      	cbnz	r0, 8001460 <hci_le_read_local_version+0x7a>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800142e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001432:	f888 3000 	strb.w	r3, [r8]
  *hci_revision =  btohs(resp.hci_revision);
 8001436:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800143a:	803b      	strh	r3, [r7, #0]
  *lmp_pal_version = resp.lmp_pal_version;
  *manufacturer_name = btohs(resp.manufacturer_name);
 800143c:	9a02      	ldr	r2, [sp, #8]
  }
  
  
  *hci_version = resp.hci_version;
  *hci_revision =  btohs(resp.hci_revision);
  *lmp_pal_version = resp.lmp_pal_version;
 800143e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001442:	7033      	strb	r3, [r6, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8001444:	f3c2 220f 	ubfx	r2, r2, #8, #16
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8001448:	f89d 300b 	ldrb.w	r3, [sp, #11]
  
  
  *hci_version = resp.hci_version;
  *hci_revision =  btohs(resp.hci_revision);
  *lmp_pal_version = resp.lmp_pal_version;
  *manufacturer_name = btohs(resp.manufacturer_name);
 800144c:	f8a9 2000 	strh.w	r2, [r9]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8001450:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001454:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8001458:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800145a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800145c:	e000      	b.n	8001460 <hci_le_read_local_version+0x7a>
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 800145e:	20ff      	movs	r0, #255	; 0xff
  *lmp_pal_version = resp.lmp_pal_version;
  *manufacturer_name = btohs(resp.manufacturer_name);
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
  
  return 0;
}
 8001460:	b00b      	add	sp, #44	; 0x2c
 8001462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001466 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8001466:	b570      	push	{r4, r5, r6, lr}
 8001468:	b090      	sub	sp, #64	; 0x40
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 800146a:	ac08      	add	r4, sp, #32
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 800146c:	4605      	mov	r5, r0
 800146e:	460e      	mov	r6, r1
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8001470:	4620      	mov	r0, r4
 8001472:	2100      	movs	r1, #0
 8001474:	2220      	movs	r2, #32
 8001476:	f002 fac4 	bl	8003a02 <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800147a:	2d1f      	cmp	r5, #31
 800147c:	bf34      	ite	cc
 800147e:	462a      	movcc	r2, r5
 8001480:	221f      	movcs	r2, #31
 8001482:	4631      	mov	r1, r6
 8001484:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
  scan_resp_cp.length = length;
 8001488:	f88d 5020 	strb.w	r5, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800148c:	f002 fab0 	bl	80039f0 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001490:	2218      	movs	r2, #24
 8001492:	a802      	add	r0, sp, #8
 8001494:	2100      	movs	r1, #0
 8001496:	f002 fab4 	bl	8003a02 <memset>
  rq.ogf = OGF_LE_CTL;
 800149a:	2308      	movs	r3, #8
 800149c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80014a0:	2309      	movs	r3, #9
 80014a2:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80014a6:	2320      	movs	r3, #32
 80014a8:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 80014aa:	f10d 0307 	add.w	r3, sp, #7
 80014ae:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80014b0:	a802      	add	r0, sp, #8
  rq.ogf = OGF_LE_CTL;
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
  rq.rlen = 1;
 80014b2:	2301      	movs	r3, #1
  
  if (hci_send_req(&rq, FALSE) < 0)
 80014b4:	2100      	movs	r1, #0
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_LE_CTL;
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
  rq.cparam = &scan_resp_cp;
 80014b6:	9404      	str	r4, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
  rq.rlen = 1;
 80014b8:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 80014ba:	f7ff fe65 	bl	8001188 <hci_send_req>
 80014be:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 80014c0:	bfac      	ite	ge
 80014c2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 80014c6:	20ff      	movlt	r0, #255	; 0xff
  
  return status;
}
 80014c8:	b010      	add	sp, #64	; 0x40
 80014ca:	bd70      	pop	{r4, r5, r6, pc}

080014cc <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80014cc:	b530      	push	{r4, r5, lr}
 80014ce:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80014d0:	f10d 030e 	add.w	r3, sp, #14
 80014d4:	9300      	str	r3, [sp, #0]
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80014d6:	4605      	mov	r5, r0
 80014d8:	460c      	mov	r4, r1
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80014da:	a802      	add	r0, sp, #8
 80014dc:	f10d 010a 	add.w	r1, sp, #10
 80014e0:	f10d 0209 	add.w	r2, sp, #9
 80014e4:	ab03      	add	r3, sp, #12
 80014e6:	f7ff ff7e 	bl	80013e6 <hci_le_read_local_version>
 80014ea:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80014ec:	b968      	cbnz	r0, 800150a <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 80014ee:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80014f2:	0a13      	lsrs	r3, r2, #8
 80014f4:	702b      	strb	r3, [r5, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80014f6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 80014fa:	f003 010f 	and.w	r1, r3, #15
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
    *hwVersion = hci_revision >> 8;
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 80014fe:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 8001502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8001506:	4313      	orrs	r3, r2
 8001508:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 800150a:	b005      	add	sp, #20
 800150c:	bd30      	pop	{r4, r5, pc}

0800150e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800150e:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8001510:	297e      	cmp	r1, #126	; 0x7e
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8001512:	b0a8      	sub	sp, #160	; 0xa0
 8001514:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8001516:	dc27      	bgt.n	8001568 <aci_hal_write_config_data+0x5a>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = offset;
 8001518:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
    
  buffer[indx] = len;
 800151c:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8001520:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8001524:	4611      	mov	r1, r2
 8001526:	4622      	mov	r2, r4
 8001528:	f002 fa62 	bl	80039f0 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800152c:	2100      	movs	r1, #0
 800152e:	2218      	movs	r2, #24
 8001530:	a802      	add	r0, sp, #8
 8001532:	f002 fa66 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001536:	233f      	movs	r3, #63	; 0x3f
 8001538:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 800153c:	230c      	movs	r3, #12
 800153e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8001542:	ab08      	add	r3, sp, #32
 8001544:	9304      	str	r3, [sp, #16]
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
  indx +=  len;
 8001546:	3402      	adds	r4, #2
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8001548:	f10d 0307 	add.w	r3, sp, #7
 800154c:	9306      	str	r3, [sp, #24]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800154e:	b2e4      	uxtb	r4, r4
  rq.rparam = &status;
  rq.rlen = 1;
 8001550:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8001552:	a802      	add	r0, sp, #8
 8001554:	2100      	movs	r1, #0

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8001556:	9405      	str	r4, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
 8001558:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800155a:	f7ff fe15 	bl	8001188 <hci_send_req>
 800155e:	2800      	cmp	r0, #0
 8001560:	db04      	blt.n	800156c <aci_hal_write_config_data+0x5e>
    return BLE_STATUS_TIMEOUT;

  return status;
 8001562:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001566:	e002      	b.n	800156e <aci_hal_write_config_data+0x60>
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
    return BLE_STATUS_INVALID_PARAMS;
 8001568:	2042      	movs	r0, #66	; 0x42
 800156a:	e000      	b.n	800156e <aci_hal_write_config_data+0x60>
  rq.clen = indx;
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 800156c:	20ff      	movs	r0, #255	; 0xff

  return status;
}
 800156e:	b028      	add	sp, #160	; 0xa0
 8001570:	bd10      	pop	{r4, pc}

08001572 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8001572:	b500      	push	{lr}
 8001574:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001576:	2218      	movs	r2, #24
{
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8001578:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 800157c:	f88d 1005 	strb.w	r1, [sp, #5]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001580:	a802      	add	r0, sp, #8
 8001582:	2100      	movs	r1, #0
 8001584:	f002 fa3d 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001588:	233f      	movs	r3, #63	; 0x3f
 800158a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 800158e:	230f      	movs	r3, #15
 8001590:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8001594:	ab01      	add	r3, sp, #4
 8001596:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8001598:	2302      	movs	r3, #2
 800159a:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 800159c:	f10d 0303 	add.w	r3, sp, #3
 80015a0:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80015a2:	a802      	add	r0, sp, #8
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
  rq.rparam = &status;
  rq.rlen = 1;
 80015a4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80015a6:	2100      	movs	r1, #0
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
  rq.cparam = &cp;
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
  rq.rparam = &status;
  rq.rlen = 1;
 80015a8:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80015aa:	f7ff fded 	bl	8001188 <hci_send_req>
 80015ae:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80015b0:	bfac      	ite	ge
 80015b2:	f89d 0003 	ldrbge.w	r0, [sp, #3]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 80015b6:	20ff      	movlt	r0, #255	; 0xff

  return status;
}
 80015b8:	b009      	add	sp, #36	; 0x24
 80015ba:	f85d fb04 	ldr.w	pc, [sp], #4

080015be <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80015be:	b500      	push	{lr}
 80015c0:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80015c2:	2218      	movs	r2, #24
 80015c4:	a802      	add	r0, sp, #8
 80015c6:	2100      	movs	r1, #0
 80015c8:	f002 fa1b 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80015cc:	233f      	movs	r3, #63	; 0x3f
 80015ce:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 80015d2:	f240 1301 	movw	r3, #257	; 0x101
 80015d6:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 80015da:	f10d 0307 	add.w	r3, sp, #7
 80015de:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80015e0:	a802      	add	r0, sp, #8

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
  rq.rlen = 1;
 80015e2:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80015e4:	2100      	movs	r1, #0

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
  rq.rlen = 1;
 80015e6:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 80015e8:	f7ff fdce 	bl	8001188 <hci_send_req>
 80015ec:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80015ee:	bfac      	ite	ge
 80015f0:	f89d 0007 	ldrbge.w	r0, [sp, #7]
  rq.ocf = OCF_GATT_INIT;
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 80015f4:	20ff      	movlt	r0, #255	; 0xff

  return status;
}
 80015f6:	b009      	add	sp, #36	; 0x24
 80015f8:	f85d fb04 	ldr.w	pc, [sp], #4

080015fc <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 80015fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015fe:	b08d      	sub	sp, #52	; 0x34
    
  buffer[indx] = service_uuid_type;
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
 8001600:	2801      	cmp	r0, #1
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 8001602:	ae0c      	add	r6, sp, #48	; 0x30
  indx++;
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
 8001604:	bf14      	ite	ne
 8001606:	2510      	movne	r5, #16
 8001608:	2502      	moveq	r5, #2

  return status;
}

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800160a:	4614      	mov	r4, r2
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  buffer[indx] = service_uuid_type;
 800160c:	f806 0d2c 	strb.w	r0, [r6, #-44]!
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8001610:	462a      	mov	r2, r5
 8001612:	f10d 0005 	add.w	r0, sp, #5

  return status;
}

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8001616:	461f      	mov	r7, r3
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8001618:	f002 f9ea 	bl	80039f0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800161c:	ab0c      	add	r3, sp, #48	; 0x30
 800161e:	442b      	add	r3, r5
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001620:	2218      	movs	r2, #24
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8001622:	f803 4c2b 	strb.w	r4, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 8001626:	ab0c      	add	r3, sp, #48	; 0x30
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001628:	2400      	movs	r4, #0
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
  indx++;
    
  buffer[indx] = max_attr_records;
 800162a:	442b      	add	r3, r5
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800162c:	4621      	mov	r1, r4
 800162e:	a806      	add	r0, sp, #24
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
  indx++;
    
  buffer[indx] = max_attr_records;
 8001630:	f803 7c2a 	strb.w	r7, [r3, #-42]
  indx++;
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001634:	f8ad 4000 	strh.w	r4, [sp]
 8001638:	f88d 4002 	strb.w	r4, [sp, #2]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800163c:	f002 f9e1 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001640:	233f      	movs	r3, #63	; 0x3f
 8001642:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8001646:	f44f 7381 	mov.w	r3, #258	; 0x102
 800164a:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &resp;
 800164e:	eb0d 0304 	add.w	r3, sp, r4
 8001652:	930a      	str	r3, [sp, #40]	; 0x28

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8001654:	3503      	adds	r5, #3
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8001656:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8001658:	a806      	add	r0, sp, #24
 800165a:	4621      	mov	r1, r4
  BLUENRG_memset(&resp, 0, sizeof(resp));

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
 800165c:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 800165e:	9509      	str	r5, [sp, #36]	; 0x24
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8001660:	930b      	str	r3, [sp, #44]	; 0x2c

  if (hci_send_req(&rq, FALSE) < 0)
 8001662:	f7ff fd91 	bl	8001188 <hci_send_req>
 8001666:	42a0      	cmp	r0, r4
 8001668:	db08      	blt.n	800167c <aci_gatt_add_serv+0x80>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 800166a:	f89d 0000 	ldrb.w	r0, [sp]
 800166e:	b930      	cbnz	r0, 800167e <aci_gatt_add_serv+0x82>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8001670:	9b00      	ldr	r3, [sp, #0]
 8001672:	f3c3 220f 	ubfx	r2, r3, #8, #16
 8001676:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001678:	801a      	strh	r2, [r3, #0]

  return 0;
 800167a:	e000      	b.n	800167e <aci_gatt_add_serv+0x82>
  rq.clen = indx;
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 800167c:	20ff      	movs	r0, #255	; 0xff
  }
    
  *serviceHandle = btohs(resp.handle);

  return 0;
}
 800167e:	b00d      	add	sp, #52	; 0x34
 8001680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001682 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8001682:	b530      	push	{r4, r5, lr}
    
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
 8001684:	2901      	cmp	r1, #1
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8001686:	b08f      	sub	sp, #60	; 0x3c
    
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
 8001688:	bf14      	ite	ne
 800168a:	2410      	movne	r4, #16
 800168c:	2402      	moveq	r4, #2
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  serviceHandle = htobs(serviceHandle);
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 800168e:	f8ad 001c 	strh.w	r0, [sp, #28]
  indx += 2;
    
  buffer[indx] = charUuidType;
 8001692:	f88d 101e 	strb.w	r1, [sp, #30]
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8001696:	f10d 001f 	add.w	r0, sp, #31
 800169a:	4611      	mov	r1, r2
 800169c:	4622      	mov	r2, r4
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800169e:	461d      	mov	r5, r3
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80016a0:	f002 f9a6 	bl	80039f0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 80016a4:	ab0e      	add	r3, sp, #56	; 0x38
 80016a6:	4423      	add	r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 80016a8:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 80016ac:	f803 5c19 	strb.w	r5, [r3, #-25]
  indx++;
    
  buffer[indx] = charProperties;
 80016b0:	ab0e      	add	r3, sp, #56	; 0x38
 80016b2:	4423      	add	r3, r4
  indx++;
    
  buffer[indx] = isVariable;
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80016b4:	2500      	movs	r5, #0
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
  indx++;
    
  buffer[indx] = charProperties;
 80016b6:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 80016ba:	ab0e      	add	r3, sp, #56	; 0x38
 80016bc:	4423      	add	r3, r4
 80016be:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 80016c2:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 80016c6:	ab0e      	add	r3, sp, #56	; 0x38
 80016c8:	4423      	add	r3, r4
 80016ca:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 80016ce:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 80016d2:	ab0e      	add	r3, sp, #56	; 0x38
 80016d4:	4423      	add	r3, r4
 80016d6:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 80016da:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 80016de:	ab0e      	add	r3, sp, #56	; 0x38
 80016e0:	4423      	add	r3, r4
 80016e2:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 80016e6:	f803 2c14 	strb.w	r2, [r3, #-20]
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80016ea:	4629      	mov	r1, r5
 80016ec:	2218      	movs	r2, #24
 80016ee:	a801      	add	r0, sp, #4
  indx++;
    
  buffer[indx] = isVariable;
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80016f0:	f8ad 5000 	strh.w	r5, [sp]
 80016f4:	f88d 5002 	strb.w	r5, [sp, #2]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80016f8:	f002 f983 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80016fc:	233f      	movs	r3, #63	; 0x3f
 80016fe:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8001702:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001706:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 800170a:	ab07      	add	r3, sp, #28
 800170c:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
  rq.rparam = &resp;
 800170e:	eb0d 0305 	add.w	r3, sp, r5
 8001712:	9305      	str	r3, [sp, #20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8001714:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8001716:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8001718:	a801      	add	r0, sp, #4
 800171a:	4629      	mov	r1, r5

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_CHAR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800171c:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800171e:	9306      	str	r3, [sp, #24]

  if (hci_send_req(&rq, FALSE) < 0)
 8001720:	f7ff fd32 	bl	8001188 <hci_send_req>
 8001724:	42a8      	cmp	r0, r5
 8001726:	db08      	blt.n	800173a <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8001728:	f89d 0000 	ldrb.w	r0, [sp]
 800172c:	b930      	cbnz	r0, 800173c <aci_gatt_add_char+0xba>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800172e:	9b00      	ldr	r3, [sp, #0]
 8001730:	f3c3 220f 	ubfx	r2, r3, #8, #16
 8001734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001736:	801a      	strh	r2, [r3, #0]

  return 0;
 8001738:	e000      	b.n	800173c <aci_gatt_add_char+0xba>
  rq.clen = indx;
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 800173a:	20ff      	movs	r0, #255	; 0xff
  }
    
  *charHandle = btohs(resp.handle);

  return 0;
}
 800173c:	b00f      	add	sp, #60	; 0x3c
 800173e:	bd30      	pop	{r4, r5, pc}

08001740 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8001740:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8001742:	2b7a      	cmp	r3, #122	; 0x7a
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8001744:	b0a8      	sub	sp, #160	; 0xa0
 8001746:	461c      	mov	r4, r3
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8001748:	dc2c      	bgt.n	80017a4 <aci_gatt_update_char_value+0x64>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 800174a:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800174e:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 8001752:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8001756:	992a      	ldr	r1, [sp, #168]	; 0xa8
  indx += 2;
    
  buffer[indx] = charValOffset;
  indx++;
    
  buffer[indx] = charValueLen;
 8001758:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800175c:	461a      	mov	r2, r3
 800175e:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8001762:	f002 f945 	bl	80039f0 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001766:	2100      	movs	r1, #0
 8001768:	2218      	movs	r2, #24
 800176a:	a802      	add	r0, sp, #8
 800176c:	f002 f949 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001770:	233f      	movs	r3, #63	; 0x3f
 8001772:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8001776:	f44f 7383 	mov.w	r3, #262	; 0x106
 800177a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800177e:	ab08      	add	r3, sp, #32
 8001780:	9304      	str	r3, [sp, #16]
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
  indx +=  charValueLen;
 8001782:	3406      	adds	r4, #6
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8001784:	f10d 0307 	add.w	r3, sp, #7
 8001788:	9306      	str	r3, [sp, #24]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800178a:	b2e4      	uxtb	r4, r4
  rq.rparam = &status;
  rq.rlen = 1;
 800178c:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800178e:	a802      	add	r0, sp, #8
 8001790:	2100      	movs	r1, #0

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8001792:	9405      	str	r4, [sp, #20]
  rq.rparam = &status;
  rq.rlen = 1;
 8001794:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8001796:	f7ff fcf7 	bl	8001188 <hci_send_req>
 800179a:	2800      	cmp	r0, #0
 800179c:	db04      	blt.n	80017a8 <aci_gatt_update_char_value+0x68>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 800179e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80017a2:	e002      	b.n	80017aa <aci_gatt_update_char_value+0x6a>
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
    return BLE_STATUS_INVALID_PARAMS;
 80017a4:	2042      	movs	r0, #66	; 0x42
 80017a6:	e000      	b.n	80017aa <aci_gatt_update_char_value+0x6a>
  rq.clen = indx;
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 80017a8:	20ff      	movs	r0, #255	; 0xff
  if (status) {
    return status;
  }

  return 0;
}
 80017aa:	b028      	add	sp, #160	; 0xa0
 80017ac:	bd10      	pop	{r4, pc}

080017ae <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 80017ae:	b510      	push	{r4, lr}
  indx += 2;
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
 80017b0:	2b01      	cmp	r3, #1
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 80017b2:	b08e      	sub	sp, #56	; 0x38
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
    uuid_len = 2;
 80017b4:	bf14      	ite	ne
 80017b6:	2410      	movne	r4, #16
 80017b8:	2402      	moveq	r4, #2
  uint8_t buffer[23];
  uint8_t uuid_len;
  uint8_t indx = 0;
    
  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80017ba:	f8ad 0008 	strh.w	r0, [sp, #8]
  indx += 2;
    
  start_handle = htobs(start_handle);
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80017be:	f8ad 100a 	strh.w	r1, [sp, #10]
  indx += 2;
  
  end_handle = htobs(end_handle);
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80017c2:	f8ad 200c 	strh.w	r2, [sp, #12]
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80017c6:	9910      	ldr	r1, [sp, #64]	; 0x40
  
  end_handle = htobs(end_handle);
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
  indx += 2;
  
  buffer[indx] = charUuidType;
 80017c8:	f88d 300e 	strb.w	r3, [sp, #14]
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80017cc:	4622      	mov	r2, r4
 80017ce:	f10d 000f 	add.w	r0, sp, #15
 80017d2:	f002 f90d 	bl	80039f0 <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80017d6:	2218      	movs	r2, #24
 80017d8:	a808      	add	r0, sp, #32
 80017da:	2100      	movs	r1, #0
 80017dc:	f002 f911 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80017e0:	233f      	movs	r3, #63	; 0x3f
 80017e2:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80017e6:	f44f 738b 	mov.w	r3, #278	; 0x116
 80017ea:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 80017ee:	ab02      	add	r3, sp, #8
 80017f0:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
 80017f2:	230f      	movs	r3, #15
 80017f4:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 80017f6:	f10d 0307 	add.w	r3, sp, #7
 80017fa:	930c      	str	r3, [sp, #48]	; 0x30

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 80017fc:	3407      	adds	r4, #7
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
  rq.rlen = 1;
 80017fe:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8001800:	a808      	add	r0, sp, #32
 8001802:	2100      	movs	r1, #0

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8001804:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
  rq.rlen = 1;
 8001806:	930d      	str	r3, [sp, #52]	; 0x34

  if (hci_send_req(&rq, FALSE) < 0)
 8001808:	f7ff fcbe 	bl	8001188 <hci_send_req>
 800180c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800180e:	bfac      	ite	ge
 8001810:	f89d 0007 	ldrbge.w	r0, [sp, #7]
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 8001814:	20ff      	movlt	r0, #255	; 0xff

  return status;
}
 8001816:	b00e      	add	sp, #56	; 0x38
 8001818:	bd10      	pop	{r4, pc}

0800181a <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800181a:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 800181c:	2a7b      	cmp	r2, #123	; 0x7b
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800181e:	b0a8      	sub	sp, #160	; 0xa0
 8001820:	4614      	mov	r4, r2
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8001822:	dc2b      	bgt.n	800187c <aci_gatt_write_charac_descriptor+0x62>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8001824:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8001828:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800182c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8001830:	4619      	mov	r1, r3
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
  indx += 2;

  buffer[indx] = value_len;
 8001832:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8001836:	f002 f8db 	bl	80039f0 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800183a:	2100      	movs	r1, #0
 800183c:	2218      	movs	r2, #24
 800183e:	a802      	add	r0, sp, #8
 8001840:	f002 f8df 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001844:	233f      	movs	r3, #63	; 0x3f
 8001846:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800184a:	f240 1321 	movw	r3, #289	; 0x121
 800184e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8001852:	ab08      	add	r3, sp, #32
 8001854:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
 8001856:	230f      	movs	r3, #15
 8001858:	9303      	str	r3, [sp, #12]

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
  indx +=  value_len;
 800185a:	3405      	adds	r4, #5
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
  rq.rparam = &status;
 800185c:	f10d 0307 	add.w	r3, sp, #7
 8001860:	9306      	str	r3, [sp, #24]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8001862:	b2e4      	uxtb	r4, r4
  rq.event = EVT_CMD_STATUS; 
  rq.rparam = &status;
  rq.rlen = 1;
 8001864:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8001866:	a802      	add	r0, sp, #8
 8001868:	2100      	movs	r1, #0

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 800186a:	9405      	str	r4, [sp, #20]
  rq.event = EVT_CMD_STATUS; 
  rq.rparam = &status;
  rq.rlen = 1;
 800186c:	9307      	str	r3, [sp, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 800186e:	f7ff fc8b 	bl	8001188 <hci_send_req>
 8001872:	2800      	cmp	r0, #0
 8001874:	db04      	blt.n	8001880 <aci_gatt_write_charac_descriptor+0x66>
    return BLE_STATUS_TIMEOUT;

  return status;
 8001876:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800187a:	e002      	b.n	8001882 <aci_gatt_write_charac_descriptor+0x68>
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
    return BLE_STATUS_INVALID_PARAMS;
 800187c:	2042      	movs	r0, #66	; 0x42
 800187e:	e000      	b.n	8001882 <aci_gatt_write_charac_descriptor+0x68>
  rq.event = EVT_CMD_STATUS; 
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 8001880:	20ff      	movs	r0, #255	; 0xff

  return status;
}
 8001882:	b028      	add	sp, #160	; 0xa0
 8001884:	bd10      	pop	{r4, pc}

08001886 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8001886:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8001888:	2a14      	cmp	r2, #20
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 800188a:	b08e      	sub	sp, #56	; 0x38
 800188c:	4614      	mov	r4, r2
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 800188e:	d828      	bhi.n	80018e2 <aci_gatt_write_without_response+0x5c>
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
 8001890:	f8ad 001c 	strh.w	r0, [sp, #28]
  cp.attr_handle = htobs(attr_handle);
 8001894:	f8ad 101e 	strh.w	r1, [sp, #30]
  cp.val_len = val_len;
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 8001898:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 800189c:	4619      	mov	r1, r3
  if(val_len > sizeof(cp.attr_val))
    return BLE_STATUS_INVALID_PARAMS;

  cp.conn_handle = htobs(conn_handle);
  cp.attr_handle = htobs(attr_handle);
  cp.val_len = val_len;
 800189e:	f88d 2020 	strb.w	r2, [sp, #32]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 80018a2:	f002 f8a5 	bl	80039f0 <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80018a6:	2100      	movs	r1, #0
 80018a8:	2218      	movs	r2, #24
 80018aa:	a801      	add	r0, sp, #4
 80018ac:	f002 f8a9 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80018b0:	233f      	movs	r3, #63	; 0x3f
 80018b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 80018b6:	f240 1323 	movw	r3, #291	; 0x123
 80018ba:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 80018be:	ab07      	add	r3, sp, #28
 80018c0:	9303      	str	r3, [sp, #12]
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
  rq.rparam = &status;
 80018c2:	f10d 0303 	add.w	r3, sp, #3
 80018c6:	9305      	str	r3, [sp, #20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
  rq.cparam = &cp;
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 80018c8:	3405      	adds	r4, #5
  rq.rparam = &status;
  rq.rlen = 1;
 80018ca:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80018cc:	a801      	add	r0, sp, #4
 80018ce:	2100      	movs	r1, #0

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
  rq.cparam = &cp;
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 80018d0:	9404      	str	r4, [sp, #16]
  rq.rparam = &status;
  rq.rlen = 1;
 80018d2:	9306      	str	r3, [sp, #24]

  if (hci_send_req(&rq, FALSE) < 0)
 80018d4:	f7ff fc58 	bl	8001188 <hci_send_req>
 80018d8:	2800      	cmp	r0, #0
 80018da:	db04      	blt.n	80018e6 <aci_gatt_write_without_response+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 80018dc:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80018e0:	e002      	b.n	80018e8 <aci_gatt_write_without_response+0x62>
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
    return BLE_STATUS_INVALID_PARAMS;
 80018e2:	2042      	movs	r0, #66	; 0x42
 80018e4:	e000      	b.n	80018e8 <aci_gatt_write_without_response+0x62>
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 80018e6:	20ff      	movs	r0, #255	; 0xff

  return status;
}
 80018e8:	b00e      	add	sp, #56	; 0x38
 80018ea:	bd10      	pop	{r4, pc}

080018ec <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80018ec:	b570      	push	{r4, r5, r6, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80018f0:	ad02      	add	r5, sp, #8
 80018f2:	2407      	movs	r4, #7
{
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80018f4:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 80018f8:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 80018fc:	f88d 2006 	strb.w	r2, [sp, #6]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001900:	2100      	movs	r1, #0
 8001902:	4622      	mov	r2, r4
 8001904:	4628      	mov	r0, r5

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8001906:	461e      	mov	r6, r3
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001908:	f002 f87b 	bl	8003a02 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800190c:	2100      	movs	r1, #0
 800190e:	2218      	movs	r2, #24
 8001910:	a804      	add	r0, sp, #16
 8001912:	f002 f876 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001916:	233f      	movs	r3, #63	; 0x3f
 8001918:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800191c:	238a      	movs	r3, #138	; 0x8a
 800191e:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8001922:	ab01      	add	r3, sp, #4
 8001924:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001926:	a804      	add	r0, sp, #16
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
 8001928:	2303      	movs	r3, #3
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800192a:	2100      	movs	r1, #0
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
 800192c:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 800192e:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8001930:	9409      	str	r4, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001932:	f7ff fc29 	bl	8001188 <hci_send_req>
 8001936:	2800      	cmp	r0, #0
 8001938:	db14      	blt.n	8001964 <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800193a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800193e:	b990      	cbnz	r0, 8001966 <aci_gap_init_IDB05A1+0x7a>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8001940:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8001942:	f89d 300b 	ldrb.w	r3, [sp, #11]
  
  if (resp.status) {
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8001946:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800194a:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800194c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8001950:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 8001954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001956:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8001958:	9b03      	ldr	r3, [sp, #12]
 800195a:	f3c3 220f 	ubfx	r2, r3, #8, #16
 800195e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001960:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8001962:	e000      	b.n	8001966 <aci_gap_init_IDB05A1+0x7a>
  rq.clen = sizeof(cp);
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 8001964:	20ff      	movs	r0, #255	; 0xff
  *service_handle = btohs(resp.service_handle);
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
  *appearance_char_handle = btohs(resp.appearance_char_handle);
  
  return 0;
}
 8001966:	b00a      	add	sp, #40	; 0x28
 8001968:	bd70      	pop	{r4, r5, r6, pc}

0800196a <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800196a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001970:	ad02      	add	r5, sp, #8
 8001972:	2407      	movs	r4, #7
{
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8001974:	f88d 0004 	strb.w	r0, [sp, #4]
  
  return 0;
}

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8001978:	460f      	mov	r7, r1
 800197a:	4616      	mov	r6, r2
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800197c:	2100      	movs	r1, #0
 800197e:	4622      	mov	r2, r4
 8001980:	4628      	mov	r0, r5
  
  return 0;
}

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8001982:	4698      	mov	r8, r3
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8001984:	f002 f83d 	bl	8003a02 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001988:	2100      	movs	r1, #0
 800198a:	2218      	movs	r2, #24
 800198c:	a804      	add	r0, sp, #16
 800198e:	f002 f838 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001992:	233f      	movs	r3, #63	; 0x3f
 8001994:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8001998:	238a      	movs	r3, #138	; 0x8a
 800199a:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800199e:	ab01      	add	r3, sp, #4
 80019a0:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80019a2:	a804      	add	r0, sp, #16
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
 80019a4:	2301      	movs	r3, #1
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
 80019a6:	2100      	movs	r1, #0
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_INIT;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
 80019a8:	9307      	str	r3, [sp, #28]
  rq.rparam = &resp;
 80019aa:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80019ac:	9409      	str	r4, [sp, #36]	; 0x24
  
  if (hci_send_req(&rq, FALSE) < 0)
 80019ae:	f7ff fbeb 	bl	8001188 <hci_send_req>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	db13      	blt.n	80019de <aci_gap_init_IDB04A1+0x74>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80019b6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80019ba:	b988      	cbnz	r0, 80019e0 <aci_gap_init_IDB04A1+0x76>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80019bc:	9a02      	ldr	r2, [sp, #8]
 80019be:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80019c2:	803a      	strh	r2, [r7, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80019c4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80019c8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80019cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80019d0:	9a03      	ldr	r2, [sp, #12]
  if (resp.status) {
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80019d2:	8033      	strh	r3, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80019d4:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80019d8:	f8a8 2000 	strh.w	r2, [r8]
  
  return 0;
 80019dc:	e000      	b.n	80019e0 <aci_gap_init_IDB04A1+0x76>
  rq.clen = sizeof(cp);
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
  
  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 80019de:	20ff      	movs	r0, #255	; 0xff
  *service_handle = btohs(resp.service_handle);
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
  *appearance_char_handle = btohs(resp.appearance_char_handle);
  
  return 0;
}
 80019e0:	b00a      	add	sp, #40	; 0x28
 80019e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019e6 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80019e6:	b570      	push	{r4, r5, r6, lr}
 80019e8:	b094      	sub	sp, #80	; 0x50
 80019ea:	f89d 5064 	ldrb.w	r5, [sp, #100]	; 0x64
 80019ee:	f89d 606c 	ldrb.w	r6, [sp, #108]	; 0x6c
 80019f2:	f8ad 2004 	strh.w	r2, [sp, #4]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80019f6:	19aa      	adds	r2, r5, r6
 80019f8:	320e      	adds	r2, #14
 80019fa:	2a28      	cmp	r2, #40	; 0x28

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80019fc:	f8ad 1006 	strh.w	r1, [sp, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8001a00:	d84c      	bhi.n	8001a9c <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8001a02:	ac14      	add	r4, sp, #80	; 0x50
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8001a04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8001a08:	f804 0d28 	strb.w	r0, [r4, #-40]!
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8001a0c:	f8ad 2029 	strh.w	r2, [sp, #41]	; 0x29
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8001a10:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8001a14:	f8ad 202b 	strh.w	r2, [sp, #43]	; 0x2b
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8001a18:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8001a1c:	462a      	mov	r2, r5
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8001a1e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8001a22:	991a      	ldr	r1, [sp, #104]	; 0x68
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
 8001a24:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8001a28:	a80c      	add	r0, sp, #48	; 0x30
  indx++;
    
  buffer[indx] = AdvFilterPolicy;
  indx++;
    
  buffer[indx] = LocalNameLen;
 8001a2a:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8001a2e:	f001 ffdf 	bl	80039f0 <memcpy>
  indx +=  LocalNameLen;
 8001a32:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8001a36:	aa14      	add	r2, sp, #80	; 0x50
 8001a38:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 8001a3c:	3509      	adds	r5, #9
 8001a3e:	b2ed      	uxtb	r5, r5
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
  indx +=  LocalNameLen;
  
  buffer[indx] = ServiceUUIDLen;
 8001a40:	f803 6c28 	strb.w	r6, [r3, #-40]
  indx++;

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8001a44:	4632      	mov	r2, r6
  indx +=  ServiceUUIDLen;  
 8001a46:	442e      	add	r6, r5
 8001a48:	b2f6      	uxtb	r6, r6
  indx +=  LocalNameLen;
  
  buffer[indx] = ServiceUUIDLen;
  indx++;

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8001a4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a4c:	1960      	adds	r0, r4, r5
 8001a4e:	f001 ffcf 	bl	80039f0 <memcpy>
  indx +=  ServiceUUIDLen;  

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8001a52:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8001a56:	53a3      	strh	r3, [r4, r6]
  indx +=  2;
 8001a58:	1cb3      	adds	r3, r6, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8001a60:	52e2      	strh	r2, [r4, r3]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001a62:	2100      	movs	r1, #0
 8001a64:	2218      	movs	r2, #24
 8001a66:	a804      	add	r0, sp, #16
 8001a68:	f001 ffcb 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001a6c:	233f      	movs	r3, #63	; 0x3f
 8001a6e:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8001a72:	2383      	movs	r3, #131	; 0x83
 8001a74:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
  indx +=  2;
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
  indx +=  2;    
 8001a78:	3604      	adds	r6, #4
  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8001a7a:	f10d 030f 	add.w	r3, sp, #15
 8001a7e:	9308      	str	r3, [sp, #32]

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8001a80:	b2f6      	uxtb	r6, r6
  rq.rparam = &status;
  rq.rlen = 1;
 8001a82:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8001a84:	a804      	add	r0, sp, #16
 8001a86:	2100      	movs	r1, #0
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
  rq.cparam = (void *)buffer;
 8001a88:	9406      	str	r4, [sp, #24]
  rq.clen = indx;
 8001a8a:	9607      	str	r6, [sp, #28]
  rq.rparam = &status;
  rq.rlen = 1;
 8001a8c:	9309      	str	r3, [sp, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8001a8e:	f7ff fb7b 	bl	8001188 <hci_send_req>
 8001a92:	2800      	cmp	r0, #0
 8001a94:	db04      	blt.n	8001aa0 <aci_gap_set_discoverable+0xba>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8001a96:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001a9a:	e002      	b.n	8001aa2 <aci_gap_set_discoverable+0xbc>
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
    return BLE_STATUS_INVALID_PARAMS;
 8001a9c:	2042      	movs	r0, #66	; 0x42
 8001a9e:	e000      	b.n	8001aa2 <aci_gap_set_discoverable+0xbc>
  rq.clen = indx;
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 8001aa0:	20ff      	movs	r0, #255	; 0xff
  if (status) {
    return status;
  }

  return 0;
}
 8001aa2:	b014      	add	sp, #80	; 0x50
 8001aa4:	bd70      	pop	{r4, r5, r6, pc}

08001aa6 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8001aa6:	b510      	push	{r4, lr}
 8001aa8:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8001aaa:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 8001aae:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8001ab2:	f102 0010 	add.w	r0, r2, #16
 8001ab6:	f10d 011e 	add.w	r1, sp, #30
 8001aba:	f852 4b04 	ldr.w	r4, [r2], #4
 8001abe:	f841 4b04 	str.w	r4, [r1], #4
 8001ac2:	4282      	cmp	r2, r0
 8001ac4:	d1f9      	bne.n	8001aba <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 8001ac6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 8001aca:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8001ace:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8001ad2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8001ad6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8001ada:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001adc:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001ae0:	2218      	movs	r2, #24
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
  cp.min_encryption_key_size = min_encryption_key_size;
  cp.max_encryption_key_size = max_encryption_key_size;
  cp.use_fixed_pin = use_fixed_pin;
  cp.fixed_pin = htobl(fixed_pin);
  cp.bonding_mode = bonding_mode;
 8001ae2:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8001ae6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001aea:	a801      	add	r0, sp, #4
 8001aec:	2100      	movs	r1, #0
 8001aee:	f001 ff88 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001af2:	233f      	movs	r3, #63	; 0x3f
 8001af4:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8001af8:	2386      	movs	r3, #134	; 0x86
 8001afa:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8001afe:	ab07      	add	r3, sp, #28
 8001b00:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 8001b02:	231a      	movs	r3, #26
 8001b04:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 8001b06:	f10d 0303 	add.w	r3, sp, #3
 8001b0a:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8001b0c:	a801      	add	r0, sp, #4
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
  rq.rparam = &status;
  rq.rlen = 1;
 8001b0e:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8001b10:	2100      	movs	r1, #0
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
  rq.rparam = &status;
  rq.rlen = 1;
 8001b12:	9306      	str	r3, [sp, #24]

  if (hci_send_req(&rq, FALSE) < 0)
 8001b14:	f7ff fb38 	bl	8001188 <hci_send_req>
 8001b18:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8001b1a:	bfac      	ite	ge
 8001b1c:	f89d 0003 	ldrbge.w	r0, [sp, #3]
  rq.clen = sizeof(cp);
  rq.rparam = &status;
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 8001b20:	20ff      	movlt	r0, #255	; 0xff
  if (status) {
    return status;
  }
    
  return 0;
}
 8001b22:	b00e      	add	sp, #56	; 0x38
 8001b24:	bd10      	pop	{r4, pc}

08001b26 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8001b26:	b510      	push	{r4, lr}
 8001b28:	b08e      	sub	sp, #56	; 0x38
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
  cp.max_conn_length = htobs(max_conn_length);

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001b2a:	2418      	movs	r4, #24
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
  cp.scanWindow = htobs(scanWindow);
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8001b2c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	889b      	ldrh	r3, [r3, #4]
 8001b34:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
  cp.own_bdaddr_type = own_bdaddr_type;
 8001b38:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8001b3c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp.conn_min_interval = htobs(conn_min_interval);
 8001b40:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8001b44:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  cp.conn_max_interval = htobs(conn_max_interval);
 8001b48:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8001b4c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  cp.conn_latency = htobs(conn_latency);
 8001b50:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8001b54:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  cp.supervision_timeout = htobs(supervision_timeout);
 8001b58:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8001b5c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  cp.min_conn_length = htobs(min_conn_length);
 8001b60:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
{
  struct hci_request rq;
  gap_create_connection_cp cp;
  uint8_t status;  

  cp.scanInterval = htobs(scanInterval);
 8001b64:	f8ad 0020 	strh.w	r0, [sp, #32]
  cp.scanWindow = htobs(scanWindow);
 8001b68:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  cp.peer_bdaddr_type = peer_bdaddr_type;
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8001b6c:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
  cp.own_bdaddr_type = own_bdaddr_type;
  cp.conn_min_interval = htobs(conn_min_interval);
  cp.conn_max_interval = htobs(conn_max_interval);
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
 8001b70:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  cp.max_conn_length = htobs(max_conn_length);

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001b74:	4622      	mov	r2, r4
  cp.conn_min_interval = htobs(conn_min_interval);
  cp.conn_max_interval = htobs(conn_max_interval);
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
  cp.max_conn_length = htobs(max_conn_length);
 8001b76:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8001b7a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8001b7e:	a802      	add	r0, sp, #8
 8001b80:	2100      	movs	r1, #0
 8001b82:	f001 ff3e 	bl	8003a02 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8001b86:	233f      	movs	r3, #63	; 0x3f
 8001b88:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8001b8c:	239c      	movs	r3, #156	; 0x9c
 8001b8e:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8001b92:	ab08      	add	r3, sp, #32
 8001b94:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.event = EVT_CMD_STATUS;
 8001b96:	230f      	movs	r3, #15
 8001b98:	9303      	str	r3, [sp, #12]
  rq.rparam = &status;
 8001b9a:	f10d 0307 	add.w	r3, sp, #7
 8001b9e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001ba0:	a802      	add	r0, sp, #8
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
  rq.rlen = 1;
 8001ba2:	2301      	movs	r3, #1
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001ba4:	2100      	movs	r1, #0

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
  rq.cparam = &cp;
  rq.clen = sizeof(cp);
 8001ba6:	9405      	str	r4, [sp, #20]
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
  rq.rlen = 1;
 8001ba8:	9307      	str	r3, [sp, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8001baa:	f7ff faed 	bl	8001188 <hci_send_req>
 8001bae:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8001bb0:	bfac      	ite	ge
 8001bb2:	f89d 0007 	ldrbge.w	r0, [sp, #7]
  rq.event = EVT_CMD_STATUS;
  rq.rparam = &status;
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
    return BLE_STATUS_TIMEOUT;
 8001bb6:	20ff      	movlt	r0, #255	; 0xff

  return status;
}
 8001bb8:	b00e      	add	sp, #56	; 0x38
 8001bba:	bd10      	pop	{r4, pc}

08001bbc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001bc0:	6805      	ldr	r5, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001bc2:	68c3      	ldr	r3, [r0, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001bc4:	692a      	ldr	r2, [r5, #16]
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bc6:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001bc8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bcc:	68a1      	ldr	r1, [r4, #8]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001bce:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bd0:	69c2      	ldr	r2, [r0, #28]
 8001bd2:	6900      	ldr	r0, [r0, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001bd4:	612b      	str	r3, [r5, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001bd6:	68eb      	ldr	r3, [r5, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bd8:	4308      	orrs	r0, r1
 8001bda:	6961      	ldr	r1, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001bdc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001be0:	4301      	orrs	r1, r0
 8001be2:	4311      	orrs	r1, r2

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001be4:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001be8:	430b      	orrs	r3, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001bea:	60eb      	str	r3, [r5, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001bec:	6969      	ldr	r1, [r5, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001bee:	69a3      	ldr	r3, [r4, #24]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001bf0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001bf4:	430b      	orrs	r3, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001bfa:	616b      	str	r3, [r5, #20]
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <UART_SetConfig+0x238>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bfe:	d17c      	bne.n	8001cfa <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001c00:	429d      	cmp	r5, r3
 8001c02:	d003      	beq.n	8001c0c <UART_SetConfig+0x50>
 8001c04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c08:	429d      	cmp	r5, r3
 8001c0a:	d132      	bne.n	8001c72 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001c0c:	f000 fd14 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001c10:	6863      	ldr	r3, [r4, #4]
 8001c12:	2719      	movs	r7, #25
 8001c14:	4378      	muls	r0, r7
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fbb0 f9f3 	udiv	r9, r0, r3
 8001c1c:	f000 fd0c 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001c20:	6863      	ldr	r3, [r4, #4]
 8001c22:	4378      	muls	r0, r7
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c2a:	f000 fd05 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001c2e:	6863      	ldr	r3, [r4, #4]
 8001c30:	4378      	muls	r0, r7
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	2664      	movs	r6, #100	; 0x64
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	fbb3 f3f6 	udiv	r3, r3, r6
 8001c3e:	fb06 8813 	mls	r8, r6, r3, r8
 8001c42:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001c46:	f000 fcf7 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001c4a:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8001c4e:	6863      	ldr	r3, [r4, #4]
 8001c50:	fbb8 f8f6 	udiv	r8, r8, r6
 8001c54:	fbb9 f9f6 	udiv	r9, r9, r6
 8001c58:	4378      	muls	r0, r7
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8001c60:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001c64:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001c68:	fbb0 faf3 	udiv	sl, r0, r3
 8001c6c:	f000 fce4 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001c70:	e031      	b.n	8001cd6 <UART_SetConfig+0x11a>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001c72:	f000 fcd1 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001c76:	6863      	ldr	r3, [r4, #4]
 8001c78:	2719      	movs	r7, #25
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	4378      	muls	r0, r7
 8001c7e:	fbb0 f9f3 	udiv	r9, r0, r3
 8001c82:	f000 fcc9 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001c86:	6863      	ldr	r3, [r4, #4]
 8001c88:	4378      	muls	r0, r7
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	fbb0 f8f3 	udiv	r8, r0, r3
 8001c90:	f000 fcc2 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001c94:	6863      	ldr	r3, [r4, #4]
 8001c96:	4378      	muls	r0, r7
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2664      	movs	r6, #100	; 0x64
 8001c9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ca0:	fbb3 f3f6 	udiv	r3, r3, r6
 8001ca4:	fb06 8813 	mls	r8, r6, r3, r8
 8001ca8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8001cac:	f000 fcb4 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	f108 0832 	add.w	r8, r8, #50	; 0x32
 8001cb4:	6863      	ldr	r3, [r4, #4]
 8001cb6:	fbb8 f8f6 	udiv	r8, r8, r6
 8001cba:	fbb9 f9f6 	udiv	r9, r9, r6
 8001cbe:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8001cc2:	4378      	muls	r0, r7
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001cca:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8001cce:	fbb0 faf3 	udiv	sl, r0, r3
 8001cd2:	f000 fca1 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001cd6:	6863      	ldr	r3, [r4, #4]
 8001cd8:	4378      	muls	r0, r7
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001ce0:	fbb7 f7f6 	udiv	r7, r7, r6
 8001ce4:	fb06 aa17 	mls	sl, r6, r7, sl
 8001ce8:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8001cec:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 8001cf0:	fbba f6f6 	udiv	r6, sl, r6
 8001cf4:	f006 0607 	and.w	r6, r6, #7
 8001cf8:	e076      	b.n	8001de8 <UART_SetConfig+0x22c>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cfa:	429d      	cmp	r5, r3
 8001cfc:	d002      	beq.n	8001d04 <UART_SetConfig+0x148>
 8001cfe:	4b3e      	ldr	r3, [pc, #248]	; (8001df8 <UART_SetConfig+0x23c>)
 8001d00:	429d      	cmp	r5, r3
 8001d02:	d130      	bne.n	8001d66 <UART_SetConfig+0x1aa>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001d04:	f000 fc98 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001d08:	6863      	ldr	r3, [r4, #4]
 8001d0a:	2719      	movs	r7, #25
 8001d0c:	4378      	muls	r0, r7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fbb0 f8f3 	udiv	r8, r0, r3
 8001d14:	f000 fc90 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001d18:	6863      	ldr	r3, [r4, #4]
 8001d1a:	4378      	muls	r0, r7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	fbb0 f9f3 	udiv	r9, r0, r3
 8001d22:	f000 fc89 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	4378      	muls	r0, r7
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	2664      	movs	r6, #100	; 0x64
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d36:	fb06 9913 	mls	r9, r6, r3, r9
 8001d3a:	f000 fc7d 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001d3e:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001d42:	6863      	ldr	r3, [r4, #4]
 8001d44:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001d48:	fbb8 f8f6 	udiv	r8, r8, r6
 8001d4c:	fbb9 f9f6 	udiv	r9, r9, r6
 8001d50:	4378      	muls	r0, r7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001d58:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
 8001d5c:	fbb0 faf3 	udiv	sl, r0, r3
 8001d60:	f000 fc6a 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 8001d64:	e02f      	b.n	8001dc6 <UART_SetConfig+0x20a>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001d66:	f000 fc57 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	2719      	movs	r7, #25
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4378      	muls	r0, r7
 8001d72:	fbb0 f8f3 	udiv	r8, r0, r3
 8001d76:	f000 fc4f 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001d7a:	6863      	ldr	r3, [r4, #4]
 8001d7c:	4378      	muls	r0, r7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	fbb0 f9f3 	udiv	r9, r0, r3
 8001d84:	f000 fc48 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	4378      	muls	r0, r7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	2664      	movs	r6, #100	; 0x64
 8001d90:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d94:	fbb3 f3f6 	udiv	r3, r3, r6
 8001d98:	fb06 9913 	mls	r9, r6, r3, r9
 8001d9c:	f000 fc3c 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001da0:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8001da4:	6863      	ldr	r3, [r4, #4]
 8001da6:	f109 0932 	add.w	r9, r9, #50	; 0x32
 8001daa:	fbb8 f8f6 	udiv	r8, r8, r6
 8001dae:	fbb9 f9f6 	udiv	r9, r9, r6
 8001db2:	4378      	muls	r0, r7
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001dba:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
 8001dbe:	fbb0 faf3 	udiv	sl, r0, r3
 8001dc2:	f000 fc29 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8001dc6:	6863      	ldr	r3, [r4, #4]
 8001dc8:	4378      	muls	r0, r7
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	fbb0 f7f3 	udiv	r7, r0, r3
 8001dd0:	fbb7 f7f6 	udiv	r7, r7, r6
 8001dd4:	fb06 aa17 	mls	sl, r6, r7, sl
 8001dd8:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8001ddc:	f10a 0a32 	add.w	sl, sl, #50	; 0x32
 8001de0:	fbba f6f6 	udiv	r6, sl, r6
 8001de4:	f006 060f 	and.w	r6, r6, #15
 8001de8:	444e      	add	r6, r9
 8001dea:	4446      	add	r6, r8
 8001dec:	60ae      	str	r6, [r5, #8]
 8001dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df2:	bf00      	nop
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40011400 	.word	0x40011400

08001dfc <HAL_UART_MspInit>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001dfc:	4770      	bx	lr

08001dfe <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001dfe:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001e00:	4604      	mov	r4, r0
 8001e02:	b340      	cbz	r0, 8001e56 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e04:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001e08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e0c:	b91b      	cbnz	r3, 8001e16 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e0e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001e12:	f7ff fff3 	bl	8001dfc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e16:	2324      	movs	r3, #36	; 0x24
 8001e18:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e24:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fec8 	bl	8001bbc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	691a      	ldr	r2, [r3, #16]
 8001e30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e36:	695a      	ldr	r2, [r3, #20]
 8001e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e3c:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e44:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e46:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001e48:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e4a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001e4c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001e50:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001e54:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001e56:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001e58:	bd10      	pop	{r4, pc}

08001e5a <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001e5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e5e:	9f06      	ldr	r7, [sp, #24]
 8001e60:	4604      	mov	r4, r0
 8001e62:	460e      	mov	r6, r1
 8001e64:	4690      	mov	r8, r2
 8001e66:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001e68:	6822      	ldr	r2, [r4, #0]
 8001e6a:	6893      	ldr	r3, [r2, #8]
 8001e6c:	4033      	ands	r3, r6
 8001e6e:	1b99      	subs	r1, r3, r6
 8001e70:	424b      	negs	r3, r1
 8001e72:	414b      	adcs	r3, r1
 8001e74:	4543      	cmp	r3, r8
 8001e76:	d033      	beq.n	8001ee0 <SPI_WaitFlagStateUntilTimeout+0x86>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001e78:	1c68      	adds	r0, r5, #1
 8001e7a:	d0f6      	beq.n	8001e6a <SPI_WaitFlagStateUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001e7c:	b94d      	cbnz	r5, 8001e92 <SPI_WaitFlagStateUntilTimeout+0x38>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e86:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e88:	6862      	ldr	r2, [r4, #4]
 8001e8a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001e8e:	d111      	bne.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x5a>
 8001e90:	e005      	b.n	8001e9e <SPI_WaitFlagStateUntilTimeout+0x44>
{
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001e92:	f000 fdfb 	bl	8002a8c <HAL_GetTick>
 8001e96:	1bc0      	subs	r0, r0, r7
 8001e98:	42a8      	cmp	r0, r5
 8001e9a:	d3e5      	bcc.n	8001e68 <SPI_WaitFlagStateUntilTimeout+0xe>
 8001e9c:	e7ef      	b.n	8001e7e <SPI_WaitFlagStateUntilTimeout+0x24>
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e9e:	68a2      	ldr	r2, [r4, #8]
 8001ea0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ea4:	d002      	beq.n	8001eac <SPI_WaitFlagStateUntilTimeout+0x52>
 8001ea6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001eaa:	d103      	bne.n	8001eb4 <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001eb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001eb6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001eba:	d108      	bne.n	8001ece <SPI_WaitFlagStateUntilTimeout+0x74>
        {
          SPI_RESET_CRC(hspi);
 8001ebc:	6819      	ldr	r1, [r3, #0]
 8001ebe:	f64d 72ff 	movw	r2, #57343	; 0xdfff
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ecc:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001eda:	2003      	movs	r0, #3
 8001edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001ee0:	2000      	movs	r0, #0
}
 8001ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ee6 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ee6:	b513      	push	{r0, r1, r4, lr}
 8001ee8:	460b      	mov	r3, r1
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001eea:	9200      	str	r2, [sp, #0]
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	2200      	movs	r2, #0
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ef0:	4604      	mov	r4, r0
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ef2:	f7ff ffb2 	bl	8001e5a <SPI_WaitFlagStateUntilTimeout>
 8001ef6:	b120      	cbz	r0, 8001f02 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ef8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001efa:	f043 0320 	orr.w	r3, r3, #32
 8001efe:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001f00:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001f02:	b002      	add	sp, #8
 8001f04:	bd10      	pop	{r4, pc}

08001f06 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001f06:	4770      	bx	lr

08001f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f08:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001f0a:	4604      	mov	r4, r0
 8001f0c:	2800      	cmp	r0, #0
 8001f0e:	d036      	beq.n	8001f7e <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001f14:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001f18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f1c:	b91b      	cbnz	r3, 8001f26 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f1e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f22:	f7ff fff0 	bl	8001f06 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f26:	6861      	ldr	r1, [r4, #4]
 8001f28:	68a0      	ldr	r0, [r4, #8]
 8001f2a:	4308      	orrs	r0, r1
 8001f2c:	68e1      	ldr	r1, [r4, #12]
 8001f2e:	4308      	orrs	r0, r1
 8001f30:	6921      	ldr	r1, [r4, #16]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f32:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f34:	4308      	orrs	r0, r1
 8001f36:	6961      	ldr	r1, [r4, #20]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f38:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f3c:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f3e:	4308      	orrs	r0, r1
 8001f40:	69e1      	ldr	r1, [r4, #28]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f42:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f44:	4308      	orrs	r0, r1
 8001f46:	6a21      	ldr	r1, [r4, #32]
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001f4e:	4308      	orrs	r0, r1
 8001f50:	69a2      	ldr	r2, [r4, #24]
 8001f52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001f54:	4301      	orrs	r1, r0
 8001f56:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001f5a:	4301      	orrs	r1, r0
 8001f5c:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001f5e:	0c12      	lsrs	r2, r2, #16
 8001f60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001f62:	f002 0204 	and.w	r2, r2, #4
 8001f66:	4311      	orrs	r1, r2
 8001f68:	6059      	str	r1, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f6a:	69da      	ldr	r2, [r3, #28]
 8001f6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f70:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f72:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001f74:	2301      	movs	r3, #1
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f76:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f78:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001f7c:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 8001f7e:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;

  return HAL_OK;
}
 8001f80:	bd10      	pop	{r4, pc}

08001f82 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001f82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f86:	4698      	mov	r8, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f88:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001f8c:	b085      	sub	sp, #20

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f8e:	2b01      	cmp	r3, #1
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8001f90:	4604      	mov	r4, r0
 8001f92:	460d      	mov	r5, r1
 8001f94:	4616      	mov	r6, r2
 8001f96:	9f0c      	ldr	r7, [sp, #48]	; 0x30

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f98:	f000 80f7 	beq.w	800218a <HAL_SPI_TransmitReceive+0x208>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa2:	f000 fd73 	bl	8002a8c <HAL_GetTick>
  
  tmp  = hspi->State;
 8001fa6:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001faa:	6862      	ldr	r2, [r4, #4]
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
  
  tmp  = hspi->State;
 8001fac:	b2c9      	uxtb	r1, r1
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001fae:	2901      	cmp	r1, #1

  /* Process Locked */
  __HAL_LOCK(hspi);

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fb0:	4681      	mov	r9, r0
  
  tmp  = hspi->State;
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001fb2:	d00a      	beq.n	8001fca <HAL_SPI_TransmitReceive+0x48>
 8001fb4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001fb8:	f040 80dd 	bne.w	8002176 <HAL_SPI_TransmitReceive+0x1f4>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001fbc:	68a3      	ldr	r3, [r4, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80d9 	bne.w	8002176 <HAL_SPI_TransmitReceive+0x1f4>
 8001fc4:	2904      	cmp	r1, #4
 8001fc6:	f040 80d6 	bne.w	8002176 <HAL_SPI_TransmitReceive+0x1f4>
  {
    errorcode = HAL_BUSY;
    goto error;
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001fca:	2d00      	cmp	r5, #0
 8001fcc:	f000 80d5 	beq.w	800217a <HAL_SPI_TransmitReceive+0x1f8>
 8001fd0:	2e00      	cmp	r6, #0
 8001fd2:	f000 80d2 	beq.w	800217a <HAL_SPI_TransmitReceive+0x1f8>
 8001fd6:	f1b8 0f00 	cmp.w	r8, #0
 8001fda:	f000 80ce 	beq.w	800217a <HAL_SPI_TransmitReceive+0x1f8>
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001fde:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001fe2:	63a6      	str	r6, [r4, #56]	; 0x38
    errorcode = HAL_ERROR;
    goto error;
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 8001fe4:	2b01      	cmp	r3, #1
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001fe6:	bf04      	itt	eq
 8001fe8:	2305      	moveq	r3, #5
 8001fea:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ff2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ff4:	6463      	str	r3, [r4, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ff6:	6823      	ldr	r3, [r4, #0]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
 8001ff8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
  hspi->TxXferCount = Size;
 8001ffc:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002000:	6819      	ldr	r1, [r3, #0]

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
 8002002:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8002006:	0648      	lsls	r0, r1, #25
  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
  hspi->RxXferCount = Size;
  hspi->RxXferSize  = Size;
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002008:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size;
 800200a:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800200e:	d403      	bmi.n	8002018 <HAL_SPI_TransmitReceive+0x96>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002010:	6819      	ldr	r1, [r3, #0]
 8002012:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002016:	6019      	str	r1, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002018:	68e1      	ldr	r1, [r4, #12]
 800201a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800201e:	d150      	bne.n	80020c2 <HAL_SPI_TransmitReceive+0x140>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002020:	b11a      	cbz	r2, 800202a <HAL_SPI_TransmitReceive+0xa8>
 8002022:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002024:	b292      	uxth	r2, r2
 8002026:	2a01      	cmp	r2, #1
 8002028:	d106      	bne.n	8002038 <HAL_SPI_TransmitReceive+0xb6>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 800202a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800202e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
 8002030:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002032:	3b01      	subs	r3, #1
 8002034:	b29b      	uxth	r3, r3
 8002036:	86e3      	strh	r3, [r4, #54]	; 0x36
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 8002038:	f04f 0801 	mov.w	r8, #1
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800203c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d02f      	beq.n	80020a4 <HAL_SPI_TransmitReceive+0x122>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002044:	f1b8 0f00 	cmp.w	r8, #0
 8002048:	d012      	beq.n	8002070 <HAL_SPI_TransmitReceive+0xee>
 800204a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800204c:	b29b      	uxth	r3, r3
 800204e:	b16b      	cbz	r3, 800206c <HAL_SPI_TransmitReceive+0xea>
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	0791      	lsls	r1, r2, #30
 8002056:	d509      	bpl.n	800206c <HAL_SPI_TransmitReceive+0xea>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002058:	f835 2b02 	ldrh.w	r2, [r5], #2
 800205c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
        hspi->TxXferCount--;
 800205e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002060:	3b01      	subs	r3, #1
 8002062:	b29b      	uxth	r3, r3
 8002064:	86e3      	strh	r3, [r4, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002066:	f04f 0800 	mov.w	r8, #0
 800206a:	e001      	b.n	8002070 <HAL_SPI_TransmitReceive+0xee>
 800206c:	f04f 0801 	mov.w	r8, #1
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002070:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002072:	b29b      	uxth	r3, r3
 8002074:	b163      	cbz	r3, 8002090 <HAL_SPI_TransmitReceive+0x10e>
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	07d2      	lsls	r2, r2, #31
 800207c:	d508      	bpl.n	8002090 <HAL_SPI_TransmitReceive+0x10e>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f826 3b02 	strh.w	r3, [r6], #2
        pRxData += sizeof(uint16_t);
        hspi->RxXferCount--;
 8002084:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002086:	3b01      	subs	r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800208c:	f04f 0801 	mov.w	r8, #1
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002090:	1c78      	adds	r0, r7, #1
 8002092:	d0d3      	beq.n	800203c <HAL_SPI_TransmitReceive+0xba>
 8002094:	f000 fcfa 	bl	8002a8c <HAL_GetTick>
 8002098:	ebc9 0000 	rsb	r0, r9, r0
 800209c:	42b8      	cmp	r0, r7
 800209e:	d3cd      	bcc.n	800203c <HAL_SPI_TransmitReceive+0xba>
      {
        errorcode = HAL_TIMEOUT;
 80020a0:	2003      	movs	r0, #3
 80020a2:	e06b      	b.n	800217c <HAL_SPI_TransmitReceive+0x1fa>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
      pTxData += sizeof(uint16_t);
      hspi->TxXferCount--;
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1cb      	bne.n	8002044 <HAL_SPI_TransmitReceive+0xc2>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80020ac:	f8cd 9000 	str.w	r9, [sp]
 80020b0:	4620      	mov	r0, r4
 80020b2:	2102      	movs	r1, #2
 80020b4:	2201      	movs	r2, #1
 80020b6:	463b      	mov	r3, r7
 80020b8:	f7ff fecf 	bl	8001e5a <SPI_WaitFlagStateUntilTimeout>
 80020bc:	2800      	cmp	r0, #0
 80020be:	d1ef      	bne.n	80020a0 <HAL_SPI_TransmitReceive+0x11e>
 80020c0:	e045      	b.n	800214e <HAL_SPI_TransmitReceive+0x1cc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80020c2:	b11a      	cbz	r2, 80020cc <HAL_SPI_TransmitReceive+0x14a>
 80020c4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80020c6:	b292      	uxth	r2, r2
 80020c8:	2a01      	cmp	r2, #1
 80020ca:	d106      	bne.n	80020da <HAL_SPI_TransmitReceive+0x158>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 80020cc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80020d0:	731a      	strb	r2, [r3, #12]
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
 80020d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	86e3      	strh	r3, [r4, #54]	; 0x36
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80020da:	f04f 0801 	mov.w	r8, #1
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d02e      	beq.n	8002144 <HAL_SPI_TransmitReceive+0x1c2>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80020e6:	f1b8 0f00 	cmp.w	r8, #0
 80020ea:	d012      	beq.n	8002112 <HAL_SPI_TransmitReceive+0x190>
 80020ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b16b      	cbz	r3, 800210e <HAL_SPI_TransmitReceive+0x18c>
 80020f2:	6823      	ldr	r3, [r4, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	0791      	lsls	r1, r2, #30
 80020f8:	d509      	bpl.n	800210e <HAL_SPI_TransmitReceive+0x18c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80020fa:	782a      	ldrb	r2, [r5, #0]
 80020fc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80020fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002100:	3b01      	subs	r3, #1
 8002102:	b29b      	uxth	r3, r3
 8002104:	86e3      	strh	r3, [r4, #54]	; 0x36
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002106:	3501      	adds	r5, #1
        hspi->TxXferCount--;
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002108:	f04f 0800 	mov.w	r8, #0
 800210c:	e001      	b.n	8002112 <HAL_SPI_TransmitReceive+0x190>
 800210e:	f04f 0801 	mov.w	r8, #1
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002112:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002114:	b29b      	uxth	r3, r3
 8002116:	b163      	cbz	r3, 8002132 <HAL_SPI_TransmitReceive+0x1b0>
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	07d2      	lsls	r2, r2, #31
 800211e:	d508      	bpl.n	8002132 <HAL_SPI_TransmitReceive+0x1b0>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8002124:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002126:	3b01      	subs	r3, #1
 8002128:	b29b      	uxth	r3, r3
 800212a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 800212c:	3601      	adds	r6, #1
        hspi->RxXferCount--;
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 800212e:	f04f 0801 	mov.w	r8, #1
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8002132:	1c7b      	adds	r3, r7, #1
 8002134:	d0d3      	beq.n	80020de <HAL_SPI_TransmitReceive+0x15c>
 8002136:	f000 fca9 	bl	8002a8c <HAL_GetTick>
 800213a:	ebc9 0000 	rsb	r0, r9, r0
 800213e:	42b8      	cmp	r0, r7
 8002140:	d3cd      	bcc.n	80020de <HAL_SPI_TransmitReceive+0x15c>
 8002142:	e7ad      	b.n	80020a0 <HAL_SPI_TransmitReceive+0x11e>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
      pTxData += sizeof(uint8_t);
      hspi->TxXferCount--;
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002144:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1cc      	bne.n	80020e6 <HAL_SPI_TransmitReceive+0x164>
 800214c:	e7ae      	b.n	80020ac <HAL_SPI_TransmitReceive+0x12a>
    errorcode = HAL_TIMEOUT;
    goto error;
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800214e:	4620      	mov	r0, r4
 8002150:	4639      	mov	r1, r7
 8002152:	464a      	mov	r2, r9
 8002154:	f7ff fec7 	bl	8001ee6 <SPI_CheckFlag_BSY>
 8002158:	b110      	cbz	r0, 8002160 <HAL_SPI_TransmitReceive+0x1de>
  {
    errorcode = HAL_ERROR;
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800215a:	2320      	movs	r3, #32
 800215c:	6563      	str	r3, [r4, #84]	; 0x54
 800215e:	e00c      	b.n	800217a <HAL_SPI_TransmitReceive+0x1f8>
    goto error;
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002160:	68a3      	ldr	r3, [r4, #8]
 8002162:	b95b      	cbnz	r3, 800217c <HAL_SPI_TransmitReceive+0x1fa>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002164:	6822      	ldr	r2, [r4, #0]
 8002166:	9303      	str	r3, [sp, #12]
 8002168:	68d1      	ldr	r1, [r2, #12]
 800216a:	9103      	str	r1, [sp, #12]
 800216c:	6892      	ldr	r2, [r2, #8]
 800216e:	9203      	str	r2, [sp, #12]
 8002170:	9a03      	ldr	r2, [sp, #12]
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002172:	4618      	mov	r0, r3
 8002174:	e002      	b.n	800217c <HAL_SPI_TransmitReceive+0x1fa>
  tmp1 = hspi->Init.Mode;
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8002176:	2002      	movs	r0, #2
 8002178:	e000      	b.n	800217c <HAL_SPI_TransmitReceive+0x1fa>
    goto error;
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    errorcode = HAL_ERROR;
 800217a:	2001      	movs	r0, #1
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 800217c:	2301      	movs	r3, #1
 800217e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002182:	2300      	movs	r3, #0
 8002184:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8002188:	e000      	b.n	800218c <HAL_SPI_TransmitReceive+0x20a>

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218a:	2002      	movs	r0, #2
  
error :
  hspi->State = HAL_SPI_STATE_READY;
  __HAL_UNLOCK(hspi);
  return errorcode;
}
 800218c:	b005      	add	sp, #20
 800218e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002192 <HAL_SPI_GetState>:
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  /* Return SPI handle state */
  return hspi->State;
 8002192:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8002196:	4770      	bx	lr

08002198 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002198:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800219a:	4604      	mov	r4, r0
 800219c:	b908      	cbnz	r0, 80021a2 <HAL_RCC_OscConfig+0xa>
  {
    return HAL_ERROR;
 800219e:	2001      	movs	r0, #1
 80021a0:	e16d      	b.n	800247e <HAL_RCC_OscConfig+0x2e6>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	6803      	ldr	r3, [r0, #0]
 80021a4:	07de      	lsls	r6, r3, #31
 80021a6:	d403      	bmi.n	80021b0 <HAL_RCC_OscConfig+0x18>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	079d      	lsls	r5, r3, #30
 80021ac:	d44b      	bmi.n	8002246 <HAL_RCC_OscConfig+0xae>
 80021ae:	e087      	b.n	80022c0 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021b0:	4b98      	ldr	r3, [pc, #608]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	f002 020c 	and.w	r2, r2, #12
 80021b8:	2a04      	cmp	r2, #4
 80021ba:	d007      	beq.n	80021cc <HAL_RCC_OscConfig+0x34>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	f002 020c 	and.w	r2, r2, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021c2:	2a08      	cmp	r2, #8
 80021c4:	d10a      	bne.n	80021dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	0258      	lsls	r0, r3, #9
 80021ca:	d507      	bpl.n	80021dc <HAL_RCC_OscConfig+0x44>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	4b91      	ldr	r3, [pc, #580]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0399      	lsls	r1, r3, #14
 80021d2:	d5e9      	bpl.n	80021a8 <HAL_RCC_OscConfig+0x10>
 80021d4:	6863      	ldr	r3, [r4, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1e6      	bne.n	80021a8 <HAL_RCC_OscConfig+0x10>
 80021da:	e7e0      	b.n	800219e <HAL_RCC_OscConfig+0x6>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021dc:	6862      	ldr	r2, [r4, #4]
 80021de:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021e4:	d006      	beq.n	80021f4 <HAL_RCC_OscConfig+0x5c>
 80021e6:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80021ea:	d108      	bne.n	80021fe <HAL_RCC_OscConfig+0x66>
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x78>
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002204:	6019      	str	r1, [r3, #0]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800220c:	6019      	str	r1, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800220e:	b16a      	cbz	r2, 800222c <HAL_RCC_OscConfig+0x94>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002210:	f000 fc3c 	bl	8002a8c <HAL_GetTick>
 8002214:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b7f      	ldr	r3, [pc, #508]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	039a      	lsls	r2, r3, #14
 800221c:	d4c4      	bmi.n	80021a8 <HAL_RCC_OscConfig+0x10>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800221e:	f000 fc35 	bl	8002a8c <HAL_GetTick>
 8002222:	1b40      	subs	r0, r0, r5
 8002224:	2864      	cmp	r0, #100	; 0x64
 8002226:	d9f6      	bls.n	8002216 <HAL_RCC_OscConfig+0x7e>
          {
            return HAL_TIMEOUT;
 8002228:	2003      	movs	r0, #3
 800222a:	e128      	b.n	800247e <HAL_RCC_OscConfig+0x2e6>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222c:	f000 fc2e 	bl	8002a8c <HAL_GetTick>
 8002230:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002232:	4b78      	ldr	r3, [pc, #480]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	039b      	lsls	r3, r3, #14
 8002238:	d5b6      	bpl.n	80021a8 <HAL_RCC_OscConfig+0x10>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800223a:	f000 fc27 	bl	8002a8c <HAL_GetTick>
 800223e:	1b40      	subs	r0, r0, r5
 8002240:	2864      	cmp	r0, #100	; 0x64
 8002242:	d9f6      	bls.n	8002232 <HAL_RCC_OscConfig+0x9a>
 8002244:	e7f0      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002246:	4b73      	ldr	r3, [pc, #460]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	f012 0f0c 	tst.w	r2, #12
 800224e:	d007      	beq.n	8002260 <HAL_RCC_OscConfig+0xc8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	f002 020c 	and.w	r2, r2, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002256:	2a08      	cmp	r2, #8
 8002258:	d10a      	bne.n	8002270 <HAL_RCC_OscConfig+0xd8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	025e      	lsls	r6, r3, #9
 800225e:	d407      	bmi.n	8002270 <HAL_RCC_OscConfig+0xd8>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002260:	4b6c      	ldr	r3, [pc, #432]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	0795      	lsls	r5, r2, #30
 8002266:	d515      	bpl.n	8002294 <HAL_RCC_OscConfig+0xfc>
 8002268:	68e2      	ldr	r2, [r4, #12]
 800226a:	2a01      	cmp	r2, #1
 800226c:	d197      	bne.n	800219e <HAL_RCC_OscConfig+0x6>
 800226e:	e011      	b.n	8002294 <HAL_RCC_OscConfig+0xfc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002270:	68e2      	ldr	r2, [r4, #12]
 8002272:	4b69      	ldr	r3, [pc, #420]	; (8002418 <HAL_RCC_OscConfig+0x280>)
 8002274:	b1b2      	cbz	r2, 80022a4 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227a:	f000 fc07 	bl	8002a8c <HAL_GetTick>
 800227e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	4b64      	ldr	r3, [pc, #400]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	0790      	lsls	r0, r2, #30
 8002286:	d405      	bmi.n	8002294 <HAL_RCC_OscConfig+0xfc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002288:	f000 fc00 	bl	8002a8c <HAL_GetTick>
 800228c:	1b40      	subs	r0, r0, r5
 800228e:	2802      	cmp	r0, #2
 8002290:	d9f6      	bls.n	8002280 <HAL_RCC_OscConfig+0xe8>
 8002292:	e7c9      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	6922      	ldr	r2, [r4, #16]
 8002298:	f021 01f8 	bic.w	r1, r1, #248	; 0xf8
 800229c:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e00d      	b.n	80022c0 <HAL_RCC_OscConfig+0x128>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f000 fbf1 	bl	8002a8c <HAL_GetTick>
 80022aa:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ac:	4b59      	ldr	r3, [pc, #356]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	0799      	lsls	r1, r3, #30
 80022b2:	d505      	bpl.n	80022c0 <HAL_RCC_OscConfig+0x128>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022b4:	f000 fbea 	bl	8002a8c <HAL_GetTick>
 80022b8:	1b40      	subs	r0, r0, r5
 80022ba:	2802      	cmp	r0, #2
 80022bc:	d9f6      	bls.n	80022ac <HAL_RCC_OscConfig+0x114>
 80022be:	e7b3      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	071a      	lsls	r2, r3, #28
 80022c4:	d403      	bmi.n	80022ce <HAL_RCC_OscConfig+0x136>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	075b      	lsls	r3, r3, #29
 80022ca:	d420      	bmi.n	800230e <HAL_RCC_OscConfig+0x176>
 80022cc:	e084      	b.n	80023d8 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ce:	6962      	ldr	r2, [r4, #20]
 80022d0:	4b52      	ldr	r3, [pc, #328]	; (800241c <HAL_RCC_OscConfig+0x284>)
 80022d2:	b172      	cbz	r2, 80022f2 <HAL_RCC_OscConfig+0x15a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d4:	2201      	movs	r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f000 fbd8 	bl	8002a8c <HAL_GetTick>
 80022dc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b4d      	ldr	r3, [pc, #308]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e2:	079e      	lsls	r6, r3, #30
 80022e4:	d4ef      	bmi.n	80022c6 <HAL_RCC_OscConfig+0x12e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e6:	f000 fbd1 	bl	8002a8c <HAL_GetTick>
 80022ea:	1b40      	subs	r0, r0, r5
 80022ec:	2802      	cmp	r0, #2
 80022ee:	d9f6      	bls.n	80022de <HAL_RCC_OscConfig+0x146>
 80022f0:	e79a      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f000 fbca 	bl	8002a8c <HAL_GetTick>
 80022f8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fa:	4b46      	ldr	r3, [pc, #280]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80022fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fe:	0798      	lsls	r0, r3, #30
 8002300:	d5e1      	bpl.n	80022c6 <HAL_RCC_OscConfig+0x12e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002302:	f000 fbc3 	bl	8002a8c <HAL_GetTick>
 8002306:	1b40      	subs	r0, r0, r5
 8002308:	2802      	cmp	r0, #2
 800230a:	d9f6      	bls.n	80022fa <HAL_RCC_OscConfig+0x162>
 800230c:	e78c      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002312:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002316:	d10b      	bne.n	8002330 <HAL_RCC_OscConfig+0x198>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002318:	9201      	str	r2, [sp, #4]
 800231a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800231c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800232c:	2501      	movs	r5, #1
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x19a>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8002330:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002332:	4b3b      	ldr	r3, [pc, #236]	; (8002420 <HAL_RCC_OscConfig+0x288>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	05d1      	lsls	r1, r2, #23
 8002338:	d504      	bpl.n	8002344 <HAL_RCC_OscConfig+0x1ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233a:	68a2      	ldr	r2, [r4, #8]
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 800233e:	2a01      	cmp	r2, #1
 8002340:	d111      	bne.n	8002366 <HAL_RCC_OscConfig+0x1ce>
 8002342:	e016      	b.n	8002372 <HAL_RCC_OscConfig+0x1da>
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800234c:	f000 fb9e 	bl	8002a8c <HAL_GetTick>
 8002350:	4606      	mov	r6, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002352:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_RCC_OscConfig+0x288>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	05da      	lsls	r2, r3, #23
 8002358:	d4ef      	bmi.n	800233a <HAL_RCC_OscConfig+0x1a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f000 fb97 	bl	8002a8c <HAL_GetTick>
 800235e:	1b80      	subs	r0, r0, r6
 8002360:	2802      	cmp	r0, #2
 8002362:	d9f6      	bls.n	8002352 <HAL_RCC_OscConfig+0x1ba>
 8002364:	e760      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	2a05      	cmp	r2, #5
 8002368:	d108      	bne.n	800237c <HAL_RCC_OscConfig+0x1e4>
 800236a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800236c:	f042 0204 	orr.w	r2, r2, #4
 8002370:	671a      	str	r2, [r3, #112]	; 0x70
 8002372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002374:	f042 0201 	orr.w	r2, r2, #1
 8002378:	671a      	str	r2, [r3, #112]	; 0x70
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1f6>
 800237c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800237e:	f021 0101 	bic.w	r1, r1, #1
 8002382:	6719      	str	r1, [r3, #112]	; 0x70
 8002384:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002386:	f021 0104 	bic.w	r1, r1, #4
 800238a:	6719      	str	r1, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800238c:	b172      	cbz	r2, 80023ac <HAL_RCC_OscConfig+0x214>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238e:	f000 fb7d 	bl	8002a8c <HAL_GetTick>
 8002392:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	079b      	lsls	r3, r3, #30
 800239a:	d40e      	bmi.n	80023ba <HAL_RCC_OscConfig+0x222>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800239c:	f000 fb76 	bl	8002a8c <HAL_GetTick>
 80023a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80023a4:	1b80      	subs	r0, r0, r6
 80023a6:	4298      	cmp	r0, r3
 80023a8:	d9f4      	bls.n	8002394 <HAL_RCC_OscConfig+0x1fc>
 80023aa:	e73d      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ac:	f000 fb6e 	bl	8002a8c <HAL_GetTick>
 80023b0:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023b2:	4b18      	ldr	r3, [pc, #96]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80023b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b6:	0798      	lsls	r0, r3, #30
 80023b8:	d406      	bmi.n	80023c8 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ba:	b16d      	cbz	r5, 80023d8 <HAL_RCC_OscConfig+0x240>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80023be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
 80023c6:	e007      	b.n	80023d8 <HAL_RCC_OscConfig+0x240>
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f000 fb60 	bl	8002a8c <HAL_GetTick>
 80023cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80023d0:	1b80      	subs	r0, r0, r6
 80023d2:	4298      	cmp	r0, r3
 80023d4:	d9ed      	bls.n	80023b2 <HAL_RCC_OscConfig+0x21a>
 80023d6:	e727      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d8:	69a3      	ldr	r3, [r4, #24]
 80023da:	b90b      	cbnz	r3, 80023e0 <HAL_RCC_OscConfig+0x248>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80023dc:	2000      	movs	r0, #0
 80023de:	e04e      	b.n	800247e <HAL_RCC_OscConfig+0x2e6>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e0:	4a0c      	ldr	r2, [pc, #48]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	6892      	ldr	r2, [r2, #8]
 80023e4:	f002 020c 	and.w	r2, r2, #12
 80023e8:	2a08      	cmp	r2, #8
 80023ea:	f43f aed8 	beq.w	800219e <HAL_RCC_OscConfig+0x6>
 80023ee:	4d0d      	ldr	r5, [pc, #52]	; (8002424 <HAL_RCC_OscConfig+0x28c>)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	f04f 0300 	mov.w	r3, #0
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f8:	d134      	bne.n	8002464 <HAL_RCC_OscConfig+0x2cc>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fa:	f000 fb47 	bl	8002a8c <HAL_GetTick>
 80023fe:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_RCC_OscConfig+0x27c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	0191      	lsls	r1, r2, #6
 8002406:	d50f      	bpl.n	8002428 <HAL_RCC_OscConfig+0x290>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002408:	f000 fb40 	bl	8002a8c <HAL_GetTick>
 800240c:	1b80      	subs	r0, r0, r6
 800240e:	2802      	cmp	r0, #2
 8002410:	d9f6      	bls.n	8002400 <HAL_RCC_OscConfig+0x268>
 8002412:	e709      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
 8002414:	40023800 	.word	0x40023800
 8002418:	42470000 	.word	0x42470000
 800241c:	42470e80 	.word	0x42470e80
 8002420:	40007000 	.word	0x40007000
 8002424:	42470060 	.word	0x42470060
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002428:	69e2      	ldr	r2, [r4, #28]
 800242a:	6a21      	ldr	r1, [r4, #32]
 800242c:	4311      	orrs	r1, r2
 800242e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002430:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
 8002434:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002436:	ea41 6202 	orr.w	r2, r1, r2, lsl #24
 800243a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800243c:	0849      	lsrs	r1, r1, #1
 800243e:	3901      	subs	r1, #1
 8002440:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002444:	605a      	str	r2, [r3, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002446:	2301      	movs	r3, #1
 8002448:	602b      	str	r3, [r5, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f000 fb1f 	bl	8002a8c <HAL_GetTick>
 800244e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x2ec>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	019a      	lsls	r2, r3, #6
 8002456:	d4c1      	bmi.n	80023dc <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002458:	f000 fb18 	bl	8002a8c <HAL_GetTick>
 800245c:	1b00      	subs	r0, r0, r4
 800245e:	2802      	cmp	r0, #2
 8002460:	d9f6      	bls.n	8002450 <HAL_RCC_OscConfig+0x2b8>
 8002462:	e6e1      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f000 fb12 	bl	8002a8c <HAL_GetTick>
 8002468:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x2ec>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	019b      	lsls	r3, r3, #6
 8002470:	d5b4      	bpl.n	80023dc <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002472:	f000 fb0b 	bl	8002a8c <HAL_GetTick>
 8002476:	1b00      	subs	r0, r0, r4
 8002478:	2802      	cmp	r0, #2
 800247a:	d9f6      	bls.n	800246a <HAL_RCC_OscConfig+0x2d2>
 800247c:	e6d4      	b.n	8002228 <HAL_RCC_OscConfig+0x90>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800247e:	b002      	add	sp, #8
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800

08002488 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002488:	4913      	ldr	r1, [pc, #76]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x50>)
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800248a:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248c:	688b      	ldr	r3, [r1, #8]
 800248e:	f003 030c 	and.w	r3, r3, #12
 8002492:	2b04      	cmp	r3, #4
 8002494:	d01d      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x4a>
 8002496:	2b08      	cmp	r3, #8
 8002498:	d001      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800249a:	4810      	ldr	r0, [pc, #64]	; (80024dc <HAL_RCC_GetSysClockFreq+0x54>)
 800249c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800249e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	6848      	ldr	r0, [r1, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024a4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a8:	bf14      	ite	ne
 80024aa:	490d      	ldrne	r1, [pc, #52]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x58>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ac:	490b      	ldreq	r1, [pc, #44]	; (80024dc <HAL_RCC_GetSysClockFreq+0x54>)
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ae:	f3c0 1088 	ubfx	r0, r0, #6, #9
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80024b6:	2300      	movs	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b8:	fba0 0101 	umull	r0, r1, r0, r1
 80024bc:	f7fe fb06 	bl	8000acc <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCC_GetSysClockFreq+0x50>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024c8:	3301      	adds	r3, #1
 80024ca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80024cc:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80024d0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024d2:	4803      	ldr	r0, [pc, #12]	; (80024e0 <HAL_RCC_GetSysClockFreq+0x58>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80024d4:	bd08      	pop	{r3, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	00f42400 	.word	0x00f42400
 80024e0:	007a1200 	.word	0x007a1200

080024e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024e4:	b570      	push	{r4, r5, r6, lr}
 80024e6:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e8:	4604      	mov	r4, r0
 80024ea:	b908      	cbnz	r0, 80024f0 <HAL_RCC_ClockConfig+0xc>
  {
    return HAL_ERROR;
 80024ec:	2001      	movs	r0, #1
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024f0:	4b42      	ldr	r3, [pc, #264]	; (80025fc <HAL_RCC_ClockConfig+0x118>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	f002 020f 	and.w	r2, r2, #15
 80024f8:	4291      	cmp	r1, r2
 80024fa:	d803      	bhi.n	8002504 <HAL_RCC_ClockConfig+0x20>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	0796      	lsls	r6, r2, #30
 8002500:	d408      	bmi.n	8002514 <HAL_RCC_ClockConfig+0x30>
 8002502:	e01b      	b.n	800253c <HAL_RCC_ClockConfig+0x58>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002504:	b2ca      	uxtb	r2, r1
 8002506:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	428b      	cmp	r3, r1
 8002510:	d1ec      	bne.n	80024ec <HAL_RCC_ClockConfig+0x8>
 8002512:	e7f3      	b.n	80024fc <HAL_RCC_ClockConfig+0x18>
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002514:	f012 0f04 	tst.w	r2, #4
 8002518:	4b39      	ldr	r3, [pc, #228]	; (8002600 <HAL_RCC_ClockConfig+0x11c>)
 800251a:	d003      	beq.n	8002524 <HAL_RCC_ClockConfig+0x40>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8002522:	6099      	str	r1, [r3, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002524:	0710      	lsls	r0, r2, #28
 8002526:	d503      	bpl.n	8002530 <HAL_RCC_ClockConfig+0x4c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 800252e:	6099      	str	r1, [r3, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	6898      	ldr	r0, [r3, #8]
 8002532:	68a1      	ldr	r1, [r4, #8]
 8002534:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002538:	4301      	orrs	r1, r0
 800253a:	6099      	str	r1, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253c:	07d1      	lsls	r1, r2, #31
 800253e:	d406      	bmi.n	800254e <HAL_RCC_ClockConfig+0x6a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002540:	4b2e      	ldr	r3, [pc, #184]	; (80025fc <HAL_RCC_ClockConfig+0x118>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f002 020f 	and.w	r2, r2, #15
 8002548:	4295      	cmp	r5, r2
 800254a:	d32c      	bcc.n	80025a6 <HAL_RCC_ClockConfig+0xc2>
 800254c:	e032      	b.n	80025b4 <HAL_RCC_ClockConfig+0xd0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800254e:	6863      	ldr	r3, [r4, #4]
 8002550:	4a2b      	ldr	r2, [pc, #172]	; (8002600 <HAL_RCC_ClockConfig+0x11c>)
 8002552:	2b01      	cmp	r3, #1
 8002554:	d103      	bne.n	800255e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800255c:	e008      	b.n	8002570 <HAL_RCC_ClockConfig+0x8c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255e:	1e99      	subs	r1, r3, #2
 8002560:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002562:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002564:	d802      	bhi.n	800256c <HAL_RCC_ClockConfig+0x88>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800256a:	e001      	b.n	8002570 <HAL_RCC_ClockConfig+0x8c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800256c:	f012 0f02 	tst.w	r2, #2
 8002570:	d0bc      	beq.n	80024ec <HAL_RCC_ClockConfig+0x8>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002572:	4a23      	ldr	r2, [pc, #140]	; (8002600 <HAL_RCC_ClockConfig+0x11c>)
 8002574:	6891      	ldr	r1, [r2, #8]
 8002576:	f021 0103 	bic.w	r1, r1, #3
 800257a:	430b      	orrs	r3, r1
 800257c:	6093      	str	r3, [r2, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800257e:	f000 fa85 	bl	8002a8c <HAL_GetTick>
 8002582:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <HAL_RCC_ClockConfig+0x11c>)
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	6863      	ldr	r3, [r4, #4]
 800258a:	f002 020c 	and.w	r2, r2, #12
 800258e:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8002592:	d0d5      	beq.n	8002540 <HAL_RCC_ClockConfig+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002594:	f000 fa7a 	bl	8002a8c <HAL_GetTick>
 8002598:	f241 3388 	movw	r3, #5000	; 0x1388
 800259c:	1b80      	subs	r0, r0, r6
 800259e:	4298      	cmp	r0, r3
 80025a0:	d9f0      	bls.n	8002584 <HAL_RCC_ClockConfig+0xa0>
      {
        return HAL_TIMEOUT;
 80025a2:	2003      	movs	r0, #3

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80025a4:	bd70      	pop	{r4, r5, r6, pc}

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	b2ea      	uxtb	r2, r5
 80025a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	42ab      	cmp	r3, r5
 80025b2:	d19b      	bne.n	80024ec <HAL_RCC_ClockConfig+0x8>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	075a      	lsls	r2, r3, #29
 80025b8:	d506      	bpl.n	80025c8 <HAL_RCC_ClockConfig+0xe4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ba:	4a11      	ldr	r2, [pc, #68]	; (8002600 <HAL_RCC_ClockConfig+0x11c>)
 80025bc:	68e1      	ldr	r1, [r4, #12]
 80025be:	6890      	ldr	r0, [r2, #8]
 80025c0:	f420 50e0 	bic.w	r0, r0, #7168	; 0x1c00
 80025c4:	4301      	orrs	r1, r0
 80025c6:	6091      	str	r1, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025c8:	071b      	lsls	r3, r3, #28
 80025ca:	d507      	bpl.n	80025dc <HAL_RCC_ClockConfig+0xf8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <HAL_RCC_ClockConfig+0x11c>)
 80025ce:	6921      	ldr	r1, [r4, #16]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025d6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80025da:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025dc:	f7ff ff54 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <HAL_RCC_ClockConfig+0x11c>)
 80025e2:	4a08      	ldr	r2, [pc, #32]	; (8002604 <HAL_RCC_ClockConfig+0x120>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025ea:	5cd3      	ldrb	r3, [r2, r3]
 80025ec:	4a06      	ldr	r2, [pc, #24]	; (8002608 <HAL_RCC_ClockConfig+0x124>)
 80025ee:	40d8      	lsrs	r0, r3
 80025f0:	6010      	str	r0, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f000 fa02 	bl	80029fc <HAL_InitTick>

  return HAL_OK;
 80025f8:	2000      	movs	r0, #0
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	40023c00 	.word	0x40023c00
 8002600:	40023800 	.word	0x40023800
 8002604:	080074f0 	.word	0x080074f0
 8002608:	20000008 	.word	0x20000008

0800260c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800260c:	4b01      	ldr	r3, [pc, #4]	; (8002614 <HAL_RCC_GetHCLKFreq+0x8>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000008 	.word	0x20000008

08002618 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002618:	4b04      	ldr	r3, [pc, #16]	; (800262c <HAL_RCC_GetPCLK1Freq+0x14>)
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x18>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002622:	5cd3      	ldrb	r3, [r2, r3]
 8002624:	4a03      	ldr	r2, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002626:	6810      	ldr	r0, [r2, #0]
}
 8002628:	40d8      	lsrs	r0, r3
 800262a:	4770      	bx	lr
 800262c:	40023800 	.word	0x40023800
 8002630:	08007500 	.word	0x08007500
 8002634:	20000008 	.word	0x20000008

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <HAL_RCC_GetPCLK2Freq+0x14>)
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x18>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002642:	5cd3      	ldrb	r3, [r2, r3]
 8002644:	4a03      	ldr	r2, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002646:	6810      	ldr	r0, [r2, #0]
}
 8002648:	40d8      	lsrs	r0, r3
 800264a:	4770      	bx	lr
 800264c:	40023800 	.word	0x40023800
 8002650:	08007500 	.word	0x08007500
 8002654:	20000008 	.word	0x20000008

08002658 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265c:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265e:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002664:	ea02 0407 	and.w	r4, r2, r7

    if(iocurrent == ioposition)
 8002668:	4294      	cmp	r4, r2
 800266a:	f040 80bb 	bne.w	80027e4 <HAL_GPIO_Init+0x18c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266e:	684a      	ldr	r2, [r1, #4]
 8002670:	f022 0610 	bic.w	r6, r2, #16
 8002674:	2e02      	cmp	r6, #2
 8002676:	d116      	bne.n	80026a6 <HAL_GPIO_Init+0x4e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002678:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800267c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002680:	f003 0807 	and.w	r8, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002684:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002688:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800268c:	f04f 090f 	mov.w	r9, #15
 8002690:	fa09 f908 	lsl.w	r9, r9, r8
 8002694:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002698:	690d      	ldr	r5, [r1, #16]
 800269a:	fa05 f808 	lsl.w	r8, r5, r8
 800269e:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3U] = temp;
 80026a2:	f8cc 5020 	str.w	r5, [ip, #32]
 80026a6:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026a8:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ac:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026b0:	fa0c fc05 	lsl.w	ip, ip, r5
 80026b4:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b8:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026bc:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c0:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026c4:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c6:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ca:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80026cc:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d0:	d810      	bhi.n	80026f4 <HAL_GPIO_Init+0x9c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d4:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026d8:	68ce      	ldr	r6, [r1, #12]
 80026da:	40ae      	lsls	r6, r5
 80026dc:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 80026e0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e4:	ea26 0804 	bic.w	r8, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80026e8:	f3c2 1600 	ubfx	r6, r2, #4, #1
 80026ec:	409e      	lsls	r6, r3
 80026ee:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OTYPER = temp;
 80026f2:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026f4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f6:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026fa:	688e      	ldr	r6, [r1, #8]
 80026fc:	40ae      	lsls	r6, r5
 80026fe:	ea4c 0506 	orr.w	r5, ip, r6
      GPIOx->PUPDR = temp;
 8002702:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002704:	00d5      	lsls	r5, r2, #3
 8002706:	d56d      	bpl.n	80027e4 <HAL_GPIO_Init+0x18c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002708:	4e3a      	ldr	r6, [pc, #232]	; (80027f4 <HAL_GPIO_Init+0x19c>)
 800270a:	2500      	movs	r5, #0
 800270c:	9501      	str	r5, [sp, #4]
 800270e:	f8d6 c044 	ldr.w	ip, [r6, #68]	; 0x44
 8002712:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8002716:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
 800271a:	6c76      	ldr	r6, [r6, #68]	; 0x44
 800271c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002720:	9601      	str	r6, [sp, #4]
 8002722:	9e01      	ldr	r6, [sp, #4]
 8002724:	f023 0603 	bic.w	r6, r3, #3
 8002728:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800272c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002730:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
 8002734:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002738:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800273c:	f04f 080f 	mov.w	r8, #15
 8002740:	fa08 f80c 	lsl.w	r8, r8, ip
 8002744:	ea29 0808 	bic.w	r8, r9, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002748:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80027fc <HAL_GPIO_Init+0x1a4>
 800274c:	4548      	cmp	r0, r9
 800274e:	d019      	beq.n	8002784 <HAL_GPIO_Init+0x12c>
 8002750:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8002754:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
 8002758:	42a8      	cmp	r0, r5
 800275a:	d00e      	beq.n	800277a <HAL_GPIO_Init+0x122>
 800275c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002760:	42a8      	cmp	r0, r5
 8002762:	d00c      	beq.n	800277e <HAL_GPIO_Init+0x126>
 8002764:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002768:	42a8      	cmp	r0, r5
 800276a:	d00a      	beq.n	8002782 <HAL_GPIO_Init+0x12a>
 800276c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002770:	42a8      	cmp	r0, r5
 8002772:	bf14      	ite	ne
 8002774:	2507      	movne	r5, #7
 8002776:	2504      	moveq	r5, #4
 8002778:	e004      	b.n	8002784 <HAL_GPIO_Init+0x12c>
 800277a:	2501      	movs	r5, #1
 800277c:	e002      	b.n	8002784 <HAL_GPIO_Init+0x12c>
 800277e:	2502      	movs	r5, #2
 8002780:	e000      	b.n	8002784 <HAL_GPIO_Init+0x12c>
 8002782:	2503      	movs	r5, #3
 8002784:	fa05 f50c 	lsl.w	r5, r5, ip
 8002788:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	60b5      	str	r5, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800278e:	4e1a      	ldr	r6, [pc, #104]	; (80027f8 <HAL_GPIO_Init+0x1a0>)
 8002790:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8002794:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002796:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 800279a:	bf14      	ite	ne
 800279c:	ea44 0c0c 	orrne.w	ip, r4, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80027a0:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 80027a4:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 80027a8:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027aa:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        {
          temp |= iocurrent;
 80027ae:	bf14      	ite	ne
 80027b0:	ea44 0c06 	orrne.w	ip, r4, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80027b4:	ea05 0c06 	andeq.w	ip, r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80027b8:	4e0f      	ldr	r6, [pc, #60]	; (80027f8 <HAL_GPIO_Init+0x1a0>)
 80027ba:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027be:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c2:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 80027c6:	bf14      	ite	ne
 80027c8:	ea44 0c0c 	orrne.w	ip, r4, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80027cc:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80027d0:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 80027d4:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d6:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <HAL_GPIO_Init+0x1a0>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80027da:	bf54      	ite	pl
 80027dc:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80027e0:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 80027e2:	60d4      	str	r4, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e4:	3301      	adds	r3, #1
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	f47f af3a 	bne.w	8002660 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80027ec:	b003      	add	sp, #12
 80027ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013c00 	.word	0x40013c00
 80027fc:	40020000 	.word	0x40020000

08002800 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002804:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002806:	2501      	movs	r5, #1
 8002808:	fa05 f203 	lsl.w	r2, r5, r3
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800280c:	ea02 0401 	and.w	r4, r2, r1

    if(iocurrent == ioposition)
 8002810:	4294      	cmp	r4, r2
 8002812:	d161      	bne.n	80028d8 <HAL_GPIO_DeInit+0xd8>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002814:	f04f 0c03 	mov.w	ip, #3
 8002818:	fa03 f205 	lsl.w	r2, r3, r5
 800281c:	6806      	ldr	r6, [r0, #0]
 800281e:	fa0c f202 	lsl.w	r2, ip, r2
 8002822:	43d2      	mvns	r2, r2

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002824:	fa23 f70c 	lsr.w	r7, r3, ip

    if(iocurrent == ioposition)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002828:	4016      	ands	r6, r2
 800282a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800282e:	6006      	str	r6, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002830:	f003 0807 	and.w	r8, r3, #7
 8002834:	f8d7 9020 	ldr.w	r9, [r7, #32]
 8002838:	260f      	movs	r6, #15
 800283a:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800283e:	fa06 f808 	lsl.w	r8, r6, r8
 8002842:	ea29 0808 	bic.w	r8, r9, r8
 8002846:	f8c7 8020 	str.w	r8, [r7, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800284a:	6887      	ldr	r7, [r0, #8]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800284c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80028ec <HAL_GPIO_DeInit+0xec>

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002850:	4017      	ands	r7, r2
 8002852:	6087      	str	r7, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002854:	6847      	ldr	r7, [r0, #4]
 8002856:	43e4      	mvns	r4, r4
 8002858:	4027      	ands	r7, r4
 800285a:	6047      	str	r7, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285c:	68c7      	ldr	r7, [r0, #12]
 800285e:	403a      	ands	r2, r7
 8002860:	60c2      	str	r2, [r0, #12]
 8002862:	f023 0203 	bic.w	r2, r3, #3
 8002866:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800286a:	f502 329c 	add.w	r2, r2, #79872	; 0x13800

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800286e:	ea03 070c 	and.w	r7, r3, ip

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002872:	f8d2 8008 	ldr.w	r8, [r2, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002876:	00bf      	lsls	r7, r7, #2
 8002878:	40be      	lsls	r6, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800287a:	4548      	cmp	r0, r9
      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800287c:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002880:	d011      	beq.n	80028a6 <HAL_GPIO_DeInit+0xa6>
 8002882:	f509 6980 	add.w	r9, r9, #1024	; 0x400
 8002886:	4548      	cmp	r0, r9
 8002888:	d012      	beq.n	80028b0 <HAL_GPIO_DeInit+0xb0>
 800288a:	4d16      	ldr	r5, [pc, #88]	; (80028e4 <HAL_GPIO_DeInit+0xe4>)
 800288c:	42a8      	cmp	r0, r5
 800288e:	d00c      	beq.n	80028aa <HAL_GPIO_DeInit+0xaa>
 8002890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002894:	42a8      	cmp	r0, r5
 8002896:	d00a      	beq.n	80028ae <HAL_GPIO_DeInit+0xae>
 8002898:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800289c:	42a8      	cmp	r0, r5
 800289e:	bf14      	ite	ne
 80028a0:	2507      	movne	r5, #7
 80028a2:	2504      	moveq	r5, #4
 80028a4:	e004      	b.n	80028b0 <HAL_GPIO_DeInit+0xb0>
 80028a6:	2500      	movs	r5, #0
 80028a8:	e002      	b.n	80028b0 <HAL_GPIO_DeInit+0xb0>
 80028aa:	2502      	movs	r5, #2
 80028ac:	e000      	b.n	80028b0 <HAL_GPIO_DeInit+0xb0>
 80028ae:	4665      	mov	r5, ip
 80028b0:	40bd      	lsls	r5, r7
 80028b2:	45a8      	cmp	r8, r5
 80028b4:	d110      	bne.n	80028d8 <HAL_GPIO_DeInit+0xd8>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80028b6:	6895      	ldr	r5, [r2, #8]
 80028b8:	ea25 0606 	bic.w	r6, r5, r6
 80028bc:	6096      	str	r6, [r2, #8]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_GPIO_DeInit+0xe8>)
 80028c0:	6815      	ldr	r5, [r2, #0]
 80028c2:	4025      	ands	r5, r4
 80028c4:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80028c6:	6855      	ldr	r5, [r2, #4]
 80028c8:	4025      	ands	r5, r4
 80028ca:	6055      	str	r5, [r2, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80028cc:	6895      	ldr	r5, [r2, #8]
 80028ce:	4025      	ands	r5, r4
 80028d0:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80028d2:	68d5      	ldr	r5, [r2, #12]
 80028d4:	402c      	ands	r4, r5
 80028d6:	60d4      	str	r4, [r2, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d8:	3301      	adds	r3, #1
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d193      	bne.n	8002806 <HAL_GPIO_DeInit+0x6>
        EXTI->RTSR &= ~((uint32_t)iocurrent);
        EXTI->FTSR &= ~((uint32_t)iocurrent);
      }
    }
  }
}
 80028de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028e2:	bf00      	nop
 80028e4:	40020800 	.word	0x40020800
 80028e8:	40013c00 	.word	0x40013c00
 80028ec:	40020000 	.word	0x40020000

080028f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028f0:	6903      	ldr	r3, [r0, #16]
 80028f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80028f4:	bf0c      	ite	eq
 80028f6:	2000      	moveq	r0, #0
 80028f8:	2001      	movne	r0, #1
 80028fa:	4770      	bx	lr

080028fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028fc:	b902      	cbnz	r2, 8002900 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fe:	0409      	lsls	r1, r1, #16
 8002900:	6181      	str	r1, [r0, #24]
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002904:	6943      	ldr	r3, [r0, #20]
 8002906:	4059      	eors	r1, r3
 8002908:	6141      	str	r1, [r0, #20]
 800290a:	4770      	bx	lr

0800290c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800290e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002910:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002914:	041b      	lsls	r3, r3, #16
 8002916:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800291c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002920:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002924:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002928:	60d3      	str	r3, [r2, #12]
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_NVIC_SetPriority+0x5c>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002938:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	f1c3 0407 	rsb	r4, r3, #7
 8002940:	2c04      	cmp	r4, #4
 8002942:	bf28      	it	cs
 8002944:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002946:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294c:	bf8c      	ite	hi
 800294e:	3b03      	subhi	r3, #3
 8002950:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002952:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002956:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295a:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800295c:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295e:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002960:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002966:	4313      	orrs	r3, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002968:	2800      	cmp	r0, #0
 800296a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800296e:	da05      	bge.n	800297c <HAL_NVIC_SetPriority+0x4c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	b2da      	uxtb	r2, r3
 8002972:	f000 000f 	and.w	r0, r0, #15
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_NVIC_SetPriority+0x60>)
 8002978:	541a      	strb	r2, [r3, r0]
 800297a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800297c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002980:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	e000ed00 	.word	0xe000ed00
 8002990:	e000ed14 	.word	0xe000ed14

08002994 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002994:	0942      	lsrs	r2, r0, #5
 8002996:	2301      	movs	r3, #1
 8002998:	f000 001f 	and.w	r0, r0, #31
 800299c:	fa03 f000 	lsl.w	r0, r3, r0
 80029a0:	4b01      	ldr	r3, [pc, #4]	; (80029a8 <HAL_NVIC_EnableIRQ+0x14>)
 80029a2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100

080029ac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029ac:	3801      	subs	r0, #1
 80029ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80029b2:	d20a      	bcs.n	80029ca <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029b8:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ba:	21f0      	movs	r1, #240	; 0xf0
 80029bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000e010 	.word	0xe000e010
 80029d4:	e000ed00 	.word	0xe000ed00

080029d8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80029da:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80029dc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80029de:	bf0c      	ite	eq
 80029e0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80029e4:	f022 0204 	bicne.w	r2, r2, #4
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	4770      	bx	lr
 80029ec:	e000e010 	.word	0xe000e010

080029f0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80029f0:	4770      	bx	lr

080029f2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80029f2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80029f4:	f7ff fffc 	bl	80029f0 <HAL_SYSTICK_Callback>
 80029f8:	bd08      	pop	{r3, pc}
	...

080029fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029fc:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029fe:	4e0e      	ldr	r6, [pc, #56]	; (8002a38 <HAL_InitTick+0x3c>)
 8002a00:	7833      	ldrb	r3, [r6, #0]
 8002a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	4a0c      	ldr	r2, [pc, #48]	; (8002a3c <HAL_InitTick+0x40>)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a0c:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a0e:	6810      	ldr	r0, [r2, #0]
 8002a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a14:	f7ff ffca 	bl	80029ac <HAL_SYSTICK_Config>
 8002a18:	4605      	mov	r5, r0
 8002a1a:	b950      	cbnz	r0, 8002a32 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1c:	2c0f      	cmp	r4, #15
 8002a1e:	d808      	bhi.n	8002a32 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	4621      	mov	r1, r4
 8002a26:	462a      	mov	r2, r5
 8002a28:	f7ff ff82 	bl	8002930 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a2c:	6074      	str	r4, [r6, #4]
 8002a2e:	4628      	mov	r0, r5
 8002a30:	bd70      	pop	{r4, r5, r6, pc}
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
  {
    return HAL_ERROR;
 8002a32:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002a34:	bd70      	pop	{r4, r5, r6, pc}
 8002a36:	bf00      	nop
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000008 	.word	0x20000008

08002a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a40:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a42:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_Init+0x30>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a52:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a5a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f7ff ff55 	bl	800290c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7ff ffca 	bl	80029fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a68:	f000 f864 	bl	8002b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002a6c:	2000      	movs	r0, #0
 8002a6e:	bd08      	pop	{r3, pc}
 8002a70:	40023c00 	.word	0x40023c00

08002a74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002a74:	4b03      	ldr	r3, [pc, #12]	; (8002a84 <HAL_IncTick+0x10>)
 8002a76:	4904      	ldr	r1, [pc, #16]	; (8002a88 <HAL_IncTick+0x14>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	7809      	ldrb	r1, [r1, #0]
 8002a7c:	440a      	add	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	200009c4 	.word	0x200009c4
 8002a88:	20000000 	.word	0x20000000

08002a8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a8c:	4b01      	ldr	r3, [pc, #4]	; (8002a94 <HAL_GetTick+0x8>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	200009c4 	.word	0x200009c4

08002a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff fff6 	bl	8002a8c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa0:	1c63      	adds	r3, r4, #1
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 8002aa2:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa4:	d002      	beq.n	8002aac <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aa6:	4b04      	ldr	r3, [pc, #16]	; (8002ab8 <HAL_Delay+0x20>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aac:	f7ff ffee 	bl	8002a8c <HAL_GetTick>
 8002ab0:	1b40      	subs	r0, r0, r5
 8002ab2:	42a0      	cmp	r0, r4
 8002ab4:	d3fa      	bcc.n	8002aac <HAL_Delay+0x14>
  {
  }
}
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	20000000 	.word	0x20000000

08002abc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002abc:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <SystemInit+0x40>)
 8002abe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002ac2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <SystemInit+0x44>)
 8002acc:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ace:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ad0:	f041 0101 	orr.w	r1, r1, #1
 8002ad4:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ad6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8002ade:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002ae2:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ae4:	4907      	ldr	r1, [pc, #28]	; (8002b04 <SystemInit+0x48>)
 8002ae6:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ae8:	6819      	ldr	r1, [r3, #0]
 8002aea:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002aee:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002af0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002af2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002af6:	6093      	str	r3, [r2, #8]
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000ed00 	.word	0xe000ed00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	24003010 	.word	0x24003010

08002b08 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002b08:	4770      	bx	lr

08002b0a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002b0a:	e7fe      	b.n	8002b0a <HardFault_Handler>

08002b0c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002b0c:	e7fe      	b.n	8002b0c <MemManage_Handler>

08002b0e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002b0e:	e7fe      	b.n	8002b0e <BusFault_Handler>

08002b10 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002b10:	e7fe      	b.n	8002b10 <UsageFault_Handler>

08002b12 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002b12:	4770      	bx	lr

08002b14 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002b14:	4770      	bx	lr

08002b16 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002b16:	4770      	bx	lr

08002b18 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002b18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b1a:	f7ff ffab 	bl	8002a74 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8002b22:	f7ff bf66 	b.w	80029f2 <HAL_SYSTICK_IRQHandler>
	...

08002b28 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&hexti0);
 8002b28:	4801      	ldr	r0, [pc, #4]	; (8002b30 <EXTI0_IRQHandler+0x8>)
 8002b2a:	f000 b857 	b.w	8002bdc <HAL_EXTI_IRQHandler>
 8002b2e:	bf00      	nop
 8002b30:	20000a78 	.word	0x20000a78

08002b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b34:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_MspInit+0x8c>)
 8002b38:	2400      	movs	r4, #0
 8002b3a:	9400      	str	r4, [sp, #0]
 8002b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b42:	645a      	str	r2, [r3, #68]	; 0x44
 8002b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b46:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002b4a:	9200      	str	r2, [sp, #0]
 8002b4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	9401      	str	r4, [sp, #4]
 8002b50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b60:	2007      	movs	r0, #7
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b64:	f7ff fed2 	bl	800290c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002b68:	4621      	mov	r1, r4
 8002b6a:	4622      	mov	r2, r4
 8002b6c:	f06f 000b 	mvn.w	r0, #11
 8002b70:	f7ff fede 	bl	8002930 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002b74:	4621      	mov	r1, r4
 8002b76:	4622      	mov	r2, r4
 8002b78:	f06f 000a 	mvn.w	r0, #10
 8002b7c:	f7ff fed8 	bl	8002930 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002b80:	4621      	mov	r1, r4
 8002b82:	4622      	mov	r2, r4
 8002b84:	f06f 0009 	mvn.w	r0, #9
 8002b88:	f7ff fed2 	bl	8002930 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	4622      	mov	r2, r4
 8002b90:	f06f 0004 	mvn.w	r0, #4
 8002b94:	f7ff fecc 	bl	8002930 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002b98:	4621      	mov	r1, r4
 8002b9a:	4622      	mov	r2, r4
 8002b9c:	f06f 0003 	mvn.w	r0, #3
 8002ba0:	f7ff fec6 	bl	8002930 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	f06f 0001 	mvn.w	r0, #1
 8002bac:	f7ff fec0 	bl	8002930 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	4622      	mov	r2, r4
 8002bb8:	f7ff feba 	bl	8002930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd10      	pop	{r4, pc}
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002bc4:	b911      	cbnz	r1, 8002bcc <HAL_EXTI_RegisterCallback+0x8>
    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
      break; 
#else
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->Callback = pPendingCbfn;
 8002bc6:	6042      	str	r2, [r0, #4]
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	4608      	mov	r0, r1
      hexti->FallingCallback = pPendingCbfn;
      break; 
#else
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->Callback = pPendingCbfn;
      break;      
 8002bca:	4770      	bx	lr
#endif
    default:
      status = HAL_ERROR;
 8002bcc:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8002bce:	4770      	bx	lr

08002bd0 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if(hexti == NULL)
 8002bd0:	b110      	cbz	r0, 8002bd8 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002bd2:	6001      	str	r1, [r0, #0]
    return HAL_OK;
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	4770      	bx	lr
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if(hexti == NULL)
  {
    return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
    return HAL_OK;
  }
}
 8002bda:	4770      	bx	lr

08002bdc <HAL_EXTI_IRQHandler>:
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif
#endif /* EXTI_D1 */

  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002bdc:	6802      	ldr	r2, [r0, #0]
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002bde:	b508      	push	{r3, lr}
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
#endif
#endif /* EXTI_D1 */

  linepos = (hexti->Line & EXTI_PIN_MASK);
 8002be0:	f002 021f 	and.w	r2, r2, #31
  maskline = (1 << linepos);
 8002be4:	2301      	movs	r3, #1
 8002be6:	fa03 f202 	lsl.w	r2, r3, r2
      hexti->FallingCallback();
    }  
  }
#else  
  /* compute line mask */
  if((EXTI->PR & maskline) != 0x00u)
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <HAL_EXTI_IRQHandler+0x20>)
 8002bec:	6959      	ldr	r1, [r3, #20]
 8002bee:	420a      	tst	r2, r1
 8002bf0:	d003      	beq.n	8002bfa <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8002bf2:	615a      	str	r2, [r3, #20]
    
    /* Call rising/Falling callback */
    if(hexti->Callback != NULL)
 8002bf4:	6843      	ldr	r3, [r0, #4]
 8002bf6:	b103      	cbz	r3, 8002bfa <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->Callback();
 8002bf8:	4798      	blx	r3
 8002bfa:	bd08      	pop	{r3, pc}
 8002bfc:	40013c00 	.word	0x40013c00

08002c00 <BSP_LED_Init>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002c00:	b570      	push	{r4, r5, r6, lr}
 8002c02:	b086      	sub	sp, #24
  GPIO_InitTypeDef gpio_init_structure;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8002c04:	2400      	movs	r4, #0
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <BSP_LED_Init+0x48>)
 8002c08:	9400      	str	r4, [sp, #0]
 8002c0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
  HAL_GPIO_Init(LED_GPIO_PORT [Led], &gpio_init_structure); 
 8002c0c:	4e0f      	ldr	r6, [pc, #60]	; (8002c4c <BSP_LED_Init+0x4c>)
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	f003 0301 	and.w	r3, r3, #1
  
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
 8002c1a:	a906      	add	r1, sp, #24
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef gpio_init_structure;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
 8002c20:	2520      	movs	r5, #32
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
  
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002c22:	2301      	movs	r3, #1
 8002c24:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8002c26:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
 8002c28:	f841 5d14 	str.w	r5, [r1, #-20]!
  LED2_GPIO_CLK_ENABLE();    
  
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
 8002c2c:	2302      	movs	r3, #2
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
  HAL_GPIO_Init(LED_GPIO_PORT [Led], &gpio_init_structure); 
 8002c2e:	4630      	mov	r0, r6
  LED2_GPIO_CLK_ENABLE();    
  
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
  gpio_init_structure.Pull  = GPIO_PULLUP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH; 
 8002c30:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pin   = LED_GPIO_PIN [Led];
  HAL_GPIO_Init(LED_GPIO_PORT [Led], &gpio_init_structure); 
 8002c32:	f7ff fd11 	bl	8002658 <HAL_GPIO_Init>
  
  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_GPIO_PORT [Led], LED_GPIO_PIN [Led], GPIO_PIN_RESET);
 8002c36:	4630      	mov	r0, r6
 8002c38:	4629      	mov	r1, r5
 8002c3a:	4622      	mov	r2, r4
 8002c3c:	f7ff fe5e 	bl	80028fc <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8002c40:	4620      	mov	r0, r4
 8002c42:	b006      	add	sp, #24
 8002c44:	bd70      	pop	{r4, r5, r6, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020000 	.word	0x40020000

08002c50 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002c50:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_GPIO_PORT [Led], (uint16_t)LED_GPIO_PIN [Led], GPIO_PIN_SET);
 8002c52:	4803      	ldr	r0, [pc, #12]	; (8002c60 <BSP_LED_On+0x10>)
 8002c54:	2120      	movs	r1, #32
 8002c56:	2201      	movs	r2, #1
 8002c58:	f7ff fe50 	bl	80028fc <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	bd08      	pop	{r3, pc}
 8002c60:	40020000 	.word	0x40020000

08002c64 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8002c64:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_GPIO_PORT [Led], (uint16_t)LED_GPIO_PIN [Led], GPIO_PIN_RESET);
 8002c66:	4803      	ldr	r0, [pc, #12]	; (8002c74 <BSP_LED_Off+0x10>)
 8002c68:	2120      	movs	r1, #32
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f7ff fe46 	bl	80028fc <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8002c70:	2000      	movs	r0, #0
 8002c72:	bd08      	pop	{r3, pc}
 8002c74:	40020000 	.word	0x40020000

08002c78 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c78:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_GPIO_PORT[Led], (uint16_t)LED_GPIO_PIN[Led]);
 8002c7a:	4803      	ldr	r0, [pc, #12]	; (8002c88 <BSP_LED_Toggle+0x10>)
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	f7ff fe41 	bl	8002904 <HAL_GPIO_TogglePin>
  
  return BSP_ERROR_NONE;
}
 8002c82:	2000      	movs	r0, #0
 8002c84:	bd08      	pop	{r3, pc}
 8002c86:	bf00      	nop
 8002c88:	40020000 	.word	0x40020000

08002c8c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c8c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef gpio_init_structure;
  hExtiButtonHandle[Button] = &hexti13;
 8002c8e:	4d1e      	ldr	r5, [pc, #120]	; (8002d08 <BSP_PB_Init+0x7c>)
 8002c90:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <BSP_PB_Init+0x80>)
 8002c92:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002c96:	b086      	sub	sp, #24
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_KEY_EXTI_Callback};                                                
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_KEY_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={KEY_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  KEY_BUTTON_GPIO_CLK_ENABLE();
 8002c98:	4b1d      	ldr	r3, [pc, #116]	; (8002d10 <BSP_PB_Init+0x84>)
 8002c9a:	2400      	movs	r4, #0
 8002c9c:	9400      	str	r4, [sp, #0]
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca0:	f042 0204 	orr.w	r2, r2, #4
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  gpio_init_structure.Pin = BUTTON_PIN [Button];
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002ca8:	9403      	str	r4, [sp, #12]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_KEY_EXTI_Callback};                                                
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_KEY_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={KEY_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  KEY_BUTTON_GPIO_CLK_ENABLE();
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002cb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb6:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb8:	2302      	movs	r3, #2
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002cba:	4606      	mov	r6, r0
  
  /* Enable the BUTTON clock*/ 
  KEY_BUTTON_GPIO_CLK_ENABLE();
  gpio_init_structure.Pin = BUTTON_PIN [Button];
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cbc:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002cbe:	b929      	cbnz	r1, 8002ccc <BSP_PB_Init+0x40>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;    
 8002cc0:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002cc2:	4814      	ldr	r0, [pc, #80]	; (8002d14 <BSP_PB_Init+0x88>)
 8002cc4:	a901      	add	r1, sp, #4
 8002cc6:	f7ff fcc7 	bl	8002658 <HAL_GPIO_Init>
 8002cca:	e01a      	b.n	8002d02 <BSP_PB_Init+0x76>
  }
  else if(ButtonMode == BUTTON_MODE_EXTI)
 8002ccc:	2901      	cmp	r1, #1
 8002cce:	d118      	bne.n	8002d02 <BSP_PB_Init+0x76>
  {      
    /* Configure Button pin as input with External interrupt */    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; 
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <BSP_PB_Init+0x8c>)
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cd2:	4810      	ldr	r0, [pc, #64]	; (8002d14 <BSP_PB_Init+0x88>)
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
  }
  else if(ButtonMode == BUTTON_MODE_EXTI)
  {      
    /* Configure Button pin as input with External interrupt */    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING; 
 8002cd4:	9302      	str	r3, [sp, #8]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002cd6:	a901      	add	r1, sp, #4
 8002cd8:	f7ff fcbe 	bl	8002658 <HAL_GPIO_Init>
    
    HAL_EXTI_GetHandle(hExtiButtonHandle[Button], BUTTON_EXTI_LINE[Button]);  
 8002cdc:	490f      	ldr	r1, [pc, #60]	; (8002d1c <BSP_PB_Init+0x90>)
 8002cde:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8002ce2:	f7ff ff75 	bl	8002bd0 <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(hExtiButtonHandle[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	4a0d      	ldr	r2, [pc, #52]	; (8002d20 <BSP_PB_Init+0x94>)
 8002cea:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 8002cee:	f7ff ff69 	bl	8002bc4 <HAL_EXTI_RegisterCallback>
      
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002cf2:	2028      	movs	r0, #40	; 0x28
 8002cf4:	210f      	movs	r1, #15
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	f7ff fe1a 	bl	8002930 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002cfc:	2028      	movs	r0, #40	; 0x28
 8002cfe:	f7ff fe49 	bl	8002994 <HAL_NVIC_EnableIRQ>
  }
  
  return BSP_ERROR_NONE;
}
 8002d02:	2000      	movs	r0, #0
 8002d04:	b006      	add	sp, #24
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	20000a10 	.word	0x20000a10
 8002d0c:	200009c8 	.word	0x200009c8
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40020800 	.word	0x40020800
 8002d18:	10110000 	.word	0x10110000
 8002d1c:	0600000d 	.word	0x0600000d
 8002d20:	08002d3b 	.word	0x08002d3b

08002d24 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_KEY: Key Push Button
 * @retval The Button GPIO pin value
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002d24:	b508      	push	{r3, lr}
  return (int32_t)HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8002d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d2a:	4802      	ldr	r0, [pc, #8]	; (8002d34 <BSP_PB_GetState+0x10>)
 8002d2c:	f7ff fde0 	bl	80028f0 <HAL_GPIO_ReadPin>
}
 8002d30:	bd08      	pop	{r3, pc}
 8002d32:	bf00      	nop
 8002d34:	40020800 	.word	0x40020800

08002d38 <BSP_PB_Callback>:
 * @brief  BSP Push Button callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None.
 */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002d38:	4770      	bx	lr

08002d3a <BUTTON_KEY_EXTI_Callback>:
/**
 * @brief  Key EXTI line detection callbacks.
 * @retval None
 */
static void BUTTON_KEY_EXTI_Callback(void)
{   
 8002d3a:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_KEY);
 8002d3c:	2000      	movs	r0, #0
 8002d3e:	f7ff fffb 	bl	8002d38 <BSP_PB_Callback>
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 8002d44:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <MX_USART2_UART_Init+0x28>)
 8002d46:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
 */

/* USART2 init function */ 

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8002d4a:	b508      	push	{r3, lr}
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8002d4c:	210c      	movs	r1, #12

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 8002d4e:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002d52:	2200      	movs	r2, #0
 8002d54:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002d56:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002d58:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002d5a:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d5c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002d5e:	61c2      	str	r2, [r0, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8002d60:	f7ff f84d 	bl	8001dfe <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8002d64:	3000      	adds	r0, #0
 8002d66:	bf18      	it	ne
 8002d68:	2001      	movne	r0, #1
 8002d6a:	bd08      	pop	{r3, pc}
 8002d6c:	40004400 	.word	0x40004400

08002d70 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM) 
{
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d74:	2400      	movs	r4, #0
 8002d76:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <BSP_COM_Init+0x48>)
 8002d78:	9400      	str	r4, [sp, #0]
 8002d7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d7c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002d80:	641a      	str	r2, [r3, #64]	; 0x40
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d84:	9403      	str	r4, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	9b00      	ldr	r3, [sp, #0]
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	9404      	str	r4, [sp, #16]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d90:	230c      	movs	r3, #12
 8002d92:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d94:	2302      	movs	r3, #2
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM) 
{
 8002d96:	4605      	mov	r5, r0
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9a:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d9c:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9e:	4807      	ldr	r0, [pc, #28]	; (8002dbc <BSP_COM_Init+0x4c>)
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da2:	f7ff fc59 	bl	8002658 <HAL_GPIO_Init>
      return BSP_ERROR_MSP_FAILURE;
    }
  }
#endif

  MX_USART2_UART_Init(&hComHandle[COM]);
 8002da6:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <BSP_COM_Init+0x50>)
 8002da8:	eb00 1085 	add.w	r0, r0, r5, lsl #6
 8002dac:	f7ff ffca 	bl	8002d44 <MX_USART2_UART_Init>

  return BSP_ERROR_NONE;
}
 8002db0:	4620      	mov	r0, r4
 8002db2:	b007      	add	sp, #28
 8002db4:	bd30      	pop	{r4, r5, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	200009d0 	.word	0x200009d0

08002dc4 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8002dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <Add_Sample_Service+0xb8>)
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8002dca:	b092      	sub	sp, #72	; 0x48
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 8002dcc:	aa06      	add	r2, sp, #24
 8002dce:	f103 0510 	add.w	r5, r3, #16
 8002dd2:	4617      	mov	r7, r2
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	4614      	mov	r4, r2
 8002dda:	c403      	stmia	r4!, {r0, r1}
 8002ddc:	3308      	adds	r3, #8
 8002dde:	42ab      	cmp	r3, r5
 8002de0:	4622      	mov	r2, r4
 8002de2:	d1f7      	bne.n	8002dd4 <Add_Sample_Service+0x10>
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <Add_Sample_Service+0xbc>)
 8002de6:	ac0a      	add	r4, sp, #40	; 0x28
 8002de8:	f103 0210 	add.w	r2, r3, #16
 8002dec:	4626      	mov	r6, r4
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	6859      	ldr	r1, [r3, #4]
 8002df2:	4625      	mov	r5, r4
 8002df4:	c503      	stmia	r5!, {r0, r1}
 8002df6:	3308      	adds	r3, #8
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	462c      	mov	r4, r5
 8002dfc:	d1f7      	bne.n	8002dee <Add_Sample_Service+0x2a>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <Add_Sample_Service+0xc0>)
 8002e00:	ac0e      	add	r4, sp, #56	; 0x38
 8002e02:	f103 0210 	add.w	r2, r3, #16
 8002e06:	46a0      	mov	r8, r4
 8002e08:	6818      	ldr	r0, [r3, #0]
 8002e0a:	6859      	ldr	r1, [r3, #4]
 8002e0c:	4625      	mov	r5, r4
 8002e0e:	c503      	stmia	r5!, {r0, r1}
 8002e10:	3308      	adds	r3, #8
 8002e12:	4293      	cmp	r3, r2
 8002e14:	462c      	mov	r4, r5
 8002e16:	d1f7      	bne.n	8002e08 <Add_Sample_Service+0x44>
  
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8002e18:	4c1b      	ldr	r4, [pc, #108]	; (8002e88 <Add_Sample_Service+0xc4>)
 8002e1a:	9400      	str	r4, [sp, #0]
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	2002      	movs	r0, #2
 8002e20:	4639      	mov	r1, r7
 8002e22:	2201      	movs	r2, #1
 8002e24:	f7fe fbea 	bl	80015fc <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b108      	cbz	r0, 8002e30 <Add_Sample_Service+0x6c>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8002e2c:	2047      	movs	r0, #71	; 0x47
 8002e2e:	e021      	b.n	8002e74 <Add_Sample_Service+0xb0>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
  
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8002e30:	8820      	ldrh	r0, [r4, #0]
 8002e32:	9301      	str	r3, [sp, #4]
 8002e34:	2710      	movs	r7, #16
 8002e36:	9302      	str	r3, [sp, #8]
 8002e38:	2501      	movs	r5, #1
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <Add_Sample_Service+0xc8>)
 8002e3c:	9305      	str	r3, [sp, #20]
 8002e3e:	9700      	str	r7, [sp, #0]
 8002e40:	2314      	movs	r3, #20
 8002e42:	9703      	str	r7, [sp, #12]
 8002e44:	9504      	str	r5, [sp, #16]
 8002e46:	2102      	movs	r1, #2
 8002e48:	4632      	mov	r2, r6
 8002e4a:	f7fe fc1a 	bl	8001682 <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d1eb      	bne.n	8002e2c <Add_Sample_Service+0x68>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8002e54:	220c      	movs	r2, #12
 8002e56:	8820      	ldrh	r0, [r4, #0]
 8002e58:	9504      	str	r5, [sp, #16]
 8002e5a:	e88d 00ac 	stmia.w	sp, {r2, r3, r5, r7}
 8002e5e:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <Add_Sample_Service+0xcc>)
 8002e60:	9305      	str	r3, [sp, #20]
 8002e62:	2102      	movs	r1, #2
 8002e64:	4642      	mov	r2, r8
 8002e66:	2314      	movs	r3, #20
 8002e68:	f7fe fc0b 	bl	8001682 <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
  
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
 8002e6c:	2800      	cmp	r0, #0
 8002e6e:	bf14      	ite	ne
 8002e70:	2047      	movne	r0, #71	; 0x47
 8002e72:	2000      	moveq	r0, #0
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
}
 8002e74:	b012      	add	sp, #72	; 0x48
 8002e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08007508 	.word	0x08007508
 8002e80:	08007518 	.word	0x08007518
 8002e84:	08007528 	.word	0x08007528
 8002e88:	20000a1a 	.word	0x20000a1a
 8002e8c:	20000a18 	.word	0x20000a18
 8002e90:	20000a1c 	.word	0x20000a1c

08002e94 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 8002e94:	b570      	push	{r4, r5, r6, lr}
  tBleStatus ret;
  
  
  if(BLE_Role == CLIENT) {
 8002e96:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <Make_Connection+0xa0>)
 8002e98:	781c      	ldrb	r4, [r3, #0]
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 8002e9a:	b08c      	sub	sp, #48	; 0x30
 8002e9c:	ad08      	add	r5, sp, #32
  tBleStatus ret;
  
  
  if(BLE_Role == CLIENT) {
 8002e9e:	bb24      	cbnz	r4, 8002eea <Make_Connection+0x56>
    
    printf("Client Create Connection\n");
 8002ea0:	4825      	ldr	r0, [pc, #148]	; (8002f38 <Make_Connection+0xa4>)
 8002ea2:	f000 fe15 	bl	8003ad0 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8002ea6:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <Make_Connection+0xa8>)
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	9008      	str	r0, [sp, #32]
 8002eac:	889b      	ldrh	r3, [r3, #4]
 8002eae:	80ab      	strh	r3, [r5, #4]
    
    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fecd 	bl	8002c50 <BSP_LED_On>
    
    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min, 
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max    
    */
    ret = aci_gap_create_connection(SCAN_P, SCAN_L, PUBLIC_ADDR, bdaddr, PUBLIC_ADDR, CONN_P1, CONN_P2, 0,
 8002eb6:	2328      	movs	r3, #40	; 0x28
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	233c      	movs	r3, #60	; 0x3c
 8002ebe:	9304      	str	r3, [sp, #16]
 8002ec0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ec4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002ec8:	9305      	str	r3, [sp, #20]
 8002eca:	9306      	str	r3, [sp, #24]
 8002ecc:	9400      	str	r4, [sp, #0]
 8002ece:	9403      	str	r4, [sp, #12]
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	4622      	mov	r2, r4
 8002ed4:	462b      	mov	r3, r5
 8002ed6:	f7fe fe26 	bl	8001b26 <aci_gap_create_connection>
                                    SUPERV_TIMEOUT, CONN_L1 , CONN_L2); 
    
    if (ret != 0){
 8002eda:	b340      	cbz	r0, 8002f2e <Make_Connection+0x9a>
      printf("Error while starting connection.\n");
 8002edc:	4818      	ldr	r0, [pc, #96]	; (8002f40 <Make_Connection+0xac>)
 8002ede:	f000 fdf7 	bl	8003ad0 <puts>
      HAL_Delay(100);
 8002ee2:	2064      	movs	r0, #100	; 0x64
 8002ee4:	f7ff fdd8 	bl	8002a98 <HAL_Delay>
 8002ee8:	e021      	b.n	8002f2e <Make_Connection+0x9a>
    }
    
  } else  {
    
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <Make_Connection+0xb0>)
 8002eec:	462c      	mov	r4, r5
 8002eee:	f102 0608 	add.w	r6, r2, #8
 8002ef2:	6810      	ldr	r0, [r2, #0]
 8002ef4:	6851      	ldr	r1, [r2, #4]
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	c303      	stmia	r3!, {r0, r1}
 8002efa:	3208      	adds	r2, #8
 8002efc:	42b2      	cmp	r2, r6
 8002efe:	461c      	mov	r4, r3
 8002f00:	d1f7      	bne.n	8002ef2 <Make_Connection+0x5e>
 8002f02:	6810      	ldr	r0, [r2, #0]
 8002f04:	6018      	str	r0, [r3, #0]
 8002f06:	7913      	ldrb	r3, [r2, #4]
 8002f08:	7123      	strb	r3, [r4, #4]
    
    /* disable scan response */
    hci_le_set_scan_resp_data(0,NULL);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	4601      	mov	r1, r0
 8002f0e:	f7fe faaa 	bl	8001466 <hci_le_set_scan_resp_data>
    /*
    Advertising_Event_Type, Adv_Interval_Min, Adv_Interval_Max, Address_Type, Adv_Filter_Policy,
    Local_Name_Length, Local_Name, Service_Uuid_Length, Service_Uuid_List, Slave_Conn_Interval_Min,
    Slave_Conn_Interval_Max
    */
    ret = aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE,
 8002f12:	2000      	movs	r0, #0
 8002f14:	230d      	movs	r3, #13
 8002f16:	e88d 0009 	stmia.w	sp, {r0, r3}
 8002f1a:	9502      	str	r5, [sp, #8]
 8002f1c:	9003      	str	r0, [sp, #12]
 8002f1e:	9004      	str	r0, [sp, #16]
 8002f20:	9005      	str	r0, [sp, #20]
 8002f22:	9006      	str	r0, [sp, #24]
 8002f24:	4601      	mov	r1, r0
 8002f26:	4602      	mov	r2, r0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	f7fe fd5c 	bl	80019e6 <aci_gap_set_discoverable>
                                   13, local_name, 0, NULL, 0, 0);
    PRINTF("%d\n",ret);
  }
}
 8002f2e:	b00c      	add	sp, #48	; 0x30
 8002f30:	bd70      	pop	{r4, r5, r6, pc}
 8002f32:	bf00      	nop
 8002f34:	2000000d 	.word	0x2000000d
 8002f38:	0800756b 	.word	0x0800756b
 8002f3c:	08007538 	.word	0x08007538
 8002f40:	08007584 	.word	0x08007584
 8002f44:	0800753e 	.word	0x0800753e

08002f48 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_tx_char_handle)
 8002f4a:	4d0f      	ldr	r5, [pc, #60]	; (8002f88 <startReadTXCharHandle+0x40>)
 8002f4c:	782b      	ldrb	r3, [r5, #0]
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8002f4e:	b087      	sub	sp, #28
  if (!start_read_tx_char_handle)
 8002f50:	b9bb      	cbnz	r3, 8002f82 <startReadTXCharHandle+0x3a>
  {    
    PRINTF("Start reading TX Char Handle\n");
    
    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <startReadTXCharHandle+0x44>)
 8002f54:	aa02      	add	r2, sp, #8
 8002f56:	f103 0710 	add.w	r7, r3, #16
 8002f5a:	4616      	mov	r6, r2
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	4614      	mov	r4, r2
 8002f62:	c403      	stmia	r4!, {r0, r1}
 8002f64:	3308      	adds	r3, #8
 8002f66:	42bb      	cmp	r3, r7
 8002f68:	4622      	mov	r2, r4
 8002f6a:	d1f7      	bne.n	8002f5c <startReadTXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8002f6c:	8868      	ldrh	r0, [r5, #2]
 8002f6e:	9600      	str	r6, [sp, #0]
 8002f70:	2302      	movs	r3, #2
 8002f72:	b280      	uxth	r0, r0
 8002f74:	2101      	movs	r1, #1
 8002f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f7a:	f7fe fc18 	bl	80017ae <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	702b      	strb	r3, [r5, #0]
  }
}
 8002f82:	b007      	add	sp, #28
 8002f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f86:	bf00      	nop
 8002f88:	2000086c 	.word	0x2000086c
 8002f8c:	08007518 	.word	0x08007518

08002f90 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 8002f90:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_rx_char_handle)
 8002f92:	4d0f      	ldr	r5, [pc, #60]	; (8002fd0 <startReadRXCharHandle+0x40>)
 8002f94:	792b      	ldrb	r3, [r5, #4]
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 8002f96:	b087      	sub	sp, #28
  if (!start_read_rx_char_handle)
 8002f98:	b9bb      	cbnz	r3, 8002fca <startReadRXCharHandle+0x3a>
  {
    PRINTF("Start reading RX Char Handle\n");
    
    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <startReadRXCharHandle+0x44>)
 8002f9c:	aa02      	add	r2, sp, #8
 8002f9e:	f103 0710 	add.w	r7, r3, #16
 8002fa2:	4616      	mov	r6, r2
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	4614      	mov	r4, r2
 8002faa:	c403      	stmia	r4!, {r0, r1}
 8002fac:	3308      	adds	r3, #8
 8002fae:	42bb      	cmp	r3, r7
 8002fb0:	4622      	mov	r2, r4
 8002fb2:	d1f7      	bne.n	8002fa4 <startReadRXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8002fb4:	8868      	ldrh	r0, [r5, #2]
 8002fb6:	9600      	str	r6, [sp, #0]
 8002fb8:	2302      	movs	r3, #2
 8002fba:	b280      	uxth	r0, r0
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc2:	f7fe fbf4 	bl	80017ae <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	712b      	strb	r3, [r5, #4]
  }
}
 8002fca:	b007      	add	sp, #28
 8002fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2000086c 	.word	0x2000086c
 8002fd4:	08007528 	.word	0x08007528

08002fd8 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	4606      	mov	r6, r0
	int i;
  BSP_LED_Toggle(LED2);
 8002fdc:	2000      	movs	r0, #0
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8002fde:	460d      	mov	r5, r1
	int i;
  BSP_LED_Toggle(LED2);
 8002fe0:	f7ff fe4a 	bl	8002c78 <BSP_LED_Toggle>

  for(i = 0; i < Nb_bytes; i++) {
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	42ac      	cmp	r4, r5
 8002fe8:	da04      	bge.n	8002ff4 <receiveData+0x1c>
    printf("%c", data_buffer[i]);
 8002fea:	5d30      	ldrb	r0, [r6, r4]
 8002fec:	f000 fd2a 	bl	8003a44 <putchar>
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
	int i;
  BSP_LED_Toggle(LED2);

  for(i = 0; i < Nb_bytes; i++) {
 8002ff0:	3401      	adds	r4, #1
 8002ff2:	e7f8      	b.n	8002fe6 <receiveData+0xe>
    printf("%c", data_buffer[i]);
  }
}
 8002ff4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002ff8 <sendData>:
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
  if(BLE_Role == SERVER) {    
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <sendData+0x40>)
 8002ffa:	7812      	ldrb	r2, [r2, #0]
 8002ffc:	2a01      	cmp	r2, #1
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8002ffe:	b513      	push	{r0, r1, r4, lr}
 8003000:	4603      	mov	r3, r0
 8003002:	460c      	mov	r4, r1
  if(BLE_Role == SERVER) {    
 8003004:	d10a      	bne.n	800301c <sendData+0x24>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
 8003006:	4a0d      	ldr	r2, [pc, #52]	; (800303c <sendData+0x44>)
 8003008:	8810      	ldrh	r0, [r2, #0]
 800300a:	4a0d      	ldr	r2, [pc, #52]	; (8003040 <sendData+0x48>)
 800300c:	8811      	ldrh	r1, [r2, #0]
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	4623      	mov	r3, r4
 8003014:	f7fe fb94 	bl	8001740 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8003018:	b002      	add	sp, #8
 800301a:	bd10      	pop	{r4, pc}
{
  if(BLE_Role == SERVER) {    
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 800301c:	4a09      	ldr	r2, [pc, #36]	; (8003044 <sendData+0x4c>)
 800301e:	8850      	ldrh	r0, [r2, #2]
 8003020:	4a09      	ldr	r2, [pc, #36]	; (8003048 <sendData+0x50>)
 8003022:	8811      	ldrh	r1, [r2, #0]
 8003024:	3101      	adds	r1, #1
 8003026:	b280      	uxth	r0, r0
 8003028:	b289      	uxth	r1, r1
 800302a:	4622      	mov	r2, r4
  }
}
 800302c:	b002      	add	sp, #8
 800302e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  if(BLE_Role == SERVER) {    
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8003032:	f7fe bc28 	b.w	8001886 <aci_gatt_write_without_response>
 8003036:	bf00      	nop
 8003038:	2000000d 	.word	0x2000000d
 800303c:	20000a1a 	.word	0x20000a1a
 8003040:	20000a18 	.word	0x20000a18
 8003044:	2000086c 	.word	0x2000086c
 8003048:	20000a16 	.word	0x20000a16

0800304c <enableNotification>:
 * @brief  Enable notification
 * @param  None 
 * @retval None
 */
void enableNotification(void)
{
 800304c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t client_char_conf_data[] = {0x01, 0x00}; // Enable notifications
 800304e:	2301      	movs	r3, #1
 8003050:	f88d 3004 	strb.w	r3, [sp, #4]
 8003054:	2300      	movs	r3, #0
 8003056:	f88d 3005 	strb.w	r3, [sp, #5]
  
  uint32_t tickstart = HAL_GetTick();
 800305a:	f7ff fd17 	bl	8002a8c <HAL_GetTick>
 800305e:	4605      	mov	r5, r0
  
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <enableNotification+0x44>)
 8003062:	4c0c      	ldr	r4, [pc, #48]	; (8003094 <enableNotification+0x48>)
 8003064:	8819      	ldrh	r1, [r3, #0]
 8003066:	8860      	ldrh	r0, [r4, #2]
 8003068:	3102      	adds	r1, #2
 800306a:	b280      	uxth	r0, r0
 800306c:	b289      	uxth	r1, r1
 800306e:	2202      	movs	r2, #2
 8003070:	ab01      	add	r3, sp, #4
 8003072:	f7fe fbd2 	bl	800181a <aci_gatt_write_charac_descriptor>
 8003076:	2846      	cmp	r0, #70	; 0x46
 8003078:	d106      	bne.n	8003088 <enableNotification+0x3c>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 800307a:	f7ff fd07 	bl	8002a8c <HAL_GetTick>
 800307e:	f242 7310 	movw	r3, #10000	; 0x2710
 8003082:	1b40      	subs	r0, r0, r5
 8003084:	4298      	cmp	r0, r3
 8003086:	d9eb      	bls.n	8003060 <enableNotification+0x14>
  }
  notification_enabled = TRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	7163      	strb	r3, [r4, #5]
}
 800308c:	b003      	add	sp, #12
 800308e:	bd30      	pop	{r4, r5, pc}
 8003090:	20000a14 	.word	0x20000a14
 8003094:	2000086c 	.word	0x2000086c

08003098 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8003098:	4603      	mov	r3, r0
  if(handle == RXCharHandle + 1){
 800309a:	4809      	ldr	r0, [pc, #36]	; (80030c0 <Attribute_Modified_CB+0x28>)
 800309c:	8800      	ldrh	r0, [r0, #0]
 800309e:	3001      	adds	r0, #1
 80030a0:	4283      	cmp	r3, r0
 80030a2:	d102      	bne.n	80030aa <Attribute_Modified_CB+0x12>
    receiveData(att_data, data_length);
 80030a4:	4610      	mov	r0, r2
 80030a6:	f7ff bf97 	b.w	8002fd8 <receiveData>
  } else if (handle == TXCharHandle + 2) {        
 80030aa:	4906      	ldr	r1, [pc, #24]	; (80030c4 <Attribute_Modified_CB+0x2c>)
 80030ac:	8809      	ldrh	r1, [r1, #0]
 80030ae:	3102      	adds	r1, #2
 80030b0:	428b      	cmp	r3, r1
 80030b2:	d104      	bne.n	80030be <Attribute_Modified_CB+0x26>
    if(att_data[0] == 0x01)
 80030b4:	7813      	ldrb	r3, [r2, #0]
 80030b6:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 80030b8:	bf04      	itt	eq
 80030ba:	4a03      	ldreq	r2, [pc, #12]	; (80030c8 <Attribute_Modified_CB+0x30>)
 80030bc:	7153      	strbeq	r3, [r2, #5]
 80030be:	4770      	bx	lr
 80030c0:	20000a1c 	.word	0x20000a1c
 80030c4:	20000a18 	.word	0x20000a18
 80030c8:	2000086c 	.word	0x2000086c

080030cc <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 80030cc:	b538      	push	{r3, r4, r5, lr}
  connected = TRUE;
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <GAP_ConnectionComplete_CB+0x2c>)
 80030d0:	2201      	movs	r2, #1
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 80030d2:	4605      	mov	r5, r0
  connected = TRUE;
  connection_handle = handle;
  int i;
  
  printf("Connected to device:");
 80030d4:	4809      	ldr	r0, [pc, #36]	; (80030fc <GAP_ConnectionComplete_CB+0x30>)
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 80030d6:	609a      	str	r2, [r3, #8]
  connection_handle = handle;
 80030d8:	8059      	strh	r1, [r3, #2]
  int i;
  
  printf("Connected to device:");
 80030da:	f000 fc9b 	bl	8003a14 <printf>
  for(i = 5; i > 0; i--){
 80030de:	2405      	movs	r4, #5
    printf("%02X-", addr[i]);
 80030e0:	5d29      	ldrb	r1, [r5, r4]
 80030e2:	4807      	ldr	r0, [pc, #28]	; (8003100 <GAP_ConnectionComplete_CB+0x34>)
 80030e4:	f000 fc96 	bl	8003a14 <printf>
  connected = TRUE;
  connection_handle = handle;
  int i;
  
  printf("Connected to device:");
  for(i = 5; i > 0; i--){
 80030e8:	3c01      	subs	r4, #1
 80030ea:	d1f9      	bne.n	80030e0 <GAP_ConnectionComplete_CB+0x14>
    printf("%02X-", addr[i]);
  }
  printf("%02X\n", addr[0]);
 80030ec:	7829      	ldrb	r1, [r5, #0]
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <GAP_ConnectionComplete_CB+0x38>)
}
 80030f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  
  printf("Connected to device:");
  for(i = 5; i > 0; i--){
    printf("%02X-", addr[i]);
  }
  printf("%02X\n", addr[0]);
 80030f4:	f000 bc8e 	b.w	8003a14 <printf>
 80030f8:	2000086c 	.word	0x2000086c
 80030fc:	080075a5 	.word	0x080075a5
 8003100:	080075ba 	.word	0x080075ba
 8003104:	080075c0 	.word	0x080075c0

08003108 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8003108:	b538      	push	{r3, r4, r5, lr}
  connected = FALSE;
 800310a:	4c07      	ldr	r4, [pc, #28]	; (8003128 <GAP_DisconnectionComplete_CB+0x20>)
  
  printf("Disconnected\n");
 800310c:	4807      	ldr	r0, [pc, #28]	; (800312c <GAP_DisconnectionComplete_CB+0x24>)
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 800310e:	2500      	movs	r5, #0
 8003110:	60a5      	str	r5, [r4, #8]
  
  printf("Disconnected\n");
 8003112:	f000 fcdd 	bl	8003ad0 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <GAP_DisconnectionComplete_CB+0x28>)
 8003118:	2201      	movs	r2, #1
 800311a:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 800311c:	7165      	strb	r5, [r4, #5]
  start_read_tx_char_handle = FALSE;
 800311e:	7025      	strb	r5, [r4, #0]
  start_read_rx_char_handle = FALSE;
 8003120:	7125      	strb	r5, [r4, #4]
  end_read_tx_char_handle = FALSE;
 8003122:	7325      	strb	r5, [r4, #12]
  end_read_rx_char_handle = FALSE;
 8003124:	7365      	strb	r5, [r4, #13]
 8003126:	bd38      	pop	{r3, r4, r5, pc}
 8003128:	2000086c 	.word	0x2000086c
 800312c:	080075c6 	.word	0x080075c6
 8003130:	2000000c 	.word	0x2000000c

08003134 <GATT_Notification_CB>:
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
  if (attr_handle == tx_handle+1) {
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <GATT_Notification_CB+0x14>)
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	4298      	cmp	r0, r3
 800313c:	d102      	bne.n	8003144 <GATT_Notification_CB+0x10>
    receiveData(attr_value, attr_len);
 800313e:	4610      	mov	r0, r2
 8003140:	f7ff bf4a 	b.w	8002fd8 <receiveData>
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000a14 	.word	0x20000a14

0800314c <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 800314c:	7803      	ldrb	r3, [r0, #0]
 800314e:	2b04      	cmp	r3, #4
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8003150:	4602      	mov	r2, r0
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8003152:	d161      	bne.n	8003218 <user_notify+0xcc>
    return;
  
  switch(event_pckt->evt){
 8003154:	7843      	ldrb	r3, [r0, #1]
 8003156:	2b3e      	cmp	r3, #62	; 0x3e
 8003158:	d005      	beq.n	8003166 <user_notify+0x1a>
 800315a:	2bff      	cmp	r3, #255	; 0xff
 800315c:	d00b      	beq.n	8003176 <user_notify+0x2a>
 800315e:	2b05      	cmp	r3, #5
 8003160:	d15a      	bne.n	8003218 <user_notify+0xcc>
    
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8003162:	f7ff bfd1 	b.w	8003108 <GAP_DisconnectionComplete_CB>
    
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      switch(evt->subevent){
 8003166:	78c3      	ldrb	r3, [r0, #3]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d155      	bne.n	8003218 <user_notify+0xcc>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 800316c:	3009      	adds	r0, #9
 800316e:	f8b2 1005 	ldrh.w	r1, [r2, #5]
 8003172:	f7ff bfab 	b.w	80030cc <GAP_ConnectionComplete_CB>
    break;
    
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 8003176:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 800317a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800317e:	428b      	cmp	r3, r1
 8003180:	d018      	beq.n	80031b4 <user_notify+0x68>
 8003182:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8003186:	d204      	bcs.n	8003192 <user_notify+0x46>
 8003188:	f640 4101 	movw	r1, #3073	; 0xc01
 800318c:	428b      	cmp	r3, r1
 800318e:	d006      	beq.n	800319e <user_notify+0x52>
 8003190:	4770      	bx	lr
 8003192:	d02e      	beq.n	80031f2 <user_notify+0xa6>
 8003194:	f640 4112 	movw	r1, #3090	; 0xc12
 8003198:	428b      	cmp	r3, r1
 800319a:	d012      	beq.n	80031c2 <user_notify+0x76>
 800319c:	4770      	bx	lr
        
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <user_notify+0xd0>)
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80031a0:	7a51      	ldrb	r1, [r2, #9]
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
        
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 80031a8:	2b01      	cmp	r3, #1
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80031aa:	bf0c      	ite	eq
 80031ac:	320c      	addeq	r2, #12
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80031ae:	320a      	addne	r2, #10
 80031b0:	f7ff bf72 	b.w	8003098 <Attribute_Modified_CB>
        }
        break;
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 80031b4:	79c1      	ldrb	r1, [r0, #7]
 80031b6:	8900      	ldrh	r0, [r0, #8]
 80031b8:	3902      	subs	r1, #2
 80031ba:	b2c9      	uxtb	r1, r1
 80031bc:	320a      	adds	r2, #10
 80031be:	f7ff bfb9 	b.w	8003134 <GATT_Notification_CB>
        }
        break;
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 80031c2:	4b17      	ldr	r3, [pc, #92]	; (8003220 <user_notify+0xd4>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	bb3b      	cbnz	r3, 8003218 <user_notify+0xcc>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <user_notify+0xd8>)
 80031ca:	7819      	ldrb	r1, [r3, #0]
 80031cc:	b131      	cbz	r1, 80031dc <user_notify+0x90>
 80031ce:	7b19      	ldrb	r1, [r3, #12]
 80031d0:	b921      	cbnz	r1, 80031dc <user_notify+0x90>
          {
            tx_handle = resp->attr_handle;
 80031d2:	4b15      	ldr	r3, [pc, #84]	; (8003228 <user_notify+0xdc>)
 80031d4:	8901      	ldrh	r1, [r0, #8]
 80031d6:	8019      	strh	r1, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 80031d8:	4814      	ldr	r0, [pc, #80]	; (800322c <user_notify+0xe0>)
 80031da:	e008      	b.n	80031ee <user_notify+0xa2>
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 80031dc:	791b      	ldrb	r3, [r3, #4]
 80031de:	b1db      	cbz	r3, 8003218 <user_notify+0xcc>
 80031e0:	4b10      	ldr	r3, [pc, #64]	; (8003224 <user_notify+0xd8>)
 80031e2:	7b5b      	ldrb	r3, [r3, #13]
 80031e4:	b9c3      	cbnz	r3, 8003218 <user_notify+0xcc>
          {
            rx_handle = resp->attr_handle;
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <user_notify+0xe4>)
 80031e8:	8911      	ldrh	r1, [r2, #8]
            printf("RX Char Handle %04X\n", rx_handle);
 80031ea:	4812      	ldr	r0, [pc, #72]	; (8003234 <user_notify+0xe8>)
            tx_handle = resp->attr_handle;
            printf("TX Char Handle %04X\n", tx_handle);
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
 80031ec:	8019      	strh	r1, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 80031ee:	f000 bc11 	b.w	8003a14 <printf>
          }
        }
        break;
        
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 80031f2:	4b0b      	ldr	r3, [pc, #44]	; (8003220 <user_notify+0xd4>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	b97b      	cbnz	r3, 8003218 <user_notify+0xcc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <user_notify+0xd8>)
 80031fa:	7819      	ldrb	r1, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	b121      	cbz	r1, 800320a <user_notify+0xbe>
 8003200:	7b19      	ldrb	r1, [r3, #12]
 8003202:	b911      	cbnz	r1, 800320a <user_notify+0xbe>
          {
            end_read_tx_char_handle = TRUE;
 8003204:	2201      	movs	r2, #1
 8003206:	731a      	strb	r2, [r3, #12]
 8003208:	4770      	bx	lr
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800320a:	7912      	ldrb	r2, [r2, #4]
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <user_notify+0xd8>)
 800320e:	b11a      	cbz	r2, 8003218 <user_notify+0xcc>
 8003210:	7b5a      	ldrb	r2, [r3, #13]
 8003212:	b90a      	cbnz	r2, 8003218 <user_notify+0xcc>
          {
            end_read_rx_char_handle = TRUE;
 8003214:	2201      	movs	r2, #1
 8003216:	735a      	strb	r2, [r3, #13]
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	2000097b 	.word	0x2000097b
 8003220:	2000000d 	.word	0x2000000d
 8003224:	2000086c 	.word	0x2000086c
 8003228:	20000a14 	.word	0x20000a14
 800322c:	080075d3 	.word	0x080075d3
 8003230:	20000a16 	.word	0x20000a16
 8003234:	080075e8 	.word	0x080075e8

08003238 <BSP_SPI1_SendRecv>:
  * @param  pData: Data
  * @param  len: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
 8003238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800323a:	460b      	mov	r3, r1
 800323c:	4614      	mov	r4, r2
 800323e:	4605      	mov	r5, r0
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
  
  if(HAL_SPI_TransmitReceive(&hbusspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8003240:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003244:	9200      	str	r2, [sp, #0]
 8003246:	4629      	mov	r1, r5
 8003248:	461a      	mov	r2, r3
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <BSP_SPI1_SendRecv+0x28>)
 800324c:	4623      	mov	r3, r4
 800324e:	f7fe fe98 	bl	8001f82 <HAL_SPI_TransmitReceive>
 8003252:	2800      	cmp	r0, #0
  {
      ret = len;
  }
  return ret;
}
 8003254:	bf0c      	ite	eq
 8003256:	4620      	moveq	r0, r4
 8003258:	f06f 0005 	mvnne.w	r0, #5
 800325c:	b003      	add	sp, #12
 800325e:	bd30      	pop	{r4, r5, pc}
 8003260:	20000a20 	.word	0x20000a20

08003264 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 8003264:	f7ff bc12 	b.w	8002a8c <HAL_GetTick>

08003268 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <MX_SPI1_Init+0x38>)
 800326a:	f44f 7c82 	mov.w	ip, #260	; 0x104
}

/* SPI1 init function */ 

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800326e:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003270:	f44f 7100 	mov.w	r1, #512	; 0x200

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8003274:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003278:	2200      	movs	r2, #0
 800327a:	6082      	str	r2, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800327c:	60c2      	str	r2, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800327e:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003280:	6142      	str	r2, [r0, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8003282:	6181      	str	r1, [r0, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003284:	6202      	str	r2, [r0, #32]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003286:	2118      	movs	r1, #24
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8003288:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328a:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 800328c:	220a      	movs	r2, #10
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800328e:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 10;
 8003290:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8003292:	f7fe fe39 	bl	8001f08 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8003296:	3000      	adds	r0, #0
 8003298:	bf18      	it	ne
 800329a:	2001      	movne	r0, #1
 800329c:	bd08      	pop	{r3, pc}
 800329e:	bf00      	nop
 80032a0:	40013000 	.word	0x40013000

080032a4 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
 80032a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  hbusspi1.Instance  = SPI1;
 80032a8:	4d1c      	ldr	r5, [pc, #112]	; (800331c <BSP_SPI1_Init+0x78>)
 80032aa:	4b1d      	ldr	r3, [pc, #116]	; (8003320 <BSP_SPI1_Init+0x7c>)
 80032ac:	602b      	str	r3, [r5, #0]
/**
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
 80032ae:	b086      	sub	sp, #24
  int32_t ret = BSP_ERROR_NONE;
  
  hbusspi1.Instance  = SPI1;
  if (HAL_SPI_GetState(&hbusspi1) == HAL_SPI_STATE_RESET) 
 80032b0:	4628      	mov	r0, r5
 80032b2:	f7fe ff6e 	bl	8002192 <HAL_SPI_GetState>
 80032b6:	4604      	mov	r4, r0
 80032b8:	b108      	cbz	r0, 80032be <BSP_SPI1_Init+0x1a>
  * @brief  Initializes SPI HAL.
  * @retval None
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void) {
  int32_t ret = BSP_ERROR_NONE;
 80032ba:	2000      	movs	r0, #0
 80032bc:	e02b      	b.n	8003316 <BSP_SPI1_Init+0x72>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032be:	4b19      	ldr	r3, [pc, #100]	; (8003324 <BSP_SPI1_Init+0x80>)
 80032c0:	9000      	str	r0, [sp, #0]
 80032c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032c8:	645a      	str	r2, [r3, #68]	; 0x44
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	9003      	str	r0, [sp, #12]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d6:	4814      	ldr	r0, [pc, #80]	; (8003328 <BSP_SPI1_Init+0x84>)
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032d8:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032de:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032e0:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e2:	a901      	add	r1, sp, #4
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e6:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032ea:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ec:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ee:	f7ff f9b3 	bl	8002658 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032f2:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f4:	480d      	ldr	r0, [pc, #52]	; (800332c <BSP_SPI1_Init+0x88>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032f6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f8:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	f8cd 8008 	str.w	r8, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003300:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003302:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003304:	f7ff f9a8 	bl	8002658 <HAL_GPIO_Init>
      }
    }
#endif   
    
    /* Init the SPI */
    if (MX_SPI1_Init(&hbusspi1) != HAL_OK)
 8003308:	4628      	mov	r0, r5
 800330a:	f7ff ffad 	bl	8003268 <MX_SPI1_Init>
 800330e:	2800      	cmp	r0, #0
 8003310:	d0d3      	beq.n	80032ba <BSP_SPI1_Init+0x16>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003312:	f06f 0007 	mvn.w	r0, #7
    }
  } 

  return ret;
}
 8003316:	b006      	add	sp, #24
 8003318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800331c:	20000a20 	.word	0x20000a20
 8003320:	40013000 	.word	0x40013000
 8003324:	40023800 	.word	0x40023800
 8003328:	40020000 	.word	0x40020000
 800332c:	40020400 	.word	0x40020400

08003330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003330:	b530      	push	{r4, r5, lr}
 8003332:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	2300      	movs	r3, #0
 8003336:	4a27      	ldr	r2, [pc, #156]	; (80033d4 <SystemClock_Config+0xa4>)
 8003338:	9301      	str	r3, [sp, #4]
 800333a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800333c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003340:	6411      	str	r1, [r2, #64]	; 0x40
 8003342:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003344:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8003348:	9201      	str	r2, [sp, #4]
 800334a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800334c:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <SystemClock_Config+0xa8>)
 800334e:	9302      	str	r3, [sp, #8]
 8003350:	6811      	ldr	r1, [r2, #0]
 8003352:	f421 4140 	bic.w	r1, r1, #49152	; 0xc000
 8003356:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800335a:	6011      	str	r1, [r2, #0]
 800335c:	6812      	ldr	r2, [r2, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800335e:	930f      	str	r3, [sp, #60]	; 0x3c

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003360:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8003364:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003366:	f44f 73a8 	mov.w	r3, #336	; 0x150

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800336a:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 800336c:	9311      	str	r3, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800336e:	2201      	movs	r2, #1

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003370:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003372:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003374:	2504      	movs	r5, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003376:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003378:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800337a:	a808      	add	r0, sp, #32

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800337c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800337e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003380:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003382:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003384:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003386:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003388:	f7fe ff06 	bl	8002198 <HAL_RCC_OscConfig>
 800338c:	b100      	cbz	r0, 8003390 <SystemClock_Config+0x60>
 800338e:	e7fe      	b.n	800338e <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003390:	220f      	movs	r2, #15
 8003392:	9203      	str	r2, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003394:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003396:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800339a:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800339c:	4621      	mov	r1, r4
 800339e:	a803      	add	r0, sp, #12

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033a0:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033a2:	9206      	str	r2, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033a4:	f7ff f89e 	bl	80024e4 <HAL_RCC_ClockConfig>
 80033a8:	4604      	mov	r4, r0
 80033aa:	b100      	cbz	r0, 80033ae <SystemClock_Config+0x7e>
 80033ac:	e7fe      	b.n	80033ac <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80033ae:	f7ff f92d 	bl	800260c <HAL_RCC_GetHCLKFreq>
 80033b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80033ba:	f7ff faf7 	bl	80029ac <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033be:	4628      	mov	r0, r5
 80033c0:	f7ff fb0a 	bl	80029d8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	4621      	mov	r1, r4
 80033ca:	4622      	mov	r2, r4
 80033cc:	f7ff fab0 	bl	8002930 <HAL_NVIC_SetPriority>
}
 80033d0:	b015      	add	sp, #84	; 0x54
 80033d2:	bd30      	pop	{r4, r5, pc}
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40007000 	.word	0x40007000

080033dc <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80033dc:	b500      	push	{lr}
 80033de:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e0:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033e2:	f7ff fb2d 	bl	8002a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e6:	f7ff ffa3 	bl	8003330 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ea:	4b29      	ldr	r3, [pc, #164]	; (8003490 <main+0xb4>)
 80033ec:	9401      	str	r4, [sp, #4]
 80033ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 80033f0:	4828      	ldr	r0, [pc, #160]	; (8003494 <main+0xb8>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f2:	f042 0204 	orr.w	r2, r2, #4
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
 80033f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fa:	f002 0204 	and.w	r2, r2, #4
 80033fe:	9201      	str	r2, [sp, #4]
 8003400:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003402:	9402      	str	r4, [sp, #8]
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003412:	9202      	str	r2, [sp, #8]
 8003414:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	9403      	str	r4, [sp, #12]
 8003418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341a:	f042 0201 	orr.w	r2, r2, #1
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
 8003420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003422:	f002 0201 	and.w	r2, r2, #1
 8003426:	9203      	str	r2, [sp, #12]
 8003428:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800342a:	9404      	str	r4, [sp, #16]
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	f042 0202 	orr.w	r2, r2, #2
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	f003 0302 	and.w	r3, r3, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 800343a:	4622      	mov	r2, r4

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800343c:	9304      	str	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 800343e:	f44f 7181 	mov.w	r1, #258	; 0x102

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003442:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003444:	2501      	movs	r5, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8003446:	f7ff fa59 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800344a:	4b13      	ldr	r3, [pc, #76]	; (8003498 <main+0xbc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344c:	4811      	ldr	r0, [pc, #68]	; (8003494 <main+0xb8>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800344e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003450:	a905      	add	r1, sp, #20

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003452:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003456:	f7ff f8ff 	bl	8002658 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 800345a:	f44f 7381 	mov.w	r3, #258	; 0x102
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	480d      	ldr	r0, [pc, #52]	; (8003494 <main+0xb8>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8003460:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003464:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003468:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800346a:	f7ff f8f5 	bl	8002658 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800346e:	4621      	mov	r1, r4
 8003470:	4622      	mov	r2, r4
 8003472:	2006      	movs	r0, #6
 8003474:	f7ff fa5c 	bl	8002930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003478:	2006      	movs	r0, #6
 800347a:	f7ff fa8b 	bl	8002994 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_X_CUBE_BLE1_Init();
 800347e:	f000 f941 	bl	8003704 <MX_X_CUBE_BLE1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_GPIO_PIN);
 8003482:	4804      	ldr	r0, [pc, #16]	; (8003494 <main+0xb8>)
 8003484:	2120      	movs	r1, #32
 8003486:	f7ff fa3d 	bl	8002904 <HAL_GPIO_TogglePin>
  while (1)
  {

  /* USER CODE END WHILE */

  MX_X_CUBE_BLE1_Process();
 800348a:	f000 f9eb 	bl	8003864 <MX_X_CUBE_BLE1_Process>
 800348e:	e7fc      	b.n	800348a <main+0xae>
 8003490:	40023800 	.word	0x40023800
 8003494:	40020000 	.word	0x40020000
 8003498:	10110000 	.word	0x10110000

0800349c <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct 
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a0:	2400      	movs	r4, #0
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HCI_TL_SPI_Init+0x60>)
 80034a4:	9400      	str	r4, [sp, #0]
 80034a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80034a8:	4d15      	ldr	r5, [pc, #84]	; (8003500 <HCI_TL_SPI_Init+0x64>)
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	9403      	str	r4, [sp, #12]
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	9300      	str	r3, [sp, #0]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80034ba:	2601      	movs	r6, #1
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034bc:	9b00      	ldr	r3, [sp, #0]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034be:	4b11      	ldr	r3, [pc, #68]	; (8003504 <HCI_TL_SPI_Init+0x68>)
 80034c0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80034c2:	4628      	mov	r0, r5
 80034c4:	a901      	add	r1, sp, #4
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80034c6:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80034c8:	f7ff f8c6 	bl	8002658 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80034cc:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80034d0:	4628      	mov	r0, r5
 80034d2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80034d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034d6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80034dc:	f7ff f8bc 	bl	8002658 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80034e0:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 80034e2:	4628      	mov	r0, r5
 80034e4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80034e6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e8:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ec:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 80034ee:	f7ff f8b3 	bl	8002658 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 80034f2:	f7ff fed7 	bl	80032a4 <BSP_SPI1_Init>
}
 80034f6:	b006      	add	sp, #24
 80034f8:	bd70      	pop	{r4, r5, r6, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020000 	.word	0x40020000
 8003504:	10110000 	.word	0x10110000

08003508 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8003508:	b510      	push	{r4, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 800350a:	4c08      	ldr	r4, [pc, #32]	; (800352c <HCI_TL_SPI_DeInit+0x24>)
 800350c:	2101      	movs	r1, #1
 800350e:	4620      	mov	r0, r4
 8003510:	f7ff f976 	bl	8002800 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8003514:	4620      	mov	r0, r4
 8003516:	2102      	movs	r1, #2
 8003518:	f7ff f972 	bl	8002800 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800351c:	4620      	mov	r0, r4
 800351e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003522:	f7ff f96d 	bl	8002800 <HAL_GPIO_DeInit>
  return 0;
}
 8003526:	2000      	movs	r0, #0
 8003528:	bd10      	pop	{r4, pc}
 800352a:	bf00      	nop
 800352c:	40020000 	.word	0x40020000

08003530 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8003530:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8003532:	4c0a      	ldr	r4, [pc, #40]	; (800355c <HCI_TL_SPI_Reset+0x2c>)
 8003534:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003538:	4620      	mov	r0, r4
 800353a:	2200      	movs	r2, #0
 800353c:	f7ff f9de 	bl	80028fc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8003540:	2005      	movs	r0, #5
 8003542:	f7ff faa9 	bl	8002a98 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8003546:	4620      	mov	r0, r4
 8003548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800354c:	2201      	movs	r2, #1
 800354e:	f7ff f9d5 	bl	80028fc <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8003552:	2005      	movs	r0, #5
 8003554:	f7ff faa0 	bl	8002a98 <HAL_Delay>
  return 0;
}  
 8003558:	2000      	movs	r0, #0
 800355a:	bd10      	pop	{r4, pc}
 800355c:	40020000 	.word	0x40020000

08003560 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003564:	2400      	movs	r4, #0
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
 8003566:	23ff      	movs	r3, #255	; 0xff
 8003568:	f88d 3006 	strb.w	r3, [sp, #6]

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800356c:	4622      	mov	r2, r4
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800356e:	230b      	movs	r3, #11
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8003570:	4606      	mov	r6, r0
 8003572:	460f      	mov	r7, r1

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003574:	481c      	ldr	r0, [pc, #112]	; (80035e8 <HCI_TL_SPI_Receive+0x88>)
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8003576:	f88d 3008 	strb.w	r3, [sp, #8]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800357a:	2102      	movs	r1, #2
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800357c:	f88d 4009 	strb.w	r4, [sp, #9]
 8003580:	f88d 400a 	strb.w	r4, [sp, #10]
 8003584:	f88d 400b 	strb.w	r4, [sp, #11]
 8003588:	f88d 400c 	strb.w	r4, [sp, #12]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800358c:	f7ff f9b6 	bl	80028fc <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8003590:	a802      	add	r0, sp, #8
 8003592:	a904      	add	r1, sp, #16
 8003594:	2205      	movs	r2, #5
 8003596:	f7ff fe4f 	bl	8003238 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 800359a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d119      	bne.n	80035d6 <HCI_TL_SPI_Receive+0x76>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80035a2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80035a6:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 80035aa:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 80035ae:	d013      	beq.n	80035d8 <HCI_TL_SPI_Receive+0x78>
 80035b0:	42bd      	cmp	r5, r7
 80035b2:	bf38      	it	cc
 80035b4:	462f      	movcc	r7, r5
 80035b6:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 80035b8:	42bd      	cmp	r5, r7
 80035ba:	f104 0401 	add.w	r4, r4, #1
 80035be:	d20b      	bcs.n	80035d8 <HCI_TL_SPI_Receive+0x78>
      {                                               
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 80035c0:	f10d 0006 	add.w	r0, sp, #6
 80035c4:	f10d 0107 	add.w	r1, sp, #7
 80035c8:	2201      	movs	r2, #1
 80035ca:	f7ff fe35 	bl	8003238 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80035ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80035d2:	5573      	strb	r3, [r6, r5]
 80035d4:	e7ef      	b.n	80035b6 <HCI_TL_SPI_Receive+0x56>
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
  uint16_t byte_count;
  uint8_t len = 0;
 80035d6:	4625      	mov	r5, r4
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <HCI_TL_SPI_Receive+0x88>)
 80035da:	2102      	movs	r1, #2
 80035dc:	2201      	movs	r2, #1
 80035de:	f7ff f98d 	bl	80028fc <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 80035e2:	4628      	mov	r0, r5
 80035e4:	b007      	add	sp, #28
 80035e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e8:	40020000 	.word	0x40020000

080035ec <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 80035ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ee:	b085      	sub	sp, #20
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80035f0:	230a      	movs	r3, #10
 80035f2:	f88d 3000 	strb.w	r3, [sp]
 80035f6:	2300      	movs	r3, #0
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 80035f8:	4607      	mov	r7, r0
 80035fa:	460d      	mov	r5, r1
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80035fc:	f88d 3001 	strb.w	r3, [sp, #1]
 8003600:	f88d 3002 	strb.w	r3, [sp, #2]
 8003604:	f88d 3003 	strb.w	r3, [sp, #3]
 8003608:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff fa3e 	bl	8002a8c <HAL_GetTick>
 8003610:	4606      	mov	r6, r0
  do
  {
    result = 0;
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8003612:	4818      	ldr	r0, [pc, #96]	; (8003674 <HCI_TL_SPI_Send+0x88>)
 8003614:	2102      	movs	r1, #2
 8003616:	2200      	movs	r2, #0
 8003618:	f7ff f970 	bl	80028fc <HAL_GPIO_WritePin>
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800361c:	4668      	mov	r0, sp
 800361e:	a902      	add	r1, sp, #8
 8003620:	2205      	movs	r2, #5
 8003622:	f7ff fe09 	bl	8003238 <BSP_SPI1_SendRecv>
    
    if(header_slave[0] == 0x02) 
 8003626:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800362a:	2b02      	cmp	r3, #2
        /* Buffer is too small */
        result = -2;
      }
    } else {
      /* SPI is not ready */
      result = -1;
 800362c:	bf18      	it	ne
 800362e:	f04f 34ff 	movne.w	r4, #4294967295
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
    
    /* Read header */  
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
    
    if(header_slave[0] == 0x02) 
 8003632:	d10c      	bne.n	800364e <HCI_TL_SPI_Send+0x62>
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
 8003634:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8003638:	42ab      	cmp	r3, r5
 800363a:	d306      	bcc.n	800364a <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800363c:	4638      	mov	r0, r7
 800363e:	490e      	ldr	r1, [pc, #56]	; (8003678 <HCI_TL_SPI_Send+0x8c>)
 8003640:	462a      	mov	r2, r5
 8003642:	f7ff fdf9 	bl	8003238 <BSP_SPI1_SendRecv>
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
  
  do
  {
    result = 0;
 8003646:	2400      	movs	r4, #0
 8003648:	e001      	b.n	800364e <HCI_TL_SPI_Send+0x62>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
      } 
      else 
      {
        /* Buffer is too small */
        result = -2;
 800364a:	f06f 0401 	mvn.w	r4, #1
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800364e:	4809      	ldr	r0, [pc, #36]	; (8003674 <HCI_TL_SPI_Send+0x88>)
 8003650:	2102      	movs	r1, #2
 8003652:	2201      	movs	r2, #1
 8003654:	f7ff f952 	bl	80028fc <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8003658:	f7ff fa18 	bl	8002a8c <HAL_GetTick>
 800365c:	1b80      	subs	r0, r0, r6
 800365e:	280f      	cmp	r0, #15
 8003660:	d802      	bhi.n	8003668 <HCI_TL_SPI_Send+0x7c>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 8003662:	2c00      	cmp	r4, #0
 8003664:	d1d5      	bne.n	8003612 <HCI_TL_SPI_Send+0x26>
 8003666:	e001      	b.n	800366c <HCI_TL_SPI_Send+0x80>
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
    {
      result = -3;
 8003668:	f06f 0402 	mvn.w	r4, #2
      break;
    }
  } while(result < 0);
  
  return result;
}
 800366c:	4620      	mov	r0, r4
 800366e:	b005      	add	sp, #20
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003672:	bf00      	nop
 8003674:	40020000 	.word	0x40020000
 8003678:	2000087c 	.word	0x2000087c

0800367c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800367c:	b508      	push	{r3, lr}
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800367e:	4805      	ldr	r0, [pc, #20]	; (8003694 <hci_tl_lowlevel_isr+0x18>)
 8003680:	2101      	movs	r1, #1
 8003682:	f7ff f935 	bl	80028f0 <HAL_GPIO_ReadPin>
  */
void hci_tl_lowlevel_isr(void)
{
  /* Call hci_notify_asynch_evt() */
#ifdef HCI_TL
  while(IsDataAvailable())
 8003686:	2801      	cmp	r0, #1
 8003688:	d103      	bne.n	8003692 <hci_tl_lowlevel_isr+0x16>
  {        
    hci_notify_asynch_evt(NULL);
 800368a:	2000      	movs	r0, #0
 800368c:	f7fd fe5c 	bl	8001348 <hci_notify_asynch_evt>
 8003690:	e7f5      	b.n	800367e <hci_tl_lowlevel_isr+0x2>
#endif /* HCI_TL */

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */ 
}
 8003692:	bd08      	pop	{r3, pc}
 8003694:	40020000 	.word	0x40020000

08003698 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */ 
void hci_tl_lowlevel_init(void)
{
 8003698:	b510      	push	{r4, lr}
 800369a:	b088      	sub	sp, #32
  /* USER CODE END hci_tl_lowlevel_init 1 */
#ifdef HCI_TL
  tHciIO fops;  
  
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <hci_tl_lowlevel_init+0x4c>)
 800369e:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <hci_tl_lowlevel_init+0x50>)
 80036a2:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <hci_tl_lowlevel_init+0x54>)
 80036a6:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80036a8:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <hci_tl_lowlevel_init+0x58>)
 80036aa:	9304      	str	r3, [sp, #16]
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80036ac:	4c11      	ldr	r4, [pc, #68]	; (80036f4 <hci_tl_lowlevel_init+0x5c>)
  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
  fops.DeInit  = HCI_TL_SPI_DeInit;
  fops.Send    = HCI_TL_SPI_Send;
  fops.Receive = HCI_TL_SPI_Receive;
  fops.Reset   = HCI_TL_SPI_Reset;
 80036ae:	4b12      	ldr	r3, [pc, #72]	; (80036f8 <hci_tl_lowlevel_init+0x60>)
 80036b0:	9303      	str	r3, [sp, #12]
  fops.GetTick = BSP_GetTick;
  
  hci_register_io_bus (&fops);
 80036b2:	a801      	add	r0, sp, #4
  fops.Init    = HCI_TL_SPI_Init;
  fops.DeInit  = HCI_TL_SPI_DeInit;
  fops.Send    = HCI_TL_SPI_Send;
  fops.Receive = HCI_TL_SPI_Receive;
  fops.Reset   = HCI_TL_SPI_Reset;
  fops.GetTick = BSP_GetTick;
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <hci_tl_lowlevel_init+0x64>)
 80036b6:	9307      	str	r3, [sp, #28]
  
  hci_register_io_bus (&fops);
 80036b8:	f7fd fd58 	bl	800116c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */
  
  /* USER CODE END hci_tl_lowlevel_init 2 */
  
  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80036bc:	4620      	mov	r0, r4
 80036be:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80036c2:	f7ff fa85 	bl	8002bd0 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80036c6:	4620      	mov	r0, r4
 80036c8:	2100      	movs	r1, #0
 80036ca:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <hci_tl_lowlevel_init+0x68>)
 80036cc:	f7ff fa7a 	bl	8002bc4 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80036d0:	2100      	movs	r1, #0
 80036d2:	460a      	mov	r2, r1
 80036d4:	2006      	movs	r0, #6
 80036d6:	f7ff f92b 	bl	8002930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80036da:	2006      	movs	r0, #6
 80036dc:	f7ff f95a 	bl	8002994 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */
  
  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80036e0:	b008      	add	sp, #32
 80036e2:	bd10      	pop	{r4, pc}
 80036e4:	0800349d 	.word	0x0800349d
 80036e8:	08003509 	.word	0x08003509
 80036ec:	080035ed 	.word	0x080035ed
 80036f0:	08003561 	.word	0x08003561
 80036f4:	20000a78 	.word	0x20000a78
 80036f8:	08003531 	.word	0x08003531
 80036fc:	08003265 	.word	0x08003265
 8003700:	0800367d 	.word	0x0800367d

08003704 <MX_X_CUBE_BLE1_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_X_CUBE_BLE1_Init(void)
{
 8003704:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN X_CUBE_BLE1_Init_PreTreatment */
  
  /* USER CODE END X_CUBE_BLE1_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8003706:	4b49      	ldr	r3, [pc, #292]	; (800382c <MX_X_CUBE_BLE1_Init+0x128>)
 8003708:	4c49      	ldr	r4, [pc, #292]	; (8003830 <MX_X_CUBE_BLE1_Init+0x12c>)
 800370a:	6818      	ldr	r0, [r3, #0]
 800370c:	889a      	ldrh	r2, [r3, #4]
  
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
    bnrg_expansion_board = IDB05A1; 
  }
  
  if (BLE_Role == CLIENT) {
 800370e:	4f49      	ldr	r7, [pc, #292]	; (8003834 <MX_X_CUBE_BLE1_Init+0x130>)
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_X_CUBE_BLE1_Init(void)
{
 8003710:	b08f      	sub	sp, #60	; 0x3c
  /* USER CODE BEGIN X_CUBE_BLE1_Init_PreTreatment */
  
  /* USER CODE END X_CUBE_BLE1_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8003712:	ae08      	add	r6, sp, #32
 8003714:	9008      	str	r0, [sp, #32]
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8003716:	f853 0f06 	ldr.w	r0, [r3, #6]!
 800371a:	900a      	str	r0, [sp, #40]	; 0x28
 800371c:	ad0a      	add	r5, sp, #40	; 0x28
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 800371e:	2000      	movs	r0, #0
  
  /* USER CODE END X_CUBE_BLE1_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
  uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8003720:	889b      	ldrh	r3, [r3, #4]
 8003722:	80ab      	strh	r3, [r5, #4]
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8003724:	4601      	mov	r1, r0
  /* USER CODE BEGIN X_CUBE_BLE1_Init_PreTreatment */
  
  /* USER CODE END X_CUBE_BLE1_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t CLIENT_BDADDR[] = {0xbb, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8003726:	80b2      	strh	r2, [r6, #4]
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8003728:	f7ff fab0 	bl	8002c8c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800372c:	2000      	movs	r0, #0
 800372e:	f7ff fa67 	bl	8002c00 <BSP_LED_Init>
    
  BSP_COM_Init(COM1); 
 8003732:	2000      	movs	r0, #0
 8003734:	f7ff fb1c 	bl	8002d70 <BSP_COM_Init>
  uint16_t fwVersion;
  int ret;
  
  User_Init();
  
  hci_init(user_notify, NULL);
 8003738:	483f      	ldr	r0, [pc, #252]	; (8003838 <MX_X_CUBE_BLE1_Init+0x134>)
 800373a:	2100      	movs	r1, #0
 800373c:	f7fd fcf0 	bl	8001120 <hci_init>
      
  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8003740:	f10d 011e 	add.w	r1, sp, #30
 8003744:	f10d 0017 	add.w	r0, sp, #23
 8003748:	f7fd fec0 	bl	80014cc <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 800374c:	f7fd fe2e 	bl	80013ac <hci_reset>
  
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8003750:	483a      	ldr	r0, [pc, #232]	; (800383c <MX_X_CUBE_BLE1_Init+0x138>)
 8003752:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8003756:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800375a:	f000 f95b 	bl	8003a14 <printf>
  
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 800375e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003762:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1; 
 8003764:	bf84      	itt	hi
 8003766:	2301      	movhi	r3, #1
 8003768:	7023      	strbhi	r3, [r4, #0]
  }
  
  if (BLE_Role == CLIENT) {
 800376a:	783b      	ldrb	r3, [r7, #0]
 800376c:	b913      	cbnz	r3, 8003774 <MX_X_CUBE_BLE1_Init+0x70>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 800376e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003772:	e001      	b.n	8003778 <MX_X_CUBE_BLE1_Init+0x74>
  } else {
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8003774:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003778:	900c      	str	r0, [sp, #48]	; 0x30
 800377a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
  }
  
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800377e:	2000      	movs	r0, #0
 8003780:	2106      	movs	r1, #6
 8003782:	aa0c      	add	r2, sp, #48	; 0x30
 8003784:	f7fd fec3 	bl	800150e <aci_hal_write_config_data>
                                  CONFIG_DATA_PUBADDR_LEN,
                                  bdaddr);
  if (ret) {
 8003788:	4601      	mov	r1, r0
 800378a:	b110      	cbz	r0, 8003792 <MX_X_CUBE_BLE1_Init+0x8e>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 800378c:	482c      	ldr	r0, [pc, #176]	; (8003840 <MX_X_CUBE_BLE1_Init+0x13c>)
 800378e:	f000 f941 	bl	8003a14 <printf>
  }
  
  ret = aci_gatt_init();    
 8003792:	f7fd ff14 	bl	80015be <aci_gatt_init>
  if (ret) {
 8003796:	b110      	cbz	r0, 800379e <MX_X_CUBE_BLE1_Init+0x9a>
    printf("GATT_Init failed.\n");
 8003798:	482a      	ldr	r0, [pc, #168]	; (8003844 <MX_X_CUBE_BLE1_Init+0x140>)
 800379a:	f000 f999 	bl	8003ad0 <puts>
  }
  
  if (BLE_Role == SERVER) {
 800379e:	7839      	ldrb	r1, [r7, #0]
 80037a0:	2901      	cmp	r1, #1
 80037a2:	f10d 021a 	add.w	r2, sp, #26
 80037a6:	ab07      	add	r3, sp, #28
 80037a8:	d107      	bne.n	80037ba <MX_X_CUBE_BLE1_Init+0xb6>
    if (bnrg_expansion_board == IDB05A1) {
 80037aa:	7820      	ldrb	r0, [r4, #0]
 80037ac:	2801      	cmp	r0, #1
 80037ae:	d102      	bne.n	80037b6 <MX_X_CUBE_BLE1_Init+0xb2>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80037b0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80037b4:	e007      	b.n	80037c6 <MX_X_CUBE_BLE1_Init+0xc2>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80037b6:	4608      	mov	r0, r1
 80037b8:	e00c      	b.n	80037d4 <MX_X_CUBE_BLE1_Init+0xd0>
    }
  }
  else {
    if (bnrg_expansion_board == IDB05A1) {
 80037ba:	7821      	ldrb	r1, [r4, #0]
 80037bc:	2901      	cmp	r1, #1
 80037be:	d108      	bne.n	80037d2 <MX_X_CUBE_BLE1_Init+0xce>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80037c0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80037c4:	2004      	movs	r0, #4
 80037c6:	2100      	movs	r1, #0
 80037c8:	2207      	movs	r2, #7
 80037ca:	ab06      	add	r3, sp, #24
 80037cc:	f7fe f88e 	bl	80018ec <aci_gap_init_IDB05A1>
 80037d0:	e003      	b.n	80037da <MX_X_CUBE_BLE1_Init+0xd6>
    }
    else {
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80037d2:	2003      	movs	r0, #3
 80037d4:	a906      	add	r1, sp, #24
 80037d6:	f7fe f8c8 	bl	800196a <aci_gap_init_IDB04A1>
    }
  }
  
  if (ret != BLE_STATUS_SUCCESS) {
 80037da:	b110      	cbz	r0, 80037e2 <MX_X_CUBE_BLE1_Init+0xde>
    printf("GAP_Init failed.\n");
 80037dc:	481a      	ldr	r0, [pc, #104]	; (8003848 <MX_X_CUBE_BLE1_Init+0x144>)
 80037de:	f000 f977 	bl	8003ad0 <puts>
  }
    
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80037e2:	4b1a      	ldr	r3, [pc, #104]	; (800384c <MX_X_CUBE_BLE1_Init+0x148>)
 80037e4:	2010      	movs	r0, #16
 80037e6:	2100      	movs	r1, #0
 80037e8:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
 80037ec:	2001      	movs	r0, #1
 80037ee:	9003      	str	r0, [sp, #12]
 80037f0:	460a      	mov	r2, r1
 80037f2:	2307      	movs	r3, #7
 80037f4:	f7fe f957 	bl	8001aa6 <aci_gap_set_auth_requirement>
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret == BLE_STATUS_SUCCESS) {
 80037f8:	b910      	cbnz	r0, 8003800 <MX_X_CUBE_BLE1_Init+0xfc>
    printf("BLE Stack Initialized.\n");
 80037fa:	4815      	ldr	r0, [pc, #84]	; (8003850 <MX_X_CUBE_BLE1_Init+0x14c>)
 80037fc:	f000 f968 	bl	8003ad0 <puts>
  }
  
  if (BLE_Role == SERVER) {
 8003800:	783b      	ldrb	r3, [r7, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d109      	bne.n	800381a <MX_X_CUBE_BLE1_Init+0x116>
    printf("SERVER: BLE Stack Initialized\n");
 8003806:	4813      	ldr	r0, [pc, #76]	; (8003854 <MX_X_CUBE_BLE1_Init+0x150>)
 8003808:	f000 f962 	bl	8003ad0 <puts>
    ret = Add_Sample_Service();
 800380c:	f7ff fada 	bl	8002dc4 <Add_Sample_Service>
    
    if (ret == BLE_STATUS_SUCCESS)
 8003810:	b908      	cbnz	r0, 8003816 <MX_X_CUBE_BLE1_Init+0x112>
      printf("Service added successfully.\n");
 8003812:	4811      	ldr	r0, [pc, #68]	; (8003858 <MX_X_CUBE_BLE1_Init+0x154>)
 8003814:	e002      	b.n	800381c <MX_X_CUBE_BLE1_Init+0x118>
    else
      printf("Error while adding service.\n");
 8003816:	4811      	ldr	r0, [pc, #68]	; (800385c <MX_X_CUBE_BLE1_Init+0x158>)
 8003818:	e000      	b.n	800381c <MX_X_CUBE_BLE1_Init+0x118>
    
  } else {
    printf("CLIENT: BLE Stack Initialized\n");
 800381a:	4811      	ldr	r0, [pc, #68]	; (8003860 <MX_X_CUBE_BLE1_Init+0x15c>)
 800381c:	f000 f958 	bl	8003ad0 <puts>
  }
  
  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 8003820:	2104      	movs	r1, #4
 8003822:	2001      	movs	r0, #1
 8003824:	f7fd fea5 	bl	8001572 <aci_hal_set_tx_power_level>

  /* USER CODE BEGIN X_CUBE_BLE1_Init_PostTreatment */
  
  /* USER CODE END X_CUBE_BLE1_Init_PostTreatment */
}
 8003828:	b00f      	add	sp, #60	; 0x3c
 800382a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800382c:	0800754b 	.word	0x0800754b
 8003830:	2000097b 	.word	0x2000097b
 8003834:	2000000d 	.word	0x2000000d
 8003838:	0800314d 	.word	0x0800314d
 800383c:	080075fd 	.word	0x080075fd
 8003840:	08007611 	.word	0x08007611
 8003844:	08007631 	.word	0x08007631
 8003848:	08007643 	.word	0x08007643
 800384c:	0001e240 	.word	0x0001e240
 8003850:	08007654 	.word	0x08007654
 8003854:	0800766b 	.word	0x0800766b
 8003858:	08007689 	.word	0x08007689
 800385c:	080076a5 	.word	0x080076a5
 8003860:	080076c1 	.word	0x080076c1

08003864 <MX_X_CUBE_BLE1_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_X_CUBE_BLE1_Process(void)
{
 8003864:	b570      	push	{r4, r5, r6, lr}
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
  if (set_connectable) 
 8003866:	4d30      	ldr	r5, [pc, #192]	; (8003928 <MX_X_CUBE_BLE1_Process+0xc4>)
 8003868:	4c30      	ldr	r4, [pc, #192]	; (800392c <MX_X_CUBE_BLE1_Process+0xc8>)
 800386a:	782b      	ldrb	r3, [r5, #0]

/*
 * BlueNRG-MS background task
 */
void MX_X_CUBE_BLE1_Process(void)
{
 800386c:	b086      	sub	sp, #24
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
  if (set_connectable) 
 800386e:	b133      	cbz	r3, 800387e <MX_X_CUBE_BLE1_Process+0x1a>
  {
    /* Establish connection with remote device */
    Make_Connection();
 8003870:	f7ff fb10 	bl	8002e94 <Make_Connection>
    set_connectable = FALSE;
 8003874:	2000      	movs	r0, #0
 8003876:	7028      	strb	r0, [r5, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8003878:	f7ff fa54 	bl	8002d24 <BSP_PB_GetState>
 800387c:	7020      	strb	r0, [r4, #0]
  }
  
  if (BLE_Role == CLIENT) 
 800387e:	4b2c      	ldr	r3, [pc, #176]	; (8003930 <MX_X_CUBE_BLE1_Process+0xcc>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	bb03      	cbnz	r3, 80038c6 <MX_X_CUBE_BLE1_Process+0x62>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
    if (connected && !end_read_tx_char_handle){
 8003884:	4d2b      	ldr	r5, [pc, #172]	; (8003934 <MX_X_CUBE_BLE1_Process+0xd0>)
 8003886:	682b      	ldr	r3, [r5, #0]
 8003888:	b12b      	cbz	r3, 8003896 <MX_X_CUBE_BLE1_Process+0x32>
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <MX_X_CUBE_BLE1_Process+0xd4>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	b913      	cbnz	r3, 8003896 <MX_X_CUBE_BLE1_Process+0x32>
      startReadTXCharHandle();
 8003890:	f7ff fb5a 	bl	8002f48 <startReadTXCharHandle>
 8003894:	e006      	b.n	80038a4 <MX_X_CUBE_BLE1_Process+0x40>
    }
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){      
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	b123      	cbz	r3, 80038a4 <MX_X_CUBE_BLE1_Process+0x40>
 800389a:	4b28      	ldr	r3, [pc, #160]	; (800393c <MX_X_CUBE_BLE1_Process+0xd8>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b90b      	cbnz	r3, 80038a4 <MX_X_CUBE_BLE1_Process+0x40>
      startReadRXCharHandle();
 80038a0:	f7ff fb76 	bl	8002f90 <startReadRXCharHandle>
    }
    
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled) 
 80038a4:	682b      	ldr	r3, [r5, #0]
 80038a6:	b173      	cbz	r3, 80038c6 <MX_X_CUBE_BLE1_Process+0x62>
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <MX_X_CUBE_BLE1_Process+0xd4>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b15b      	cbz	r3, 80038c6 <MX_X_CUBE_BLE1_Process+0x62>
 80038ae:	4b23      	ldr	r3, [pc, #140]	; (800393c <MX_X_CUBE_BLE1_Process+0xd8>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b143      	cbz	r3, 80038c6 <MX_X_CUBE_BLE1_Process+0x62>
 80038b4:	4b22      	ldr	r3, [pc, #136]	; (8003940 <MX_X_CUBE_BLE1_Process+0xdc>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80038bc:	b91b      	cbnz	r3, 80038c6 <MX_X_CUBE_BLE1_Process+0x62>
    {
      BSP_LED_Off(LED2); //end of the connection and chars discovery phase
 80038be:	f7ff f9d1 	bl	8002c64 <BSP_LED_Off>
      enableNotification();
 80038c2:	f7ff fbc3 	bl	800304c <enableNotification>
    }
  }  

  /* Check if the user has pushed the button */  
  if (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state)
 80038c6:	2000      	movs	r0, #0
 80038c8:	f7ff fa2c 	bl	8002d24 <BSP_PB_GetState>
 80038cc:	7823      	ldrb	r3, [r4, #0]
 80038ce:	f1d3 0301 	rsbs	r3, r3, #1
 80038d2:	bf38      	it	cc
 80038d4:	2300      	movcc	r3, #0
 80038d6:	4298      	cmp	r0, r3
 80038d8:	d122      	bne.n	8003920 <MX_X_CUBE_BLE1_Process+0xbc>
  {
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 80038da:	2000      	movs	r0, #0
 80038dc:	f7ff fa22 	bl	8002d24 <BSP_PB_GetState>
 80038e0:	7823      	ldrb	r3, [r4, #0]
 80038e2:	f1d3 0301 	rsbs	r3, r3, #1
 80038e6:	bf38      	it	cc
 80038e8:	2300      	movcc	r3, #0
 80038ea:	4298      	cmp	r0, r3
 80038ec:	d0f5      	beq.n	80038da <MX_X_CUBE_BLE1_Process+0x76>
    
    if(connected && notification_enabled){
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <MX_X_CUBE_BLE1_Process+0xd0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b1ab      	cbz	r3, 8003920 <MX_X_CUBE_BLE1_Process+0xbc>
 80038f4:	4b12      	ldr	r3, [pc, #72]	; (8003940 <MX_X_CUBE_BLE1_Process+0xdc>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	b193      	cbz	r3, 8003920 <MX_X_CUBE_BLE1_Process+0xbc>
      /* Send a toggle command to the remote device */
      uint8_t data[20] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J'};
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <MX_X_CUBE_BLE1_Process+0xe0>)
 80038fc:	aa01      	add	r2, sp, #4
 80038fe:	f103 0610 	add.w	r6, r3, #16
 8003902:	4615      	mov	r5, r2
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	4614      	mov	r4, r2
 800390a:	c403      	stmia	r4!, {r0, r1}
 800390c:	3308      	adds	r3, #8
 800390e:	42b3      	cmp	r3, r6
 8003910:	4622      	mov	r2, r4
 8003912:	d1f7      	bne.n	8003904 <MX_X_CUBE_BLE1_Process+0xa0>
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	6020      	str	r0, [r4, #0]
      sendData(data, sizeof(data));
 8003918:	2114      	movs	r1, #20
 800391a:	4628      	mov	r0, r5
 800391c:	f7ff fb6c 	bl	8002ff8 <sendData>
  /* USER CODE BEGIN X_CUBE_BLE1_Process_PreTreatment */
  
  /* USER CODE END X_CUBE_BLE1_Process_PreTreatment */
  
  User_Process();  
  hci_user_evt_proc();
 8003920:	f7fd fcf2 	bl	8001308 <hci_user_evt_proc>

  /* USER CODE BEGIN X_CUBE_BLE1_Process_PostTreatment */
  
  /* USER CODE END X_CUBE_BLE1_Process_PostTreatment */
}
 8003924:	b006      	add	sp, #24
 8003926:	bd70      	pop	{r4, r5, r6, pc}
 8003928:	2000000c 	.word	0x2000000c
 800392c:	20000a80 	.word	0x20000a80
 8003930:	2000000d 	.word	0x2000000d
 8003934:	20000874 	.word	0x20000874
 8003938:	20000878 	.word	0x20000878
 800393c:	20000879 	.word	0x20000879
 8003940:	20000871 	.word	0x20000871
 8003944:	08007557 	.word	0x08007557

08003948 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003948:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8003988 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800394c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800394e:	f000 b804 	b.w	800395a <LoopCopyDataInit>

08003952 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003952:	4b0e      	ldr	r3, [pc, #56]	; (800398c <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8003954:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003956:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003958:	3104      	adds	r1, #4

0800395a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800395a:	480d      	ldr	r0, [pc, #52]	; (8003990 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 800395c:	4b0d      	ldr	r3, [pc, #52]	; (8003994 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800395e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003960:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003962:	f4ff aff6 	bcc.w	8003952 <CopyDataInit>
  ldr  r2, =_sbss
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8003968:	f000 b803 	b.w	8003972 <LoopFillZerobss>

0800396c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800396c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800396e:	f842 3b04 	str.w	r3, [r2], #4

08003972 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003972:	4b0a      	ldr	r3, [pc, #40]	; (800399c <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8003974:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003976:	f4ff aff9 	bcc.w	800396c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800397a:	f7ff f89f 	bl	8002abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800397e:	f000 f811 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003982:	f7ff fd2b 	bl	80033dc <main>
  bx  lr    
 8003986:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003988:	20018000 	.word	0x20018000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800398c:	080078bc 	.word	0x080078bc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003990:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003994:	20000574 	.word	0x20000574
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003998:	20000574 	.word	0x20000574
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800399c:	20000a88 	.word	0x20000a88

080039a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039a0:	f7ff bffe 	b.w	80039a0 <ADC_IRQHandler>

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <__libc_init_array+0x3c>)
 80039a8:	4d0e      	ldr	r5, [pc, #56]	; (80039e4 <__libc_init_array+0x40>)
 80039aa:	1aed      	subs	r5, r5, r3
 80039ac:	10ad      	asrs	r5, r5, #2
 80039ae:	2400      	movs	r4, #0
 80039b0:	461e      	mov	r6, r3
 80039b2:	42ac      	cmp	r4, r5
 80039b4:	d004      	beq.n	80039c0 <__libc_init_array+0x1c>
 80039b6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80039ba:	4790      	blx	r2
 80039bc:	3401      	adds	r4, #1
 80039be:	e7f8      	b.n	80039b2 <__libc_init_array+0xe>
 80039c0:	f003 fd8a 	bl	80074d8 <_init>
 80039c4:	4d08      	ldr	r5, [pc, #32]	; (80039e8 <__libc_init_array+0x44>)
 80039c6:	4b09      	ldr	r3, [pc, #36]	; (80039ec <__libc_init_array+0x48>)
 80039c8:	1aed      	subs	r5, r5, r3
 80039ca:	10ad      	asrs	r5, r5, #2
 80039cc:	2400      	movs	r4, #0
 80039ce:	461e      	mov	r6, r3
 80039d0:	42ac      	cmp	r4, r5
 80039d2:	d004      	beq.n	80039de <__libc_init_array+0x3a>
 80039d4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80039d8:	4790      	blx	r2
 80039da:	3401      	adds	r4, #1
 80039dc:	e7f8      	b.n	80039d0 <__libc_init_array+0x2c>
 80039de:	bd70      	pop	{r4, r5, r6, pc}
 80039e0:	080078b4 	.word	0x080078b4
 80039e4:	080078b4 	.word	0x080078b4
 80039e8:	080078b8 	.word	0x080078b8
 80039ec:	080078b4 	.word	0x080078b4

080039f0 <memcpy>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	2300      	movs	r3, #0
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d003      	beq.n	8003a00 <memcpy+0x10>
 80039f8:	5ccc      	ldrb	r4, [r1, r3]
 80039fa:	54c4      	strb	r4, [r0, r3]
 80039fc:	3301      	adds	r3, #1
 80039fe:	e7f9      	b.n	80039f4 <memcpy+0x4>
 8003a00:	bd10      	pop	{r4, pc}

08003a02 <memset>:
 8003a02:	4402      	add	r2, r0
 8003a04:	4603      	mov	r3, r0
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d002      	beq.n	8003a10 <memset+0xe>
 8003a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a0e:	e7fa      	b.n	8003a06 <memset+0x4>
 8003a10:	4770      	bx	lr
	...

08003a14 <printf>:
 8003a14:	b40f      	push	{r0, r1, r2, r3}
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <printf+0x2c>)
 8003a18:	b513      	push	{r0, r1, r4, lr}
 8003a1a:	681c      	ldr	r4, [r3, #0]
 8003a1c:	b124      	cbz	r4, 8003a28 <printf+0x14>
 8003a1e:	69a3      	ldr	r3, [r4, #24]
 8003a20:	b913      	cbnz	r3, 8003a28 <printf+0x14>
 8003a22:	4620      	mov	r0, r4
 8003a24:	f001 fff6 	bl	8005a14 <__sinit>
 8003a28:	ab05      	add	r3, sp, #20
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	68a1      	ldr	r1, [r4, #8]
 8003a2e:	9a04      	ldr	r2, [sp, #16]
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	f000 f85d 	bl	8003af0 <_vfprintf_r>
 8003a36:	b002      	add	sp, #8
 8003a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a3c:	b004      	add	sp, #16
 8003a3e:	4770      	bx	lr
 8003a40:	20000100 	.word	0x20000100

08003a44 <putchar>:
 8003a44:	b538      	push	{r3, r4, r5, lr}
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <putchar+0x24>)
 8003a48:	681c      	ldr	r4, [r3, #0]
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	b124      	cbz	r4, 8003a58 <putchar+0x14>
 8003a4e:	69a3      	ldr	r3, [r4, #24]
 8003a50:	b913      	cbnz	r3, 8003a58 <putchar+0x14>
 8003a52:	4620      	mov	r0, r4
 8003a54:	f001 ffde 	bl	8005a14 <__sinit>
 8003a58:	4620      	mov	r0, r4
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	68a2      	ldr	r2, [r4, #8]
 8003a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a62:	f003 b8a5 	b.w	8006bb0 <_putc_r>
 8003a66:	bf00      	nop
 8003a68:	20000100 	.word	0x20000100

08003a6c <_puts_r>:
 8003a6c:	b530      	push	{r4, r5, lr}
 8003a6e:	4604      	mov	r4, r0
 8003a70:	b089      	sub	sp, #36	; 0x24
 8003a72:	4608      	mov	r0, r1
 8003a74:	460d      	mov	r5, r1
 8003a76:	f000 f833 	bl	8003ae0 <strlen>
 8003a7a:	4b14      	ldr	r3, [pc, #80]	; (8003acc <_puts_r+0x60>)
 8003a7c:	9306      	str	r3, [sp, #24]
 8003a7e:	2301      	movs	r3, #1
 8003a80:	9005      	str	r0, [sp, #20]
 8003a82:	9307      	str	r3, [sp, #28]
 8003a84:	4418      	add	r0, r3
 8003a86:	ab04      	add	r3, sp, #16
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	9504      	str	r5, [sp, #16]
 8003a8e:	9003      	str	r0, [sp, #12]
 8003a90:	9302      	str	r3, [sp, #8]
 8003a92:	b124      	cbz	r4, 8003a9e <_puts_r+0x32>
 8003a94:	69a3      	ldr	r3, [r4, #24]
 8003a96:	b913      	cbnz	r3, 8003a9e <_puts_r+0x32>
 8003a98:	4620      	mov	r0, r4
 8003a9a:	f001 ffbb 	bl	8005a14 <__sinit>
 8003a9e:	68a1      	ldr	r1, [r4, #8]
 8003aa0:	898b      	ldrh	r3, [r1, #12]
 8003aa2:	049a      	lsls	r2, r3, #18
 8003aa4:	d406      	bmi.n	8003ab4 <_puts_r+0x48>
 8003aa6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003aaa:	818b      	strh	r3, [r1, #12]
 8003aac:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8003aae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab2:	664b      	str	r3, [r1, #100]	; 0x64
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	aa01      	add	r2, sp, #4
 8003ab8:	f002 f97a 	bl	8005db0 <__sfvwrite_r>
 8003abc:	2800      	cmp	r0, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	200a      	moveq	r0, #10
 8003ac2:	f04f 30ff 	movne.w	r0, #4294967295
 8003ac6:	b009      	add	sp, #36	; 0x24
 8003ac8:	bd30      	pop	{r4, r5, pc}
 8003aca:	bf00      	nop
 8003acc:	0800762f 	.word	0x0800762f

08003ad0 <puts>:
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <puts+0xc>)
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	f7ff bfc9 	b.w	8003a6c <_puts_r>
 8003ada:	bf00      	nop
 8003adc:	20000100 	.word	0x20000100

08003ae0 <strlen>:
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	d1fb      	bne.n	8003ae2 <strlen+0x2>
 8003aea:	1a18      	subs	r0, r3, r0
 8003aec:	3801      	subs	r0, #1
 8003aee:	4770      	bx	lr

08003af0 <_vfprintf_r>:
 8003af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003af4:	b0bf      	sub	sp, #252	; 0xfc
 8003af6:	4689      	mov	r9, r1
 8003af8:	9207      	str	r2, [sp, #28]
 8003afa:	461c      	mov	r4, r3
 8003afc:	4698      	mov	r8, r3
 8003afe:	4682      	mov	sl, r0
 8003b00:	f002 fac8 	bl	8006094 <_localeconv_r>
 8003b04:	6800      	ldr	r0, [r0, #0]
 8003b06:	9014      	str	r0, [sp, #80]	; 0x50
 8003b08:	f7ff ffea 	bl	8003ae0 <strlen>
 8003b0c:	900c      	str	r0, [sp, #48]	; 0x30
 8003b0e:	f1ba 0f00 	cmp.w	sl, #0
 8003b12:	d005      	beq.n	8003b20 <_vfprintf_r+0x30>
 8003b14:	f8da 3018 	ldr.w	r3, [sl, #24]
 8003b18:	b913      	cbnz	r3, 8003b20 <_vfprintf_r+0x30>
 8003b1a:	4650      	mov	r0, sl
 8003b1c:	f001 ff7a 	bl	8005a14 <__sinit>
 8003b20:	4b99      	ldr	r3, [pc, #612]	; (8003d88 <_vfprintf_r+0x298>)
 8003b22:	4599      	cmp	r9, r3
 8003b24:	d102      	bne.n	8003b2c <_vfprintf_r+0x3c>
 8003b26:	f8da 9004 	ldr.w	r9, [sl, #4]
 8003b2a:	e00a      	b.n	8003b42 <_vfprintf_r+0x52>
 8003b2c:	4b97      	ldr	r3, [pc, #604]	; (8003d8c <_vfprintf_r+0x29c>)
 8003b2e:	4599      	cmp	r9, r3
 8003b30:	d102      	bne.n	8003b38 <_vfprintf_r+0x48>
 8003b32:	f8da 9008 	ldr.w	r9, [sl, #8]
 8003b36:	e004      	b.n	8003b42 <_vfprintf_r+0x52>
 8003b38:	4b95      	ldr	r3, [pc, #596]	; (8003d90 <_vfprintf_r+0x2a0>)
 8003b3a:	4599      	cmp	r9, r3
 8003b3c:	bf08      	it	eq
 8003b3e:	f8da 900c 	ldreq.w	r9, [sl, #12]
 8003b42:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003b46:	0498      	lsls	r0, r3, #18
 8003b48:	d409      	bmi.n	8003b5e <_vfprintf_r+0x6e>
 8003b4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b4e:	f8a9 300c 	strh.w	r3, [r9, #12]
 8003b52:	f8d9 3064 	ldr.w	r3, [r9, #100]	; 0x64
 8003b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b5a:	f8c9 3064 	str.w	r3, [r9, #100]	; 0x64
 8003b5e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003b62:	0719      	lsls	r1, r3, #28
 8003b64:	d509      	bpl.n	8003b7a <_vfprintf_r+0x8a>
 8003b66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003b6a:	b133      	cbz	r3, 8003b7a <_vfprintf_r+0x8a>
 8003b6c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8003b70:	f003 031a 	and.w	r3, r3, #26
 8003b74:	2b0a      	cmp	r3, #10
 8003b76:	d116      	bne.n	8003ba6 <_vfprintf_r+0xb6>
 8003b78:	e009      	b.n	8003b8e <_vfprintf_r+0x9e>
 8003b7a:	4650      	mov	r0, sl
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f000 ffc1 	bl	8004b04 <__swsetup_r>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d0f2      	beq.n	8003b6c <_vfprintf_r+0x7c>
 8003b86:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8a:	f000 bf7e 	b.w	8004a8a <_vfprintf_r+0xf9a>
 8003b8e:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	db07      	blt.n	8003ba6 <_vfprintf_r+0xb6>
 8003b96:	4650      	mov	r0, sl
 8003b98:	4649      	mov	r1, r9
 8003b9a:	9a07      	ldr	r2, [sp, #28]
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	f000 ff7b 	bl	8004a98 <__sbprintf>
 8003ba2:	f000 bf72 	b.w	8004a8a <_vfprintf_r+0xf9a>
 8003ba6:	ed9f 7b76 	vldr	d7, [pc, #472]	; 8003d80 <_vfprintf_r+0x290>
 8003baa:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	ae2e      	add	r6, sp, #184	; 0xb8
 8003bb2:	9621      	str	r6, [sp, #132]	; 0x84
 8003bb4:	9323      	str	r3, [sp, #140]	; 0x8c
 8003bb6:	9322      	str	r3, [sp, #136]	; 0x88
 8003bb8:	9305      	str	r3, [sp, #20]
 8003bba:	9317      	str	r3, [sp, #92]	; 0x5c
 8003bbc:	9316      	str	r3, [sp, #88]	; 0x58
 8003bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8003bc0:	9b07      	ldr	r3, [sp, #28]
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003bc8:	b91a      	cbnz	r2, 8003bd2 <_vfprintf_r+0xe2>
 8003bca:	9807      	ldr	r0, [sp, #28]
 8003bcc:	1a25      	subs	r5, r4, r0
 8003bce:	d103      	bne.n	8003bd8 <_vfprintf_r+0xe8>
 8003bd0:	e01b      	b.n	8003c0a <_vfprintf_r+0x11a>
 8003bd2:	2a25      	cmp	r2, #37	; 0x25
 8003bd4:	d1f5      	bne.n	8003bc2 <_vfprintf_r+0xd2>
 8003bd6:	e7f8      	b.n	8003bca <_vfprintf_r+0xda>
 8003bd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003bda:	9907      	ldr	r1, [sp, #28]
 8003bdc:	442b      	add	r3, r5
 8003bde:	9323      	str	r3, [sp, #140]	; 0x8c
 8003be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003be2:	3301      	adds	r3, #1
 8003be4:	2b07      	cmp	r3, #7
 8003be6:	e886 0022 	stmia.w	r6, {r1, r5}
 8003bea:	9322      	str	r3, [sp, #136]	; 0x88
 8003bec:	dc01      	bgt.n	8003bf2 <_vfprintf_r+0x102>
 8003bee:	3608      	adds	r6, #8
 8003bf0:	e008      	b.n	8003c04 <_vfprintf_r+0x114>
 8003bf2:	4650      	mov	r0, sl
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	aa21      	add	r2, sp, #132	; 0x84
 8003bf8:	f003 fa60 	bl	80070bc <__sprint_r>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	f040 873e 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8003c02:	ae2e      	add	r6, sp, #184	; 0xb8
 8003c04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c06:	442a      	add	r2, r5
 8003c08:	920b      	str	r2, [sp, #44]	; 0x2c
 8003c0a:	7823      	ldrb	r3, [r4, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 872f 	beq.w	8004a70 <_vfprintf_r+0xf80>
 8003c12:	2300      	movs	r3, #0
 8003c14:	3401      	adds	r4, #1
 8003c16:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003c1a:	f04f 3bff 	mov.w	fp, #4294967295
 8003c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003c20:	461f      	mov	r7, r3
 8003c22:	1c65      	adds	r5, r4, #1
 8003c24:	7824      	ldrb	r4, [r4, #0]
 8003c26:	9507      	str	r5, [sp, #28]
 8003c28:	9404      	str	r4, [sp, #16]
 8003c2a:	9c04      	ldr	r4, [sp, #16]
 8003c2c:	f1a4 0220 	sub.w	r2, r4, #32
 8003c30:	2a58      	cmp	r2, #88	; 0x58
 8003c32:	f200 838e 	bhi.w	8004352 <_vfprintf_r+0x862>
 8003c36:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003c3a:	006d      	.short	0x006d
 8003c3c:	038c038c 	.word	0x038c038c
 8003c40:	038c0071 	.word	0x038c0071
 8003c44:	038c038c 	.word	0x038c038c
 8003c48:	038c038c 	.word	0x038c038c
 8003c4c:	005b038c 	.word	0x005b038c
 8003c50:	038c0059 	.word	0x038c0059
 8003c54:	007a0077 	.word	0x007a0077
 8003c58:	00a0038c 	.word	0x00a0038c
 8003c5c:	00af00af 	.word	0x00af00af
 8003c60:	00af00af 	.word	0x00af00af
 8003c64:	00af00af 	.word	0x00af00af
 8003c68:	00af00af 	.word	0x00af00af
 8003c6c:	038c00af 	.word	0x038c00af
 8003c70:	038c038c 	.word	0x038c038c
 8003c74:	038c038c 	.word	0x038c038c
 8003c78:	038c038c 	.word	0x038c038c
 8003c7c:	038c038c 	.word	0x038c038c
 8003c80:	00e0038c 	.word	0x00e0038c
 8003c84:	038c010b 	.word	0x038c010b
 8003c88:	038c010b 	.word	0x038c010b
 8003c8c:	038c038c 	.word	0x038c038c
 8003c90:	00c3038c 	.word	0x00c3038c
 8003c94:	038c038c 	.word	0x038c038c
 8003c98:	038c026b 	.word	0x038c026b
 8003c9c:	038c038c 	.word	0x038c038c
 8003ca0:	038c038c 	.word	0x038c038c
 8003ca4:	038c02c4 	.word	0x038c02c4
 8003ca8:	0068038c 	.word	0x0068038c
 8003cac:	038c038c 	.word	0x038c038c
 8003cb0:	038c038c 	.word	0x038c038c
 8003cb4:	038c038c 	.word	0x038c038c
 8003cb8:	038c038c 	.word	0x038c038c
 8003cbc:	038c038c 	.word	0x038c038c
 8003cc0:	006500d6 	.word	0x006500d6
 8003cc4:	010b010b 	.word	0x010b010b
 8003cc8:	00c6010b 	.word	0x00c6010b
 8003ccc:	038c0065 	.word	0x038c0065
 8003cd0:	00c9038c 	.word	0x00c9038c
 8003cd4:	024c038c 	.word	0x024c038c
 8003cd8:	0295026d 	.word	0x0295026d
 8003cdc:	038c00d3 	.word	0x038c00d3
 8003ce0:	038c02a7 	.word	0x038c02a7
 8003ce4:	038c02c6 	.word	0x038c02c6
 8003ce8:	02e1038c 	.word	0x02e1038c
 8003cec:	232b      	movs	r3, #43	; 0x2b
 8003cee:	e007      	b.n	8003d00 <_vfprintf_r+0x210>
 8003cf0:	f8d8 5000 	ldr.w	r5, [r8]
 8003cf4:	950a      	str	r5, [sp, #40]	; 0x28
 8003cf6:	2d00      	cmp	r5, #0
 8003cf8:	f108 0204 	add.w	r2, r8, #4
 8003cfc:	db11      	blt.n	8003d22 <_vfprintf_r+0x232>
 8003cfe:	4690      	mov	r8, r2
 8003d00:	9c07      	ldr	r4, [sp, #28]
 8003d02:	e78e      	b.n	8003c22 <_vfprintf_r+0x132>
 8003d04:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003d08:	e07b      	b.n	8003e02 <_vfprintf_r+0x312>
 8003d0a:	4c22      	ldr	r4, [pc, #136]	; (8003d94 <_vfprintf_r+0x2a4>)
 8003d0c:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003d10:	9417      	str	r4, [sp, #92]	; 0x5c
 8003d12:	e277      	b.n	8004204 <_vfprintf_r+0x714>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf08      	it	eq
 8003d18:	2320      	moveq	r3, #32
 8003d1a:	e7f1      	b.n	8003d00 <_vfprintf_r+0x210>
 8003d1c:	f047 0701 	orr.w	r7, r7, #1
 8003d20:	e7ee      	b.n	8003d00 <_vfprintf_r+0x210>
 8003d22:	426d      	negs	r5, r5
 8003d24:	950a      	str	r5, [sp, #40]	; 0x28
 8003d26:	4690      	mov	r8, r2
 8003d28:	f047 0704 	orr.w	r7, r7, #4
 8003d2c:	e7e8      	b.n	8003d00 <_vfprintf_r+0x210>
 8003d2e:	9c07      	ldr	r4, [sp, #28]
 8003d30:	7825      	ldrb	r5, [r4, #0]
 8003d32:	9504      	str	r5, [sp, #16]
 8003d34:	2d2a      	cmp	r5, #42	; 0x2a
 8003d36:	f104 0201 	add.w	r2, r4, #1
 8003d3a:	d002      	beq.n	8003d42 <_vfprintf_r+0x252>
 8003d3c:	f04f 0c00 	mov.w	ip, #0
 8003d40:	e00b      	b.n	8003d5a <_vfprintf_r+0x26a>
 8003d42:	f8d8 b000 	ldr.w	fp, [r8]
 8003d46:	9207      	str	r2, [sp, #28]
 8003d48:	f108 0104 	add.w	r1, r8, #4
 8003d4c:	f1bb 0f00 	cmp.w	fp, #0
 8003d50:	4688      	mov	r8, r1
 8003d52:	dad5      	bge.n	8003d00 <_vfprintf_r+0x210>
 8003d54:	f04f 3bff 	mov.w	fp, #4294967295
 8003d58:	e7d2      	b.n	8003d00 <_vfprintf_r+0x210>
 8003d5a:	9d04      	ldr	r5, [sp, #16]
 8003d5c:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8003d60:	2909      	cmp	r1, #9
 8003d62:	d806      	bhi.n	8003d72 <_vfprintf_r+0x282>
 8003d64:	200a      	movs	r0, #10
 8003d66:	f812 4b01 	ldrb.w	r4, [r2], #1
 8003d6a:	9404      	str	r4, [sp, #16]
 8003d6c:	fb00 1c0c 	mla	ip, r0, ip, r1
 8003d70:	e7f3      	b.n	8003d5a <_vfprintf_r+0x26a>
 8003d72:	ea4c 7bec 	orr.w	fp, ip, ip, asr #31
 8003d76:	9207      	str	r2, [sp, #28]
 8003d78:	e757      	b.n	8003c2a <_vfprintf_r+0x13a>
 8003d7a:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8003d7e:	e7bf      	b.n	8003d00 <_vfprintf_r+0x210>
	...
 8003d88:	08007740 	.word	0x08007740
 8003d8c:	08007760 	.word	0x08007760
 8003d90:	08007780 	.word	0x08007780
 8003d94:	080076ff 	.word	0x080076ff
 8003d98:	2400      	movs	r4, #0
 8003d9a:	940a      	str	r4, [sp, #40]	; 0x28
 8003d9c:	9d04      	ldr	r5, [sp, #16]
 8003d9e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003da0:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 8003da4:	210a      	movs	r1, #10
 8003da6:	fb01 2404 	mla	r4, r1, r4, r2
 8003daa:	9a07      	ldr	r2, [sp, #28]
 8003dac:	940a      	str	r4, [sp, #40]	; 0x28
 8003dae:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003db2:	9504      	str	r5, [sp, #16]
 8003db4:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8003db8:	2909      	cmp	r1, #9
 8003dba:	d8dc      	bhi.n	8003d76 <_vfprintf_r+0x286>
 8003dbc:	9207      	str	r2, [sp, #28]
 8003dbe:	e7ed      	b.n	8003d9c <_vfprintf_r+0x2ac>
 8003dc0:	f047 0708 	orr.w	r7, r7, #8
 8003dc4:	e79c      	b.n	8003d00 <_vfprintf_r+0x210>
 8003dc6:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8003dca:	e799      	b.n	8003d00 <_vfprintf_r+0x210>
 8003dcc:	9c07      	ldr	r4, [sp, #28]
 8003dce:	7822      	ldrb	r2, [r4, #0]
 8003dd0:	2a6c      	cmp	r2, #108	; 0x6c
 8003dd2:	d102      	bne.n	8003dda <_vfprintf_r+0x2ea>
 8003dd4:	3401      	adds	r4, #1
 8003dd6:	9407      	str	r4, [sp, #28]
 8003dd8:	e002      	b.n	8003de0 <_vfprintf_r+0x2f0>
 8003dda:	f047 0710 	orr.w	r7, r7, #16
 8003dde:	e78f      	b.n	8003d00 <_vfprintf_r+0x210>
 8003de0:	f047 0720 	orr.w	r7, r7, #32
 8003de4:	e78c      	b.n	8003d00 <_vfprintf_r+0x210>
 8003de6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dea:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8003dee:	2500      	movs	r5, #0
 8003df0:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 8003df4:	f108 0804 	add.w	r8, r8, #4
 8003df8:	e2b6      	b.n	8004368 <_vfprintf_r+0x878>
 8003dfa:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003dfe:	f047 0710 	orr.w	r7, r7, #16
 8003e02:	06ba      	lsls	r2, r7, #26
 8003e04:	d508      	bpl.n	8003e18 <_vfprintf_r+0x328>
 8003e06:	f108 0807 	add.w	r8, r8, #7
 8003e0a:	f028 0307 	bic.w	r3, r8, #7
 8003e0e:	f103 0808 	add.w	r8, r3, #8
 8003e12:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003e16:	e00f      	b.n	8003e38 <_vfprintf_r+0x348>
 8003e18:	f017 0f10 	tst.w	r7, #16
 8003e1c:	f108 0304 	add.w	r3, r8, #4
 8003e20:	d002      	beq.n	8003e28 <_vfprintf_r+0x338>
 8003e22:	f8d8 4000 	ldr.w	r4, [r8]
 8003e26:	e005      	b.n	8003e34 <_vfprintf_r+0x344>
 8003e28:	f8d8 4000 	ldr.w	r4, [r8]
 8003e2c:	f017 0f40 	tst.w	r7, #64	; 0x40
 8003e30:	bf18      	it	ne
 8003e32:	b224      	sxthne	r4, r4
 8003e34:	17e5      	asrs	r5, r4, #31
 8003e36:	4698      	mov	r8, r3
 8003e38:	2c00      	cmp	r4, #0
 8003e3a:	f175 0100 	sbcs.w	r1, r5, #0
 8003e3e:	f280 820c 	bge.w	800425a <_vfprintf_r+0x76a>
 8003e42:	232d      	movs	r3, #45	; 0x2d
 8003e44:	4264      	negs	r4, r4
 8003e46:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8003e4a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003e4e:	e204      	b.n	800425a <_vfprintf_r+0x76a>
 8003e50:	9c04      	ldr	r4, [sp, #16]
 8003e52:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003e56:	f108 0807 	add.w	r8, r8, #7
 8003e5a:	f028 0307 	bic.w	r3, r8, #7
 8003e5e:	9706      	str	r7, [sp, #24]
 8003e60:	940d      	str	r4, [sp, #52]	; 0x34
 8003e62:	ed93 7b00 	vldr	d7, [r3]
 8003e66:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003e6a:	ed9d 0b08 	vldr	d0, [sp, #32]
 8003e6e:	f103 0808 	add.w	r8, r3, #8
 8003e72:	f003 f881 	bl	8006f78 <__fpclassifyd>
 8003e76:	2801      	cmp	r0, #1
 8003e78:	d116      	bne.n	8003ea8 <_vfprintf_r+0x3b8>
 8003e7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2300      	movs	r3, #0
 8003e82:	f7fc fdd3 	bl	8000a2c <__aeabi_dcmplt>
 8003e86:	b110      	cbz	r0, 8003e8e <_vfprintf_r+0x39e>
 8003e88:	232d      	movs	r3, #45	; 0x2d
 8003e8a:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003e8e:	4ba8      	ldr	r3, [pc, #672]	; (8004130 <_vfprintf_r+0x640>)
 8003e90:	4aa8      	ldr	r2, [pc, #672]	; (8004134 <_vfprintf_r+0x644>)
 8003e92:	9c04      	ldr	r4, [sp, #16]
 8003e94:	2c47      	cmp	r4, #71	; 0x47
 8003e96:	bfd8      	it	le
 8003e98:	461a      	movle	r2, r3
 8003e9a:	9203      	str	r2, [sp, #12]
 8003e9c:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8003ea0:	f04f 0b03 	mov.w	fp, #3
 8003ea4:	2500      	movs	r5, #0
 8003ea6:	e266      	b.n	8004376 <_vfprintf_r+0x886>
 8003ea8:	ed9d 0b08 	vldr	d0, [sp, #32]
 8003eac:	f003 f864 	bl	8006f78 <__fpclassifyd>
 8003eb0:	b958      	cbnz	r0, 8003eca <_vfprintf_r+0x3da>
 8003eb2:	4ba1      	ldr	r3, [pc, #644]	; (8004138 <_vfprintf_r+0x648>)
 8003eb4:	4aa1      	ldr	r2, [pc, #644]	; (800413c <_vfprintf_r+0x64c>)
 8003eb6:	9d04      	ldr	r5, [sp, #16]
 8003eb8:	2d47      	cmp	r5, #71	; 0x47
 8003eba:	bfd8      	it	le
 8003ebc:	461a      	movle	r2, r3
 8003ebe:	9203      	str	r2, [sp, #12]
 8003ec0:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 8003ec4:	f04f 0b03 	mov.w	fp, #3
 8003ec8:	e254      	b.n	8004374 <_vfprintf_r+0x884>
 8003eca:	f1bb 3fff 	cmp.w	fp, #4294967295
 8003ece:	d00a      	beq.n	8003ee6 <_vfprintf_r+0x3f6>
 8003ed0:	9c04      	ldr	r4, [sp, #16]
 8003ed2:	f024 0320 	bic.w	r3, r4, #32
 8003ed6:	2b47      	cmp	r3, #71	; 0x47
 8003ed8:	d107      	bne.n	8003eea <_vfprintf_r+0x3fa>
 8003eda:	f1bb 0f00 	cmp.w	fp, #0
 8003ede:	bf08      	it	eq
 8003ee0:	f04f 0b01 	moveq.w	fp, #1
 8003ee4:	e001      	b.n	8003eea <_vfprintf_r+0x3fa>
 8003ee6:	f04f 0b06 	mov.w	fp, #6
 8003eea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 8003ef4:	da07      	bge.n	8003f06 <_vfprintf_r+0x416>
 8003ef6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ef8:	9d08      	ldr	r5, [sp, #32]
 8003efa:	950e      	str	r5, [sp, #56]	; 0x38
 8003efc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8003f00:	900f      	str	r0, [sp, #60]	; 0x3c
 8003f02:	242d      	movs	r4, #45	; 0x2d
 8003f04:	e004      	b.n	8003f10 <_vfprintf_r+0x420>
 8003f06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003f0a:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003f0e:	2400      	movs	r4, #0
 8003f10:	9d04      	ldr	r5, [sp, #16]
 8003f12:	9415      	str	r4, [sp, #84]	; 0x54
 8003f14:	f025 0420 	bic.w	r4, r5, #32
 8003f18:	2c46      	cmp	r4, #70	; 0x46
 8003f1a:	d004      	beq.n	8003f26 <_vfprintf_r+0x436>
 8003f1c:	2c45      	cmp	r4, #69	; 0x45
 8003f1e:	d105      	bne.n	8003f2c <_vfprintf_r+0x43c>
 8003f20:	f10b 0501 	add.w	r5, fp, #1
 8003f24:	e003      	b.n	8003f2e <_vfprintf_r+0x43e>
 8003f26:	465d      	mov	r5, fp
 8003f28:	2103      	movs	r1, #3
 8003f2a:	e001      	b.n	8003f30 <_vfprintf_r+0x440>
 8003f2c:	465d      	mov	r5, fp
 8003f2e:	2102      	movs	r1, #2
 8003f30:	ab1c      	add	r3, sp, #112	; 0x70
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	ab1f      	add	r3, sp, #124	; 0x7c
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	4650      	mov	r0, sl
 8003f3a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003f3e:	462a      	mov	r2, r5
 8003f40:	ab1b      	add	r3, sp, #108	; 0x6c
 8003f42:	f000 fedd 	bl	8004d00 <_dtoa_r>
 8003f46:	2c47      	cmp	r4, #71	; 0x47
 8003f48:	9003      	str	r0, [sp, #12]
 8003f4a:	d10a      	bne.n	8003f62 <_vfprintf_r+0x472>
 8003f4c:	9806      	ldr	r0, [sp, #24]
 8003f4e:	07c3      	lsls	r3, r0, #31
 8003f50:	d407      	bmi.n	8003f62 <_vfprintf_r+0x472>
 8003f52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003f54:	9d03      	ldr	r5, [sp, #12]
 8003f56:	2c47      	cmp	r4, #71	; 0x47
 8003f58:	ebc5 0303 	rsb	r3, r5, r3
 8003f5c:	9305      	str	r3, [sp, #20]
 8003f5e:	d137      	bne.n	8003fd0 <_vfprintf_r+0x4e0>
 8003f60:	e02d      	b.n	8003fbe <_vfprintf_r+0x4ce>
 8003f62:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003f66:	2c46      	cmp	r4, #70	; 0x46
 8003f68:	44ac      	add	ip, r5
 8003f6a:	d113      	bne.n	8003f94 <_vfprintf_r+0x4a4>
 8003f6c:	9803      	ldr	r0, [sp, #12]
 8003f6e:	7803      	ldrb	r3, [r0, #0]
 8003f70:	2b30      	cmp	r3, #48	; 0x30
 8003f72:	d10d      	bne.n	8003f90 <_vfprintf_r+0x4a0>
 8003f74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8cd c008 	str.w	ip, [sp, #8]
 8003f80:	f7fc fd4a 	bl	8000a18 <__aeabi_dcmpeq>
 8003f84:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003f88:	b910      	cbnz	r0, 8003f90 <_vfprintf_r+0x4a0>
 8003f8a:	f1c5 0501 	rsb	r5, r5, #1
 8003f8e:	951b      	str	r5, [sp, #108]	; 0x6c
 8003f90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003f92:	449c      	add	ip, r3
 8003f94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003f98:	2200      	movs	r2, #0
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8cd c008 	str.w	ip, [sp, #8]
 8003fa0:	f7fc fd3a 	bl	8000a18 <__aeabi_dcmpeq>
 8003fa4:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003fa8:	b108      	cbz	r0, 8003fae <_vfprintf_r+0x4be>
 8003faa:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 8003fae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003fb0:	4563      	cmp	r3, ip
 8003fb2:	d2ce      	bcs.n	8003f52 <_vfprintf_r+0x462>
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	921f      	str	r2, [sp, #124]	; 0x7c
 8003fb8:	2230      	movs	r2, #48	; 0x30
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e7f7      	b.n	8003fae <_vfprintf_r+0x4be>
 8003fbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fc0:	1cdc      	adds	r4, r3, #3
 8003fc2:	db01      	blt.n	8003fc8 <_vfprintf_r+0x4d8>
 8003fc4:	455b      	cmp	r3, fp
 8003fc6:	dd62      	ble.n	800408e <_vfprintf_r+0x59e>
 8003fc8:	9c04      	ldr	r4, [sp, #16]
 8003fca:	3c02      	subs	r4, #2
 8003fcc:	9404      	str	r4, [sp, #16]
 8003fce:	e002      	b.n	8003fd6 <_vfprintf_r+0x4e6>
 8003fd0:	9d04      	ldr	r5, [sp, #16]
 8003fd2:	2d65      	cmp	r5, #101	; 0x65
 8003fd4:	dc42      	bgt.n	800405c <_vfprintf_r+0x56c>
 8003fd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003fd8:	9c04      	ldr	r4, [sp, #16]
 8003fda:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	931b      	str	r3, [sp, #108]	; 0x6c
 8003fe4:	bfba      	itte	lt
 8003fe6:	425b      	neglt	r3, r3
 8003fe8:	222d      	movlt	r2, #45	; 0x2d
 8003fea:	222b      	movge	r2, #43	; 0x2b
 8003fec:	2b09      	cmp	r3, #9
 8003fee:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8003ff2:	dd1c      	ble.n	800402e <_vfprintf_r+0x53e>
 8003ff4:	f10d 0282 	add.w	r2, sp, #130	; 0x82
 8003ff8:	200a      	movs	r0, #10
 8003ffa:	fb93 f1f0 	sdiv	r1, r3, r0
 8003ffe:	fb00 3311 	mls	r3, r0, r1, r3
 8004002:	3330      	adds	r3, #48	; 0x30
 8004004:	2909      	cmp	r1, #9
 8004006:	4614      	mov	r4, r2
 8004008:	f802 3901 	strb.w	r3, [r2], #-1
 800400c:	460b      	mov	r3, r1
 800400e:	dcf3      	bgt.n	8003ff8 <_vfprintf_r+0x508>
 8004010:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8004014:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8004018:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 800401c:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8004020:	4294      	cmp	r4, r2
 8004022:	d20b      	bcs.n	800403c <_vfprintf_r+0x54c>
 8004024:	f814 2b01 	ldrb.w	r2, [r4], #1
 8004028:	f803 2b01 	strb.w	r2, [r3], #1
 800402c:	e7f6      	b.n	800401c <_vfprintf_r+0x52c>
 800402e:	2230      	movs	r2, #48	; 0x30
 8004030:	4413      	add	r3, r2
 8004032:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8004036:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800403a:	ab1e      	add	r3, sp, #120	; 0x78
 800403c:	9d05      	ldr	r5, [sp, #20]
 800403e:	aa1d      	add	r2, sp, #116	; 0x74
 8004040:	1a9a      	subs	r2, r3, r2
 8004042:	4693      	mov	fp, r2
 8004044:	2d01      	cmp	r5, #1
 8004046:	9216      	str	r2, [sp, #88]	; 0x58
 8004048:	44ab      	add	fp, r5
 800404a:	dc03      	bgt.n	8004054 <_vfprintf_r+0x564>
 800404c:	9d06      	ldr	r5, [sp, #24]
 800404e:	f015 0401 	ands.w	r4, r5, #1
 8004052:	d037      	beq.n	80040c4 <_vfprintf_r+0x5d4>
 8004054:	f10b 0b01 	add.w	fp, fp, #1
 8004058:	2400      	movs	r4, #0
 800405a:	e033      	b.n	80040c4 <_vfprintf_r+0x5d4>
 800405c:	9c04      	ldr	r4, [sp, #16]
 800405e:	2c66      	cmp	r4, #102	; 0x66
 8004060:	d115      	bne.n	800408e <_vfprintf_r+0x59e>
 8004062:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004064:	2b00      	cmp	r3, #0
 8004066:	dd09      	ble.n	800407c <_vfprintf_r+0x58c>
 8004068:	f1bb 0f00 	cmp.w	fp, #0
 800406c:	d102      	bne.n	8004074 <_vfprintf_r+0x584>
 800406e:	9d06      	ldr	r5, [sp, #24]
 8004070:	07e8      	lsls	r0, r5, #31
 8004072:	d523      	bpl.n	80040bc <_vfprintf_r+0x5cc>
 8004074:	f10b 0c01 	add.w	ip, fp, #1
 8004078:	4463      	add	r3, ip
 800407a:	e01f      	b.n	80040bc <_vfprintf_r+0x5cc>
 800407c:	f1bb 0f00 	cmp.w	fp, #0
 8004080:	d102      	bne.n	8004088 <_vfprintf_r+0x598>
 8004082:	9c06      	ldr	r4, [sp, #24]
 8004084:	07e1      	lsls	r1, r4, #31
 8004086:	d515      	bpl.n	80040b4 <_vfprintf_r+0x5c4>
 8004088:	f10b 0302 	add.w	r3, fp, #2
 800408c:	e016      	b.n	80040bc <_vfprintf_r+0x5cc>
 800408e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004090:	9d05      	ldr	r5, [sp, #20]
 8004092:	42ab      	cmp	r3, r5
 8004094:	db04      	blt.n	80040a0 <_vfprintf_r+0x5b0>
 8004096:	9c06      	ldr	r4, [sp, #24]
 8004098:	07e2      	lsls	r2, r4, #31
 800409a:	d50d      	bpl.n	80040b8 <_vfprintf_r+0x5c8>
 800409c:	3301      	adds	r3, #1
 800409e:	e006      	b.n	80040ae <_vfprintf_r+0x5be>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	9c05      	ldr	r4, [sp, #20]
 80040a4:	bfd4      	ite	le
 80040a6:	f1c3 0302 	rsble	r3, r3, #2
 80040aa:	2301      	movgt	r3, #1
 80040ac:	4423      	add	r3, r4
 80040ae:	2567      	movs	r5, #103	; 0x67
 80040b0:	950d      	str	r5, [sp, #52]	; 0x34
 80040b2:	e003      	b.n	80040bc <_vfprintf_r+0x5cc>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e001      	b.n	80040bc <_vfprintf_r+0x5cc>
 80040b8:	2467      	movs	r4, #103	; 0x67
 80040ba:	940d      	str	r4, [sp, #52]	; 0x34
 80040bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80040be:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80040c0:	9504      	str	r5, [sp, #16]
 80040c2:	469b      	mov	fp, r3
 80040c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80040c6:	b115      	cbz	r5, 80040ce <_vfprintf_r+0x5de>
 80040c8:	232d      	movs	r3, #45	; 0x2d
 80040ca:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80040ce:	2500      	movs	r5, #0
 80040d0:	e152      	b.n	8004378 <_vfprintf_r+0x888>
 80040d2:	f017 0f20 	tst.w	r7, #32
 80040d6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80040da:	f108 0104 	add.w	r1, r8, #4
 80040de:	d008      	beq.n	80040f2 <_vfprintf_r+0x602>
 80040e0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80040e2:	f8d8 0000 	ldr.w	r0, [r8]
 80040e6:	17e5      	asrs	r5, r4, #31
 80040e8:	4622      	mov	r2, r4
 80040ea:	462b      	mov	r3, r5
 80040ec:	e9c0 2300 	strd	r2, r3, [r0]
 80040f0:	e00c      	b.n	800410c <_vfprintf_r+0x61c>
 80040f2:	06fb      	lsls	r3, r7, #27
 80040f4:	d406      	bmi.n	8004104 <_vfprintf_r+0x614>
 80040f6:	067d      	lsls	r5, r7, #25
 80040f8:	d504      	bpl.n	8004104 <_vfprintf_r+0x614>
 80040fa:	f8d8 3000 	ldr.w	r3, [r8]
 80040fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004100:	801c      	strh	r4, [r3, #0]
 8004102:	e003      	b.n	800410c <_vfprintf_r+0x61c>
 8004104:	f8d8 3000 	ldr.w	r3, [r8]
 8004108:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800410a:	601d      	str	r5, [r3, #0]
 800410c:	4688      	mov	r8, r1
 800410e:	e557      	b.n	8003bc0 <_vfprintf_r+0xd0>
 8004110:	f047 0710 	orr.w	r7, r7, #16
 8004114:	f017 0320 	ands.w	r3, r7, #32
 8004118:	d012      	beq.n	8004140 <_vfprintf_r+0x650>
 800411a:	f108 0807 	add.w	r8, r8, #7
 800411e:	f028 0307 	bic.w	r3, r8, #7
 8004122:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004126:	f103 0808 	add.w	r8, r3, #8
 800412a:	2300      	movs	r3, #0
 800412c:	e091      	b.n	8004252 <_vfprintf_r+0x762>
 800412e:	bf00      	nop
 8004130:	080076ef 	.word	0x080076ef
 8004134:	080076f3 	.word	0x080076f3
 8004138:	080076f7 	.word	0x080076f7
 800413c:	080076fb 	.word	0x080076fb
 8004140:	f017 0110 	ands.w	r1, r7, #16
 8004144:	f108 0204 	add.w	r2, r8, #4
 8004148:	d107      	bne.n	800415a <_vfprintf_r+0x66a>
 800414a:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 800414e:	d004      	beq.n	800415a <_vfprintf_r+0x66a>
 8004150:	f8b8 4000 	ldrh.w	r4, [r8]
 8004154:	2500      	movs	r5, #0
 8004156:	4690      	mov	r8, r2
 8004158:	e7e7      	b.n	800412a <_vfprintf_r+0x63a>
 800415a:	f8d8 4000 	ldr.w	r4, [r8]
 800415e:	2500      	movs	r5, #0
 8004160:	4690      	mov	r8, r2
 8004162:	e076      	b.n	8004252 <_vfprintf_r+0x762>
 8004164:	2330      	movs	r3, #48	; 0x30
 8004166:	2278      	movs	r2, #120	; 0x78
 8004168:	48a8      	ldr	r0, [pc, #672]	; (800440c <_vfprintf_r+0x91c>)
 800416a:	f8d8 4000 	ldr.w	r4, [r8]
 800416e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004172:	2500      	movs	r5, #0
 8004174:	f047 0702 	orr.w	r7, r7, #2
 8004178:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 800417c:	f108 0804 	add.w	r8, r8, #4
 8004180:	9017      	str	r0, [sp, #92]	; 0x5c
 8004182:	2302      	movs	r3, #2
 8004184:	9204      	str	r2, [sp, #16]
 8004186:	e064      	b.n	8004252 <_vfprintf_r+0x762>
 8004188:	4643      	mov	r3, r8
 800418a:	2500      	movs	r5, #0
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9303      	str	r3, [sp, #12]
 8004190:	45ab      	cmp	fp, r5
 8004192:	f108 0804 	add.w	r8, r8, #4
 8004196:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 800419a:	db0d      	blt.n	80041b8 <_vfprintf_r+0x6c8>
 800419c:	4618      	mov	r0, r3
 800419e:	4629      	mov	r1, r5
 80041a0:	465a      	mov	r2, fp
 80041a2:	f002 f9f9 	bl	8006598 <memchr>
 80041a6:	2800      	cmp	r0, #0
 80041a8:	f000 80e4 	beq.w	8004374 <_vfprintf_r+0x884>
 80041ac:	9c03      	ldr	r4, [sp, #12]
 80041ae:	1b00      	subs	r0, r0, r4
 80041b0:	4558      	cmp	r0, fp
 80041b2:	bfb8      	it	lt
 80041b4:	4683      	movlt	fp, r0
 80041b6:	e0de      	b.n	8004376 <_vfprintf_r+0x886>
 80041b8:	9803      	ldr	r0, [sp, #12]
 80041ba:	f7ff fc91 	bl	8003ae0 <strlen>
 80041be:	4683      	mov	fp, r0
 80041c0:	e0d9      	b.n	8004376 <_vfprintf_r+0x886>
 80041c2:	f047 0710 	orr.w	r7, r7, #16
 80041c6:	06bc      	lsls	r4, r7, #26
 80041c8:	d508      	bpl.n	80041dc <_vfprintf_r+0x6ec>
 80041ca:	f108 0807 	add.w	r8, r8, #7
 80041ce:	f028 0307 	bic.w	r3, r8, #7
 80041d2:	f103 0808 	add.w	r8, r3, #8
 80041d6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80041da:	e00d      	b.n	80041f8 <_vfprintf_r+0x708>
 80041dc:	f017 0f10 	tst.w	r7, #16
 80041e0:	f108 0304 	add.w	r3, r8, #4
 80041e4:	d104      	bne.n	80041f0 <_vfprintf_r+0x700>
 80041e6:	0678      	lsls	r0, r7, #25
 80041e8:	d502      	bpl.n	80041f0 <_vfprintf_r+0x700>
 80041ea:	f8b8 4000 	ldrh.w	r4, [r8]
 80041ee:	e001      	b.n	80041f4 <_vfprintf_r+0x704>
 80041f0:	f8d8 4000 	ldr.w	r4, [r8]
 80041f4:	2500      	movs	r5, #0
 80041f6:	4698      	mov	r8, r3
 80041f8:	2301      	movs	r3, #1
 80041fa:	e02a      	b.n	8004252 <_vfprintf_r+0x762>
 80041fc:	4d83      	ldr	r5, [pc, #524]	; (800440c <_vfprintf_r+0x91c>)
 80041fe:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004202:	9517      	str	r5, [sp, #92]	; 0x5c
 8004204:	06b9      	lsls	r1, r7, #26
 8004206:	d508      	bpl.n	800421a <_vfprintf_r+0x72a>
 8004208:	f108 0807 	add.w	r8, r8, #7
 800420c:	f028 0307 	bic.w	r3, r8, #7
 8004210:	f103 0808 	add.w	r8, r3, #8
 8004214:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004218:	e00d      	b.n	8004236 <_vfprintf_r+0x746>
 800421a:	f017 0f10 	tst.w	r7, #16
 800421e:	f108 0304 	add.w	r3, r8, #4
 8004222:	d104      	bne.n	800422e <_vfprintf_r+0x73e>
 8004224:	067a      	lsls	r2, r7, #25
 8004226:	d502      	bpl.n	800422e <_vfprintf_r+0x73e>
 8004228:	f8b8 4000 	ldrh.w	r4, [r8]
 800422c:	e001      	b.n	8004232 <_vfprintf_r+0x742>
 800422e:	f8d8 4000 	ldr.w	r4, [r8]
 8004232:	2500      	movs	r5, #0
 8004234:	4698      	mov	r8, r3
 8004236:	07fb      	lsls	r3, r7, #31
 8004238:	d50a      	bpl.n	8004250 <_vfprintf_r+0x760>
 800423a:	ea54 0005 	orrs.w	r0, r4, r5
 800423e:	d007      	beq.n	8004250 <_vfprintf_r+0x760>
 8004240:	2330      	movs	r3, #48	; 0x30
 8004242:	9904      	ldr	r1, [sp, #16]
 8004244:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8004248:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 800424c:	f047 0702 	orr.w	r7, r7, #2
 8004250:	2302      	movs	r3, #2
 8004252:	2200      	movs	r2, #0
 8004254:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8004258:	e000      	b.n	800425c <_vfprintf_r+0x76c>
 800425a:	2301      	movs	r3, #1
 800425c:	f1bb 0f00 	cmp.w	fp, #0
 8004260:	bfa8      	it	ge
 8004262:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
 8004266:	ea54 0205 	orrs.w	r2, r4, r5
 800426a:	d102      	bne.n	8004272 <_vfprintf_r+0x782>
 800426c:	f1bb 0f00 	cmp.w	fp, #0
 8004270:	d05a      	beq.n	8004328 <_vfprintf_r+0x838>
 8004272:	2b01      	cmp	r3, #1
 8004274:	d01f      	beq.n	80042b6 <_vfprintf_r+0x7c6>
 8004276:	2b02      	cmp	r3, #2
 8004278:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 800427c:	d041      	beq.n	8004302 <_vfprintf_r+0x812>
 800427e:	08e1      	lsrs	r1, r4, #3
 8004280:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
 8004284:	08e9      	lsrs	r1, r5, #3
 8004286:	9010      	str	r0, [sp, #64]	; 0x40
 8004288:	9111      	str	r1, [sp, #68]	; 0x44
 800428a:	f004 0207 	and.w	r2, r4, #7
 800428e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8004292:	3230      	adds	r2, #48	; 0x30
 8004294:	ea54 0005 	orrs.w	r0, r4, r5
 8004298:	9303      	str	r3, [sp, #12]
 800429a:	701a      	strb	r2, [r3, #0]
 800429c:	f103 33ff 	add.w	r3, r3, #4294967295
 80042a0:	d1ed      	bne.n	800427e <_vfprintf_r+0x78e>
 80042a2:	07f8      	lsls	r0, r7, #31
 80042a4:	9903      	ldr	r1, [sp, #12]
 80042a6:	d54c      	bpl.n	8004342 <_vfprintf_r+0x852>
 80042a8:	2a30      	cmp	r2, #48	; 0x30
 80042aa:	d04a      	beq.n	8004342 <_vfprintf_r+0x852>
 80042ac:	9303      	str	r3, [sp, #12]
 80042ae:	2330      	movs	r3, #48	; 0x30
 80042b0:	f801 3c01 	strb.w	r3, [r1, #-1]
 80042b4:	e045      	b.n	8004342 <_vfprintf_r+0x852>
 80042b6:	2d00      	cmp	r5, #0
 80042b8:	bf08      	it	eq
 80042ba:	2c0a      	cmpeq	r4, #10
 80042bc:	d205      	bcs.n	80042ca <_vfprintf_r+0x7da>
 80042be:	3430      	adds	r4, #48	; 0x30
 80042c0:	f88d 40b7 	strb.w	r4, [sp, #183]	; 0xb7
 80042c4:	f10d 04b7 	add.w	r4, sp, #183	; 0xb7
 80042c8:	e03a      	b.n	8004340 <_vfprintf_r+0x850>
 80042ca:	f10d 00b7 	add.w	r0, sp, #183	; 0xb7
 80042ce:	9006      	str	r0, [sp, #24]
 80042d0:	9906      	ldr	r1, [sp, #24]
 80042d2:	9103      	str	r1, [sp, #12]
 80042d4:	4620      	mov	r0, r4
 80042d6:	4629      	mov	r1, r5
 80042d8:	220a      	movs	r2, #10
 80042da:	2300      	movs	r3, #0
 80042dc:	f7fc fbf6 	bl	8000acc <__aeabi_uldivmod>
 80042e0:	9b06      	ldr	r3, [sp, #24]
 80042e2:	3230      	adds	r2, #48	; 0x30
 80042e4:	f803 2901 	strb.w	r2, [r3], #-1
 80042e8:	4620      	mov	r0, r4
 80042ea:	9306      	str	r3, [sp, #24]
 80042ec:	4629      	mov	r1, r5
 80042ee:	220a      	movs	r2, #10
 80042f0:	2300      	movs	r3, #0
 80042f2:	f7fc fbeb 	bl	8000acc <__aeabi_uldivmod>
 80042f6:	4604      	mov	r4, r0
 80042f8:	460d      	mov	r5, r1
 80042fa:	ea54 0005 	orrs.w	r0, r4, r5
 80042fe:	d1e7      	bne.n	80042d0 <_vfprintf_r+0x7e0>
 8004300:	e01f      	b.n	8004342 <_vfprintf_r+0x852>
 8004302:	f004 020f 	and.w	r2, r4, #15
 8004306:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8004308:	9303      	str	r3, [sp, #12]
 800430a:	5c8a      	ldrb	r2, [r1, r2]
 800430c:	f803 2901 	strb.w	r2, [r3], #-1
 8004310:	0922      	lsrs	r2, r4, #4
 8004312:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
 8004316:	0929      	lsrs	r1, r5, #4
 8004318:	9012      	str	r0, [sp, #72]	; 0x48
 800431a:	9113      	str	r1, [sp, #76]	; 0x4c
 800431c:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8004320:	ea54 0205 	orrs.w	r2, r4, r5
 8004324:	d1ed      	bne.n	8004302 <_vfprintf_r+0x812>
 8004326:	e00c      	b.n	8004342 <_vfprintf_r+0x852>
 8004328:	b933      	cbnz	r3, 8004338 <_vfprintf_r+0x848>
 800432a:	07fa      	lsls	r2, r7, #31
 800432c:	d507      	bpl.n	800433e <_vfprintf_r+0x84e>
 800432e:	ac3e      	add	r4, sp, #248	; 0xf8
 8004330:	2330      	movs	r3, #48	; 0x30
 8004332:	f804 3d41 	strb.w	r3, [r4, #-65]!
 8004336:	e003      	b.n	8004340 <_vfprintf_r+0x850>
 8004338:	ad2e      	add	r5, sp, #184	; 0xb8
 800433a:	9503      	str	r5, [sp, #12]
 800433c:	e001      	b.n	8004342 <_vfprintf_r+0x852>
 800433e:	ac2e      	add	r4, sp, #184	; 0xb8
 8004340:	9403      	str	r4, [sp, #12]
 8004342:	9c03      	ldr	r4, [sp, #12]
 8004344:	f10d 0cb8 	add.w	ip, sp, #184	; 0xb8
 8004348:	465d      	mov	r5, fp
 800434a:	ebc4 0b0c 	rsb	fp, r4, ip
 800434e:	2400      	movs	r4, #0
 8004350:	e012      	b.n	8004378 <_vfprintf_r+0x888>
 8004352:	9d04      	ldr	r5, [sp, #16]
 8004354:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8004358:	2d00      	cmp	r5, #0
 800435a:	f000 8389 	beq.w	8004a70 <_vfprintf_r+0xf80>
 800435e:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 8004362:	2500      	movs	r5, #0
 8004364:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 8004368:	a824      	add	r0, sp, #144	; 0x90
 800436a:	f04f 0b01 	mov.w	fp, #1
 800436e:	462c      	mov	r4, r5
 8004370:	9003      	str	r0, [sp, #12]
 8004372:	e001      	b.n	8004378 <_vfprintf_r+0x888>
 8004374:	4605      	mov	r5, r0
 8004376:	462c      	mov	r4, r5
 8004378:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800437c:	45ab      	cmp	fp, r5
 800437e:	bfac      	ite	ge
 8004380:	4659      	movge	r1, fp
 8004382:	4629      	movlt	r1, r5
 8004384:	9106      	str	r1, [sp, #24]
 8004386:	b10b      	cbz	r3, 800438c <_vfprintf_r+0x89c>
 8004388:	3101      	adds	r1, #1
 800438a:	9106      	str	r1, [sp, #24]
 800438c:	f017 0302 	ands.w	r3, r7, #2
 8004390:	930d      	str	r3, [sp, #52]	; 0x34
 8004392:	d002      	beq.n	800439a <_vfprintf_r+0x8aa>
 8004394:	9806      	ldr	r0, [sp, #24]
 8004396:	3002      	adds	r0, #2
 8004398:	9006      	str	r0, [sp, #24]
 800439a:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 800439e:	9315      	str	r3, [sp, #84]	; 0x54
 80043a0:	d141      	bne.n	8004426 <_vfprintf_r+0x936>
 80043a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80043a4:	9906      	ldr	r1, [sp, #24]
 80043a6:	ebc1 0c00 	rsb	ip, r1, r0
 80043aa:	f1bc 0f00 	cmp.w	ip, #0
 80043ae:	dd3a      	ble.n	8004426 <_vfprintf_r+0x936>
 80043b0:	4b17      	ldr	r3, [pc, #92]	; (8004410 <_vfprintf_r+0x920>)
 80043b2:	6033      	str	r3, [r6, #0]
 80043b4:	f1bc 0f10 	cmp.w	ip, #16
 80043b8:	dd1b      	ble.n	80043f2 <_vfprintf_r+0x902>
 80043ba:	2310      	movs	r3, #16
 80043bc:	6073      	str	r3, [r6, #4]
 80043be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043c0:	3310      	adds	r3, #16
 80043c2:	9323      	str	r3, [sp, #140]	; 0x8c
 80043c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043c6:	3301      	adds	r3, #1
 80043c8:	2b07      	cmp	r3, #7
 80043ca:	9322      	str	r3, [sp, #136]	; 0x88
 80043cc:	dc01      	bgt.n	80043d2 <_vfprintf_r+0x8e2>
 80043ce:	3608      	adds	r6, #8
 80043d0:	e00c      	b.n	80043ec <_vfprintf_r+0x8fc>
 80043d2:	4650      	mov	r0, sl
 80043d4:	4649      	mov	r1, r9
 80043d6:	aa21      	add	r2, sp, #132	; 0x84
 80043d8:	f8cd c008 	str.w	ip, [sp, #8]
 80043dc:	f002 fe6e 	bl	80070bc <__sprint_r>
 80043e0:	f8dd c008 	ldr.w	ip, [sp, #8]
 80043e4:	2800      	cmp	r0, #0
 80043e6:	f040 834a 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80043ea:	ae2e      	add	r6, sp, #184	; 0xb8
 80043ec:	f1ac 0c10 	sub.w	ip, ip, #16
 80043f0:	e7de      	b.n	80043b0 <_vfprintf_r+0x8c0>
 80043f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043f4:	f8c6 c004 	str.w	ip, [r6, #4]
 80043f8:	4463      	add	r3, ip
 80043fa:	9323      	str	r3, [sp, #140]	; 0x8c
 80043fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043fe:	3301      	adds	r3, #1
 8004400:	2b07      	cmp	r3, #7
 8004402:	9322      	str	r3, [sp, #136]	; 0x88
 8004404:	dc06      	bgt.n	8004414 <_vfprintf_r+0x924>
 8004406:	3608      	adds	r6, #8
 8004408:	e00d      	b.n	8004426 <_vfprintf_r+0x936>
 800440a:	bf00      	nop
 800440c:	08007710 	.word	0x08007710
 8004410:	080076df 	.word	0x080076df
 8004414:	4650      	mov	r0, sl
 8004416:	4649      	mov	r1, r9
 8004418:	aa21      	add	r2, sp, #132	; 0x84
 800441a:	f002 fe4f 	bl	80070bc <__sprint_r>
 800441e:	2800      	cmp	r0, #0
 8004420:	f040 832d 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004424:	ae2e      	add	r6, sp, #184	; 0xb8
 8004426:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 800442a:	b1bb      	cbz	r3, 800445c <_vfprintf_r+0x96c>
 800442c:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8004430:	6033      	str	r3, [r6, #0]
 8004432:	2301      	movs	r3, #1
 8004434:	6073      	str	r3, [r6, #4]
 8004436:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004438:	3301      	adds	r3, #1
 800443a:	9323      	str	r3, [sp, #140]	; 0x8c
 800443c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800443e:	3301      	adds	r3, #1
 8004440:	2b07      	cmp	r3, #7
 8004442:	9322      	str	r3, [sp, #136]	; 0x88
 8004444:	dc01      	bgt.n	800444a <_vfprintf_r+0x95a>
 8004446:	3608      	adds	r6, #8
 8004448:	e008      	b.n	800445c <_vfprintf_r+0x96c>
 800444a:	4650      	mov	r0, sl
 800444c:	4649      	mov	r1, r9
 800444e:	aa21      	add	r2, sp, #132	; 0x84
 8004450:	f002 fe34 	bl	80070bc <__sprint_r>
 8004454:	2800      	cmp	r0, #0
 8004456:	f040 8312 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 800445a:	ae2e      	add	r6, sp, #184	; 0xb8
 800445c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800445e:	b1b3      	cbz	r3, 800448e <_vfprintf_r+0x99e>
 8004460:	ab1a      	add	r3, sp, #104	; 0x68
 8004462:	6033      	str	r3, [r6, #0]
 8004464:	2302      	movs	r3, #2
 8004466:	6073      	str	r3, [r6, #4]
 8004468:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800446a:	3302      	adds	r3, #2
 800446c:	9323      	str	r3, [sp, #140]	; 0x8c
 800446e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004470:	3301      	adds	r3, #1
 8004472:	2b07      	cmp	r3, #7
 8004474:	9322      	str	r3, [sp, #136]	; 0x88
 8004476:	dc01      	bgt.n	800447c <_vfprintf_r+0x98c>
 8004478:	3608      	adds	r6, #8
 800447a:	e008      	b.n	800448e <_vfprintf_r+0x99e>
 800447c:	4650      	mov	r0, sl
 800447e:	4649      	mov	r1, r9
 8004480:	aa21      	add	r2, sp, #132	; 0x84
 8004482:	f002 fe1b 	bl	80070bc <__sprint_r>
 8004486:	2800      	cmp	r0, #0
 8004488:	f040 82f9 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 800448c:	ae2e      	add	r6, sp, #184	; 0xb8
 800448e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004490:	2b80      	cmp	r3, #128	; 0x80
 8004492:	d13c      	bne.n	800450e <_vfprintf_r+0xa1e>
 8004494:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004496:	9906      	ldr	r1, [sp, #24]
 8004498:	ebc1 0c00 	rsb	ip, r1, r0
 800449c:	f1bc 0f00 	cmp.w	ip, #0
 80044a0:	dd35      	ble.n	800450e <_vfprintf_r+0xa1e>
 80044a2:	4b9c      	ldr	r3, [pc, #624]	; (8004714 <_vfprintf_r+0xc24>)
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	f1bc 0f10 	cmp.w	ip, #16
 80044aa:	dd1b      	ble.n	80044e4 <_vfprintf_r+0x9f4>
 80044ac:	2310      	movs	r3, #16
 80044ae:	6073      	str	r3, [r6, #4]
 80044b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044b2:	3310      	adds	r3, #16
 80044b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80044b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044b8:	3301      	adds	r3, #1
 80044ba:	2b07      	cmp	r3, #7
 80044bc:	9322      	str	r3, [sp, #136]	; 0x88
 80044be:	dc01      	bgt.n	80044c4 <_vfprintf_r+0x9d4>
 80044c0:	3608      	adds	r6, #8
 80044c2:	e00c      	b.n	80044de <_vfprintf_r+0x9ee>
 80044c4:	4650      	mov	r0, sl
 80044c6:	4649      	mov	r1, r9
 80044c8:	aa21      	add	r2, sp, #132	; 0x84
 80044ca:	f8cd c008 	str.w	ip, [sp, #8]
 80044ce:	f002 fdf5 	bl	80070bc <__sprint_r>
 80044d2:	f8dd c008 	ldr.w	ip, [sp, #8]
 80044d6:	2800      	cmp	r0, #0
 80044d8:	f040 82d1 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80044dc:	ae2e      	add	r6, sp, #184	; 0xb8
 80044de:	f1ac 0c10 	sub.w	ip, ip, #16
 80044e2:	e7de      	b.n	80044a2 <_vfprintf_r+0x9b2>
 80044e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044e6:	f8c6 c004 	str.w	ip, [r6, #4]
 80044ea:	4463      	add	r3, ip
 80044ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80044ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044f0:	3301      	adds	r3, #1
 80044f2:	2b07      	cmp	r3, #7
 80044f4:	9322      	str	r3, [sp, #136]	; 0x88
 80044f6:	dc01      	bgt.n	80044fc <_vfprintf_r+0xa0c>
 80044f8:	3608      	adds	r6, #8
 80044fa:	e008      	b.n	800450e <_vfprintf_r+0xa1e>
 80044fc:	4650      	mov	r0, sl
 80044fe:	4649      	mov	r1, r9
 8004500:	aa21      	add	r2, sp, #132	; 0x84
 8004502:	f002 fddb 	bl	80070bc <__sprint_r>
 8004506:	2800      	cmp	r0, #0
 8004508:	f040 82b9 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 800450c:	ae2e      	add	r6, sp, #184	; 0xb8
 800450e:	ebcb 0505 	rsb	r5, fp, r5
 8004512:	2d00      	cmp	r5, #0
 8004514:	dd2e      	ble.n	8004574 <_vfprintf_r+0xa84>
 8004516:	4b7f      	ldr	r3, [pc, #508]	; (8004714 <_vfprintf_r+0xc24>)
 8004518:	6033      	str	r3, [r6, #0]
 800451a:	2d10      	cmp	r5, #16
 800451c:	dd16      	ble.n	800454c <_vfprintf_r+0xa5c>
 800451e:	2310      	movs	r3, #16
 8004520:	6073      	str	r3, [r6, #4]
 8004522:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004524:	3310      	adds	r3, #16
 8004526:	9323      	str	r3, [sp, #140]	; 0x8c
 8004528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800452a:	3301      	adds	r3, #1
 800452c:	2b07      	cmp	r3, #7
 800452e:	9322      	str	r3, [sp, #136]	; 0x88
 8004530:	dc01      	bgt.n	8004536 <_vfprintf_r+0xa46>
 8004532:	3608      	adds	r6, #8
 8004534:	e008      	b.n	8004548 <_vfprintf_r+0xa58>
 8004536:	4650      	mov	r0, sl
 8004538:	4649      	mov	r1, r9
 800453a:	aa21      	add	r2, sp, #132	; 0x84
 800453c:	f002 fdbe 	bl	80070bc <__sprint_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	f040 829c 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004546:	ae2e      	add	r6, sp, #184	; 0xb8
 8004548:	3d10      	subs	r5, #16
 800454a:	e7e4      	b.n	8004516 <_vfprintf_r+0xa26>
 800454c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800454e:	6075      	str	r5, [r6, #4]
 8004550:	441d      	add	r5, r3
 8004552:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004554:	9523      	str	r5, [sp, #140]	; 0x8c
 8004556:	3301      	adds	r3, #1
 8004558:	2b07      	cmp	r3, #7
 800455a:	9322      	str	r3, [sp, #136]	; 0x88
 800455c:	dc01      	bgt.n	8004562 <_vfprintf_r+0xa72>
 800455e:	3608      	adds	r6, #8
 8004560:	e008      	b.n	8004574 <_vfprintf_r+0xa84>
 8004562:	4650      	mov	r0, sl
 8004564:	4649      	mov	r1, r9
 8004566:	aa21      	add	r2, sp, #132	; 0x84
 8004568:	f002 fda8 	bl	80070bc <__sprint_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	f040 8286 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004572:	ae2e      	add	r6, sp, #184	; 0xb8
 8004574:	05fb      	lsls	r3, r7, #23
 8004576:	d405      	bmi.n	8004584 <_vfprintf_r+0xa94>
 8004578:	9c03      	ldr	r4, [sp, #12]
 800457a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800457c:	e886 0810 	stmia.w	r6, {r4, fp}
 8004580:	445b      	add	r3, fp
 8004582:	e0da      	b.n	800473a <_vfprintf_r+0xc4a>
 8004584:	9d04      	ldr	r5, [sp, #16]
 8004586:	2d65      	cmp	r5, #101	; 0x65
 8004588:	f340 81a7 	ble.w	80048da <_vfprintf_r+0xdea>
 800458c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004590:	2200      	movs	r2, #0
 8004592:	2300      	movs	r3, #0
 8004594:	f7fc fa40 	bl	8000a18 <__aeabi_dcmpeq>
 8004598:	2800      	cmp	r0, #0
 800459a:	d059      	beq.n	8004650 <_vfprintf_r+0xb60>
 800459c:	4b5e      	ldr	r3, [pc, #376]	; (8004718 <_vfprintf_r+0xc28>)
 800459e:	6033      	str	r3, [r6, #0]
 80045a0:	2301      	movs	r3, #1
 80045a2:	6073      	str	r3, [r6, #4]
 80045a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045a6:	3301      	adds	r3, #1
 80045a8:	9323      	str	r3, [sp, #140]	; 0x8c
 80045aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045ac:	3301      	adds	r3, #1
 80045ae:	2b07      	cmp	r3, #7
 80045b0:	9322      	str	r3, [sp, #136]	; 0x88
 80045b2:	dc01      	bgt.n	80045b8 <_vfprintf_r+0xac8>
 80045b4:	3608      	adds	r6, #8
 80045b6:	e008      	b.n	80045ca <_vfprintf_r+0xada>
 80045b8:	4650      	mov	r0, sl
 80045ba:	4649      	mov	r1, r9
 80045bc:	aa21      	add	r2, sp, #132	; 0x84
 80045be:	f002 fd7d 	bl	80070bc <__sprint_r>
 80045c2:	2800      	cmp	r0, #0
 80045c4:	f040 825b 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80045c8:	ae2e      	add	r6, sp, #184	; 0xb8
 80045ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045cc:	9c05      	ldr	r4, [sp, #20]
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	db02      	blt.n	80045d8 <_vfprintf_r+0xae8>
 80045d2:	07fd      	lsls	r5, r7, #31
 80045d4:	f140 8202 	bpl.w	80049dc <_vfprintf_r+0xeec>
 80045d8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80045da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045dc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80045de:	6035      	str	r5, [r6, #0]
 80045e0:	4423      	add	r3, r4
 80045e2:	9323      	str	r3, [sp, #140]	; 0x8c
 80045e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80045e6:	6074      	str	r4, [r6, #4]
 80045e8:	3301      	adds	r3, #1
 80045ea:	2b07      	cmp	r3, #7
 80045ec:	9322      	str	r3, [sp, #136]	; 0x88
 80045ee:	dc01      	bgt.n	80045f4 <_vfprintf_r+0xb04>
 80045f0:	3608      	adds	r6, #8
 80045f2:	e008      	b.n	8004606 <_vfprintf_r+0xb16>
 80045f4:	4650      	mov	r0, sl
 80045f6:	4649      	mov	r1, r9
 80045f8:	aa21      	add	r2, sp, #132	; 0x84
 80045fa:	f002 fd5f 	bl	80070bc <__sprint_r>
 80045fe:	2800      	cmp	r0, #0
 8004600:	f040 823d 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004604:	ae2e      	add	r6, sp, #184	; 0xb8
 8004606:	9d05      	ldr	r5, [sp, #20]
 8004608:	1e6c      	subs	r4, r5, #1
 800460a:	2c00      	cmp	r4, #0
 800460c:	f340 81e6 	ble.w	80049dc <_vfprintf_r+0xeec>
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <_vfprintf_r+0xc24>)
 8004612:	6033      	str	r3, [r6, #0]
 8004614:	2c10      	cmp	r4, #16
 8004616:	dd16      	ble.n	8004646 <_vfprintf_r+0xb56>
 8004618:	2310      	movs	r3, #16
 800461a:	6073      	str	r3, [r6, #4]
 800461c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800461e:	3310      	adds	r3, #16
 8004620:	9323      	str	r3, [sp, #140]	; 0x8c
 8004622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004624:	3301      	adds	r3, #1
 8004626:	2b07      	cmp	r3, #7
 8004628:	9322      	str	r3, [sp, #136]	; 0x88
 800462a:	dc01      	bgt.n	8004630 <_vfprintf_r+0xb40>
 800462c:	3608      	adds	r6, #8
 800462e:	e008      	b.n	8004642 <_vfprintf_r+0xb52>
 8004630:	4650      	mov	r0, sl
 8004632:	4649      	mov	r1, r9
 8004634:	aa21      	add	r2, sp, #132	; 0x84
 8004636:	f002 fd41 	bl	80070bc <__sprint_r>
 800463a:	2800      	cmp	r0, #0
 800463c:	f040 821f 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004640:	ae2e      	add	r6, sp, #184	; 0xb8
 8004642:	3c10      	subs	r4, #16
 8004644:	e7e4      	b.n	8004610 <_vfprintf_r+0xb20>
 8004646:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004648:	6074      	str	r4, [r6, #4]
 800464a:	441c      	add	r4, r3
 800464c:	9423      	str	r4, [sp, #140]	; 0x8c
 800464e:	e134      	b.n	80048ba <_vfprintf_r+0xdca>
 8004650:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004652:	2b00      	cmp	r3, #0
 8004654:	dc73      	bgt.n	800473e <_vfprintf_r+0xc4e>
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <_vfprintf_r+0xc28>)
 8004658:	6033      	str	r3, [r6, #0]
 800465a:	2301      	movs	r3, #1
 800465c:	6073      	str	r3, [r6, #4]
 800465e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004660:	3301      	adds	r3, #1
 8004662:	9323      	str	r3, [sp, #140]	; 0x8c
 8004664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004666:	3301      	adds	r3, #1
 8004668:	2b07      	cmp	r3, #7
 800466a:	9322      	str	r3, [sp, #136]	; 0x88
 800466c:	dc01      	bgt.n	8004672 <_vfprintf_r+0xb82>
 800466e:	3608      	adds	r6, #8
 8004670:	e008      	b.n	8004684 <_vfprintf_r+0xb94>
 8004672:	4650      	mov	r0, sl
 8004674:	4649      	mov	r1, r9
 8004676:	aa21      	add	r2, sp, #132	; 0x84
 8004678:	f002 fd20 	bl	80070bc <__sprint_r>
 800467c:	2800      	cmp	r0, #0
 800467e:	f040 81fe 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004682:	ae2e      	add	r6, sp, #184	; 0xb8
 8004684:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004686:	b923      	cbnz	r3, 8004692 <_vfprintf_r+0xba2>
 8004688:	9c05      	ldr	r4, [sp, #20]
 800468a:	b914      	cbnz	r4, 8004692 <_vfprintf_r+0xba2>
 800468c:	07fc      	lsls	r4, r7, #31
 800468e:	f140 81a5 	bpl.w	80049dc <_vfprintf_r+0xeec>
 8004692:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004694:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004696:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004698:	6035      	str	r5, [r6, #0]
 800469a:	4423      	add	r3, r4
 800469c:	9323      	str	r3, [sp, #140]	; 0x8c
 800469e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046a0:	6074      	str	r4, [r6, #4]
 80046a2:	3301      	adds	r3, #1
 80046a4:	2b07      	cmp	r3, #7
 80046a6:	9322      	str	r3, [sp, #136]	; 0x88
 80046a8:	dc01      	bgt.n	80046ae <_vfprintf_r+0xbbe>
 80046aa:	3608      	adds	r6, #8
 80046ac:	e008      	b.n	80046c0 <_vfprintf_r+0xbd0>
 80046ae:	4650      	mov	r0, sl
 80046b0:	4649      	mov	r1, r9
 80046b2:	aa21      	add	r2, sp, #132	; 0x84
 80046b4:	f002 fd02 	bl	80070bc <__sprint_r>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	f040 81e0 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80046be:	ae2e      	add	r6, sp, #184	; 0xb8
 80046c0:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80046c2:	4264      	negs	r4, r4
 80046c4:	2c00      	cmp	r4, #0
 80046c6:	dd32      	ble.n	800472e <_vfprintf_r+0xc3e>
 80046c8:	4b12      	ldr	r3, [pc, #72]	; (8004714 <_vfprintf_r+0xc24>)
 80046ca:	6033      	str	r3, [r6, #0]
 80046cc:	2c10      	cmp	r4, #16
 80046ce:	dd16      	ble.n	80046fe <_vfprintf_r+0xc0e>
 80046d0:	2310      	movs	r3, #16
 80046d2:	6073      	str	r3, [r6, #4]
 80046d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80046d6:	3310      	adds	r3, #16
 80046d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80046da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80046dc:	3301      	adds	r3, #1
 80046de:	2b07      	cmp	r3, #7
 80046e0:	9322      	str	r3, [sp, #136]	; 0x88
 80046e2:	dc01      	bgt.n	80046e8 <_vfprintf_r+0xbf8>
 80046e4:	3608      	adds	r6, #8
 80046e6:	e008      	b.n	80046fa <_vfprintf_r+0xc0a>
 80046e8:	4650      	mov	r0, sl
 80046ea:	4649      	mov	r1, r9
 80046ec:	aa21      	add	r2, sp, #132	; 0x84
 80046ee:	f002 fce5 	bl	80070bc <__sprint_r>
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f040 81c3 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80046f8:	ae2e      	add	r6, sp, #184	; 0xb8
 80046fa:	3c10      	subs	r4, #16
 80046fc:	e7e4      	b.n	80046c8 <_vfprintf_r+0xbd8>
 80046fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004700:	6074      	str	r4, [r6, #4]
 8004702:	441c      	add	r4, r3
 8004704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004706:	9423      	str	r4, [sp, #140]	; 0x8c
 8004708:	3301      	adds	r3, #1
 800470a:	2b07      	cmp	r3, #7
 800470c:	9322      	str	r3, [sp, #136]	; 0x88
 800470e:	dc05      	bgt.n	800471c <_vfprintf_r+0xc2c>
 8004710:	3608      	adds	r6, #8
 8004712:	e00c      	b.n	800472e <_vfprintf_r+0xc3e>
 8004714:	08007723 	.word	0x08007723
 8004718:	08007721 	.word	0x08007721
 800471c:	4650      	mov	r0, sl
 800471e:	4649      	mov	r1, r9
 8004720:	aa21      	add	r2, sp, #132	; 0x84
 8004722:	f002 fccb 	bl	80070bc <__sprint_r>
 8004726:	2800      	cmp	r0, #0
 8004728:	f040 81a9 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 800472c:	ae2e      	add	r6, sp, #184	; 0xb8
 800472e:	9d03      	ldr	r5, [sp, #12]
 8004730:	9c05      	ldr	r4, [sp, #20]
 8004732:	6035      	str	r5, [r6, #0]
 8004734:	6074      	str	r4, [r6, #4]
 8004736:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004738:	4423      	add	r3, r4
 800473a:	9323      	str	r3, [sp, #140]	; 0x8c
 800473c:	e0bd      	b.n	80048ba <_vfprintf_r+0xdca>
 800473e:	9805      	ldr	r0, [sp, #20]
 8004740:	9d03      	ldr	r5, [sp, #12]
 8004742:	4683      	mov	fp, r0
 8004744:	45a3      	cmp	fp, r4
 8004746:	bfa8      	it	ge
 8004748:	46a3      	movge	fp, r4
 800474a:	f1bb 0f00 	cmp.w	fp, #0
 800474e:	4405      	add	r5, r0
 8004750:	dd15      	ble.n	800477e <_vfprintf_r+0xc8e>
 8004752:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004754:	9903      	ldr	r1, [sp, #12]
 8004756:	445b      	add	r3, fp
 8004758:	9323      	str	r3, [sp, #140]	; 0x8c
 800475a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800475c:	3301      	adds	r3, #1
 800475e:	2b07      	cmp	r3, #7
 8004760:	e886 0802 	stmia.w	r6, {r1, fp}
 8004764:	9322      	str	r3, [sp, #136]	; 0x88
 8004766:	dc01      	bgt.n	800476c <_vfprintf_r+0xc7c>
 8004768:	3608      	adds	r6, #8
 800476a:	e008      	b.n	800477e <_vfprintf_r+0xc8e>
 800476c:	4650      	mov	r0, sl
 800476e:	4649      	mov	r1, r9
 8004770:	aa21      	add	r2, sp, #132	; 0x84
 8004772:	f002 fca3 	bl	80070bc <__sprint_r>
 8004776:	2800      	cmp	r0, #0
 8004778:	f040 8181 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 800477c:	ae2e      	add	r6, sp, #184	; 0xb8
 800477e:	ea2b 7beb 	bic.w	fp, fp, fp, asr #31
 8004782:	ebcb 0b04 	rsb	fp, fp, r4
 8004786:	f1bb 0f00 	cmp.w	fp, #0
 800478a:	dd31      	ble.n	80047f0 <_vfprintf_r+0xd00>
 800478c:	4b9a      	ldr	r3, [pc, #616]	; (80049f8 <_vfprintf_r+0xf08>)
 800478e:	6033      	str	r3, [r6, #0]
 8004790:	f1bb 0f10 	cmp.w	fp, #16
 8004794:	dd17      	ble.n	80047c6 <_vfprintf_r+0xcd6>
 8004796:	2310      	movs	r3, #16
 8004798:	6073      	str	r3, [r6, #4]
 800479a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800479c:	3310      	adds	r3, #16
 800479e:	9323      	str	r3, [sp, #140]	; 0x8c
 80047a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047a2:	3301      	adds	r3, #1
 80047a4:	2b07      	cmp	r3, #7
 80047a6:	9322      	str	r3, [sp, #136]	; 0x88
 80047a8:	dc01      	bgt.n	80047ae <_vfprintf_r+0xcbe>
 80047aa:	3608      	adds	r6, #8
 80047ac:	e008      	b.n	80047c0 <_vfprintf_r+0xcd0>
 80047ae:	4650      	mov	r0, sl
 80047b0:	4649      	mov	r1, r9
 80047b2:	aa21      	add	r2, sp, #132	; 0x84
 80047b4:	f002 fc82 	bl	80070bc <__sprint_r>
 80047b8:	2800      	cmp	r0, #0
 80047ba:	f040 8160 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80047be:	ae2e      	add	r6, sp, #184	; 0xb8
 80047c0:	f1ab 0b10 	sub.w	fp, fp, #16
 80047c4:	e7e2      	b.n	800478c <_vfprintf_r+0xc9c>
 80047c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047c8:	f8c6 b004 	str.w	fp, [r6, #4]
 80047cc:	445b      	add	r3, fp
 80047ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80047d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047d2:	3301      	adds	r3, #1
 80047d4:	2b07      	cmp	r3, #7
 80047d6:	9322      	str	r3, [sp, #136]	; 0x88
 80047d8:	dc01      	bgt.n	80047de <_vfprintf_r+0xcee>
 80047da:	3608      	adds	r6, #8
 80047dc:	e008      	b.n	80047f0 <_vfprintf_r+0xd00>
 80047de:	4650      	mov	r0, sl
 80047e0:	4649      	mov	r1, r9
 80047e2:	aa21      	add	r2, sp, #132	; 0x84
 80047e4:	f002 fc6a 	bl	80070bc <__sprint_r>
 80047e8:	2800      	cmp	r0, #0
 80047ea:	f040 8148 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80047ee:	ae2e      	add	r6, sp, #184	; 0xb8
 80047f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047f2:	9805      	ldr	r0, [sp, #20]
 80047f4:	9a03      	ldr	r2, [sp, #12]
 80047f6:	4283      	cmp	r3, r0
 80047f8:	4414      	add	r4, r2
 80047fa:	db01      	blt.n	8004800 <_vfprintf_r+0xd10>
 80047fc:	07f8      	lsls	r0, r7, #31
 80047fe:	d516      	bpl.n	800482e <_vfprintf_r+0xd3e>
 8004800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004802:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004804:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004806:	6031      	str	r1, [r6, #0]
 8004808:	4413      	add	r3, r2
 800480a:	9323      	str	r3, [sp, #140]	; 0x8c
 800480c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800480e:	6072      	str	r2, [r6, #4]
 8004810:	3301      	adds	r3, #1
 8004812:	2b07      	cmp	r3, #7
 8004814:	9322      	str	r3, [sp, #136]	; 0x88
 8004816:	dc01      	bgt.n	800481c <_vfprintf_r+0xd2c>
 8004818:	3608      	adds	r6, #8
 800481a:	e008      	b.n	800482e <_vfprintf_r+0xd3e>
 800481c:	4650      	mov	r0, sl
 800481e:	4649      	mov	r1, r9
 8004820:	aa21      	add	r2, sp, #132	; 0x84
 8004822:	f002 fc4b 	bl	80070bc <__sprint_r>
 8004826:	2800      	cmp	r0, #0
 8004828:	f040 8129 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 800482c:	ae2e      	add	r6, sp, #184	; 0xb8
 800482e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004830:	9805      	ldr	r0, [sp, #20]
 8004832:	1b2d      	subs	r5, r5, r4
 8004834:	1ac3      	subs	r3, r0, r3
 8004836:	429d      	cmp	r5, r3
 8004838:	bfa8      	it	ge
 800483a:	461d      	movge	r5, r3
 800483c:	2d00      	cmp	r5, #0
 800483e:	dd14      	ble.n	800486a <_vfprintf_r+0xd7a>
 8004840:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004842:	442b      	add	r3, r5
 8004844:	9323      	str	r3, [sp, #140]	; 0x8c
 8004846:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004848:	3301      	adds	r3, #1
 800484a:	2b07      	cmp	r3, #7
 800484c:	e886 0030 	stmia.w	r6, {r4, r5}
 8004850:	9322      	str	r3, [sp, #136]	; 0x88
 8004852:	dc01      	bgt.n	8004858 <_vfprintf_r+0xd68>
 8004854:	3608      	adds	r6, #8
 8004856:	e008      	b.n	800486a <_vfprintf_r+0xd7a>
 8004858:	4650      	mov	r0, sl
 800485a:	4649      	mov	r1, r9
 800485c:	aa21      	add	r2, sp, #132	; 0x84
 800485e:	f002 fc2d 	bl	80070bc <__sprint_r>
 8004862:	2800      	cmp	r0, #0
 8004864:	f040 810b 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004868:	ae2e      	add	r6, sp, #184	; 0xb8
 800486a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800486c:	9c05      	ldr	r4, [sp, #20]
 800486e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8004872:	1ae3      	subs	r3, r4, r3
 8004874:	1b5d      	subs	r5, r3, r5
 8004876:	2d00      	cmp	r5, #0
 8004878:	f340 80b0 	ble.w	80049dc <_vfprintf_r+0xeec>
 800487c:	4b5e      	ldr	r3, [pc, #376]	; (80049f8 <_vfprintf_r+0xf08>)
 800487e:	6033      	str	r3, [r6, #0]
 8004880:	2d10      	cmp	r5, #16
 8004882:	dd16      	ble.n	80048b2 <_vfprintf_r+0xdc2>
 8004884:	2310      	movs	r3, #16
 8004886:	6073      	str	r3, [r6, #4]
 8004888:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800488a:	3310      	adds	r3, #16
 800488c:	9323      	str	r3, [sp, #140]	; 0x8c
 800488e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004890:	3301      	adds	r3, #1
 8004892:	2b07      	cmp	r3, #7
 8004894:	9322      	str	r3, [sp, #136]	; 0x88
 8004896:	dc01      	bgt.n	800489c <_vfprintf_r+0xdac>
 8004898:	3608      	adds	r6, #8
 800489a:	e008      	b.n	80048ae <_vfprintf_r+0xdbe>
 800489c:	4650      	mov	r0, sl
 800489e:	4649      	mov	r1, r9
 80048a0:	aa21      	add	r2, sp, #132	; 0x84
 80048a2:	f002 fc0b 	bl	80070bc <__sprint_r>
 80048a6:	2800      	cmp	r0, #0
 80048a8:	f040 80e9 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80048ac:	ae2e      	add	r6, sp, #184	; 0xb8
 80048ae:	3d10      	subs	r5, #16
 80048b0:	e7e4      	b.n	800487c <_vfprintf_r+0xd8c>
 80048b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048b4:	6075      	str	r5, [r6, #4]
 80048b6:	441d      	add	r5, r3
 80048b8:	9523      	str	r5, [sp, #140]	; 0x8c
 80048ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048bc:	3301      	adds	r3, #1
 80048be:	2b07      	cmp	r3, #7
 80048c0:	9322      	str	r3, [sp, #136]	; 0x88
 80048c2:	f340 808a 	ble.w	80049da <_vfprintf_r+0xeea>
 80048c6:	4650      	mov	r0, sl
 80048c8:	4649      	mov	r1, r9
 80048ca:	aa21      	add	r2, sp, #132	; 0x84
 80048cc:	f002 fbf6 	bl	80070bc <__sprint_r>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f040 80d4 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 80048d6:	ae2e      	add	r6, sp, #184	; 0xb8
 80048d8:	e080      	b.n	80049dc <_vfprintf_r+0xeec>
 80048da:	9d05      	ldr	r5, [sp, #20]
 80048dc:	2d01      	cmp	r5, #1
 80048de:	dc01      	bgt.n	80048e4 <_vfprintf_r+0xdf4>
 80048e0:	07f9      	lsls	r1, r7, #31
 80048e2:	d56d      	bpl.n	80049c0 <_vfprintf_r+0xed0>
 80048e4:	2301      	movs	r3, #1
 80048e6:	6073      	str	r3, [r6, #4]
 80048e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80048ea:	9c03      	ldr	r4, [sp, #12]
 80048ec:	6034      	str	r4, [r6, #0]
 80048ee:	3301      	adds	r3, #1
 80048f0:	9323      	str	r3, [sp, #140]	; 0x8c
 80048f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048f4:	3301      	adds	r3, #1
 80048f6:	2b07      	cmp	r3, #7
 80048f8:	9322      	str	r3, [sp, #136]	; 0x88
 80048fa:	dc01      	bgt.n	8004900 <_vfprintf_r+0xe10>
 80048fc:	3608      	adds	r6, #8
 80048fe:	e008      	b.n	8004912 <_vfprintf_r+0xe22>
 8004900:	4650      	mov	r0, sl
 8004902:	4649      	mov	r1, r9
 8004904:	aa21      	add	r2, sp, #132	; 0x84
 8004906:	f002 fbd9 	bl	80070bc <__sprint_r>
 800490a:	2800      	cmp	r0, #0
 800490c:	f040 80b7 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 8004910:	ae2e      	add	r6, sp, #184	; 0xb8
 8004912:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004916:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004918:	6035      	str	r5, [r6, #0]
 800491a:	4423      	add	r3, r4
 800491c:	9323      	str	r3, [sp, #140]	; 0x8c
 800491e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004920:	6074      	str	r4, [r6, #4]
 8004922:	3301      	adds	r3, #1
 8004924:	2b07      	cmp	r3, #7
 8004926:	9322      	str	r3, [sp, #136]	; 0x88
 8004928:	dc01      	bgt.n	800492e <_vfprintf_r+0xe3e>
 800492a:	3608      	adds	r6, #8
 800492c:	e008      	b.n	8004940 <_vfprintf_r+0xe50>
 800492e:	4650      	mov	r0, sl
 8004930:	4649      	mov	r1, r9
 8004932:	aa21      	add	r2, sp, #132	; 0x84
 8004934:	f002 fbc2 	bl	80070bc <__sprint_r>
 8004938:	2800      	cmp	r0, #0
 800493a:	f040 80a0 	bne.w	8004a7e <_vfprintf_r+0xf8e>
 800493e:	ae2e      	add	r6, sp, #184	; 0xb8
 8004940:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004944:	2200      	movs	r2, #0
 8004946:	2300      	movs	r3, #0
 8004948:	f7fc f866 	bl	8000a18 <__aeabi_dcmpeq>
 800494c:	9d05      	ldr	r5, [sp, #20]
 800494e:	1e6c      	subs	r4, r5, #1
 8004950:	b940      	cbnz	r0, 8004964 <_vfprintf_r+0xe74>
 8004952:	9d03      	ldr	r5, [sp, #12]
 8004954:	1c6b      	adds	r3, r5, #1
 8004956:	e886 0018 	stmia.w	r6, {r3, r4}
 800495a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800495c:	9c05      	ldr	r4, [sp, #20]
 800495e:	3b01      	subs	r3, #1
 8004960:	4423      	add	r3, r4
 8004962:	e033      	b.n	80049cc <_vfprintf_r+0xedc>
 8004964:	2c00      	cmp	r4, #0
 8004966:	dd34      	ble.n	80049d2 <_vfprintf_r+0xee2>
 8004968:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <_vfprintf_r+0xf08>)
 800496a:	6033      	str	r3, [r6, #0]
 800496c:	2c10      	cmp	r4, #16
 800496e:	dd15      	ble.n	800499c <_vfprintf_r+0xeac>
 8004970:	2310      	movs	r3, #16
 8004972:	6073      	str	r3, [r6, #4]
 8004974:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004976:	3310      	adds	r3, #16
 8004978:	9323      	str	r3, [sp, #140]	; 0x8c
 800497a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800497c:	3301      	adds	r3, #1
 800497e:	2b07      	cmp	r3, #7
 8004980:	9322      	str	r3, [sp, #136]	; 0x88
 8004982:	dc01      	bgt.n	8004988 <_vfprintf_r+0xe98>
 8004984:	3608      	adds	r6, #8
 8004986:	e007      	b.n	8004998 <_vfprintf_r+0xea8>
 8004988:	4650      	mov	r0, sl
 800498a:	4649      	mov	r1, r9
 800498c:	aa21      	add	r2, sp, #132	; 0x84
 800498e:	f002 fb95 	bl	80070bc <__sprint_r>
 8004992:	2800      	cmp	r0, #0
 8004994:	d173      	bne.n	8004a7e <_vfprintf_r+0xf8e>
 8004996:	ae2e      	add	r6, sp, #184	; 0xb8
 8004998:	3c10      	subs	r4, #16
 800499a:	e7e5      	b.n	8004968 <_vfprintf_r+0xe78>
 800499c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800499e:	6074      	str	r4, [r6, #4]
 80049a0:	441c      	add	r4, r3
 80049a2:	9423      	str	r4, [sp, #140]	; 0x8c
 80049a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049a6:	3301      	adds	r3, #1
 80049a8:	2b07      	cmp	r3, #7
 80049aa:	9322      	str	r3, [sp, #136]	; 0x88
 80049ac:	dd10      	ble.n	80049d0 <_vfprintf_r+0xee0>
 80049ae:	4650      	mov	r0, sl
 80049b0:	4649      	mov	r1, r9
 80049b2:	aa21      	add	r2, sp, #132	; 0x84
 80049b4:	f002 fb82 	bl	80070bc <__sprint_r>
 80049b8:	2800      	cmp	r0, #0
 80049ba:	d160      	bne.n	8004a7e <_vfprintf_r+0xf8e>
 80049bc:	ae2e      	add	r6, sp, #184	; 0xb8
 80049be:	e008      	b.n	80049d2 <_vfprintf_r+0xee2>
 80049c0:	2301      	movs	r3, #1
 80049c2:	6073      	str	r3, [r6, #4]
 80049c4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049c6:	9d03      	ldr	r5, [sp, #12]
 80049c8:	6035      	str	r5, [r6, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	9323      	str	r3, [sp, #140]	; 0x8c
 80049ce:	e7e9      	b.n	80049a4 <_vfprintf_r+0xeb4>
 80049d0:	3608      	adds	r6, #8
 80049d2:	ab1d      	add	r3, sp, #116	; 0x74
 80049d4:	6033      	str	r3, [r6, #0]
 80049d6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80049d8:	e6ac      	b.n	8004734 <_vfprintf_r+0xc44>
 80049da:	3608      	adds	r6, #8
 80049dc:	077a      	lsls	r2, r7, #29
 80049de:	d40d      	bmi.n	80049fc <_vfprintf_r+0xf0c>
 80049e0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80049e2:	9806      	ldr	r0, [sp, #24]
 80049e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80049e6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80049e8:	42a0      	cmp	r0, r4
 80049ea:	bfac      	ite	ge
 80049ec:	182d      	addge	r5, r5, r0
 80049ee:	192d      	addlt	r5, r5, r4
 80049f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d037      	beq.n	8004a66 <_vfprintf_r+0xf76>
 80049f6:	e030      	b.n	8004a5a <_vfprintf_r+0xf6a>
 80049f8:	08007723 	.word	0x08007723
 80049fc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80049fe:	9806      	ldr	r0, [sp, #24]
 8004a00:	1a2c      	subs	r4, r5, r0
 8004a02:	2c00      	cmp	r4, #0
 8004a04:	ddec      	ble.n	80049e0 <_vfprintf_r+0xef0>
 8004a06:	4b22      	ldr	r3, [pc, #136]	; (8004a90 <_vfprintf_r+0xfa0>)
 8004a08:	6033      	str	r3, [r6, #0]
 8004a0a:	2c10      	cmp	r4, #16
 8004a0c:	dd14      	ble.n	8004a38 <_vfprintf_r+0xf48>
 8004a0e:	2310      	movs	r3, #16
 8004a10:	6073      	str	r3, [r6, #4]
 8004a12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a14:	3310      	adds	r3, #16
 8004a16:	9323      	str	r3, [sp, #140]	; 0x8c
 8004a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	2b07      	cmp	r3, #7
 8004a1e:	9322      	str	r3, [sp, #136]	; 0x88
 8004a20:	dc01      	bgt.n	8004a26 <_vfprintf_r+0xf36>
 8004a22:	3608      	adds	r6, #8
 8004a24:	e006      	b.n	8004a34 <_vfprintf_r+0xf44>
 8004a26:	4650      	mov	r0, sl
 8004a28:	4649      	mov	r1, r9
 8004a2a:	aa21      	add	r2, sp, #132	; 0x84
 8004a2c:	f002 fb46 	bl	80070bc <__sprint_r>
 8004a30:	bb28      	cbnz	r0, 8004a7e <_vfprintf_r+0xf8e>
 8004a32:	ae2e      	add	r6, sp, #184	; 0xb8
 8004a34:	3c10      	subs	r4, #16
 8004a36:	e7e6      	b.n	8004a06 <_vfprintf_r+0xf16>
 8004a38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a3a:	6074      	str	r4, [r6, #4]
 8004a3c:	441c      	add	r4, r3
 8004a3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a40:	9423      	str	r4, [sp, #140]	; 0x8c
 8004a42:	3301      	adds	r3, #1
 8004a44:	2b07      	cmp	r3, #7
 8004a46:	9322      	str	r3, [sp, #136]	; 0x88
 8004a48:	ddca      	ble.n	80049e0 <_vfprintf_r+0xef0>
 8004a4a:	4650      	mov	r0, sl
 8004a4c:	4649      	mov	r1, r9
 8004a4e:	aa21      	add	r2, sp, #132	; 0x84
 8004a50:	f002 fb34 	bl	80070bc <__sprint_r>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d0c3      	beq.n	80049e0 <_vfprintf_r+0xef0>
 8004a58:	e011      	b.n	8004a7e <_vfprintf_r+0xf8e>
 8004a5a:	4650      	mov	r0, sl
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	aa21      	add	r2, sp, #132	; 0x84
 8004a60:	f002 fb2c 	bl	80070bc <__sprint_r>
 8004a64:	b958      	cbnz	r0, 8004a7e <_vfprintf_r+0xf8e>
 8004a66:	2300      	movs	r3, #0
 8004a68:	9322      	str	r3, [sp, #136]	; 0x88
 8004a6a:	ae2e      	add	r6, sp, #184	; 0xb8
 8004a6c:	f7ff b8a8 	b.w	8003bc0 <_vfprintf_r+0xd0>
 8004a70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a72:	b123      	cbz	r3, 8004a7e <_vfprintf_r+0xf8e>
 8004a74:	4650      	mov	r0, sl
 8004a76:	4649      	mov	r1, r9
 8004a78:	aa21      	add	r2, sp, #132	; 0x84
 8004a7a:	f002 fb1f 	bl	80070bc <__sprint_r>
 8004a7e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8004a82:	065b      	lsls	r3, r3, #25
 8004a84:	f53f a87f 	bmi.w	8003b86 <_vfprintf_r+0x96>
 8004a88:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004a8a:	b03f      	add	sp, #252	; 0xfc
 8004a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a90:	080076df 	.word	0x080076df
 8004a94:	f3af 8000 	nop.w

08004a98 <__sbprintf>:
 8004a98:	b570      	push	{r4, r5, r6, lr}
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	8989      	ldrh	r1, [r1, #12]
 8004a9e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8004aa2:	f021 0102 	bic.w	r1, r1, #2
 8004aa6:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004aaa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004aac:	9119      	str	r1, [sp, #100]	; 0x64
 8004aae:	89e1      	ldrh	r1, [r4, #14]
 8004ab0:	f8ad 100e 	strh.w	r1, [sp, #14]
 8004ab4:	6a21      	ldr	r1, [r4, #32]
 8004ab6:	9108      	str	r1, [sp, #32]
 8004ab8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004aba:	910a      	str	r1, [sp, #40]	; 0x28
 8004abc:	a91a      	add	r1, sp, #104	; 0x68
 8004abe:	9100      	str	r1, [sp, #0]
 8004ac0:	9104      	str	r1, [sp, #16]
 8004ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ac6:	9102      	str	r1, [sp, #8]
 8004ac8:	9105      	str	r1, [sp, #20]
 8004aca:	2100      	movs	r1, #0
 8004acc:	9106      	str	r1, [sp, #24]
 8004ace:	4669      	mov	r1, sp
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	f7ff f80d 	bl	8003af0 <_vfprintf_r>
 8004ad6:	1e05      	subs	r5, r0, #0
 8004ad8:	db07      	blt.n	8004aea <__sbprintf+0x52>
 8004ada:	4630      	mov	r0, r6
 8004adc:	4669      	mov	r1, sp
 8004ade:	f000 ff53 	bl	8005988 <_fflush_r>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	bf18      	it	ne
 8004ae6:	f04f 35ff 	movne.w	r5, #4294967295
 8004aea:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004aee:	065b      	lsls	r3, r3, #25
 8004af0:	d503      	bpl.n	8004afa <__sbprintf+0x62>
 8004af2:	89a3      	ldrh	r3, [r4, #12]
 8004af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af8:	81a3      	strh	r3, [r4, #12]
 8004afa:	4628      	mov	r0, r5
 8004afc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b04 <__swsetup_r>:
 8004b04:	4b32      	ldr	r3, [pc, #200]	; (8004bd0 <__swsetup_r+0xcc>)
 8004b06:	b570      	push	{r4, r5, r6, lr}
 8004b08:	681d      	ldr	r5, [r3, #0]
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	b125      	cbz	r5, 8004b1a <__swsetup_r+0x16>
 8004b10:	69ab      	ldr	r3, [r5, #24]
 8004b12:	b913      	cbnz	r3, 8004b1a <__swsetup_r+0x16>
 8004b14:	4628      	mov	r0, r5
 8004b16:	f000 ff7d 	bl	8005a14 <__sinit>
 8004b1a:	4b2e      	ldr	r3, [pc, #184]	; (8004bd4 <__swsetup_r+0xd0>)
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d101      	bne.n	8004b24 <__swsetup_r+0x20>
 8004b20:	686c      	ldr	r4, [r5, #4]
 8004b22:	e008      	b.n	8004b36 <__swsetup_r+0x32>
 8004b24:	4b2c      	ldr	r3, [pc, #176]	; (8004bd8 <__swsetup_r+0xd4>)
 8004b26:	429c      	cmp	r4, r3
 8004b28:	d101      	bne.n	8004b2e <__swsetup_r+0x2a>
 8004b2a:	68ac      	ldr	r4, [r5, #8]
 8004b2c:	e003      	b.n	8004b36 <__swsetup_r+0x32>
 8004b2e:	4b2b      	ldr	r3, [pc, #172]	; (8004bdc <__swsetup_r+0xd8>)
 8004b30:	429c      	cmp	r4, r3
 8004b32:	bf08      	it	eq
 8004b34:	68ec      	ldreq	r4, [r5, #12]
 8004b36:	89a2      	ldrh	r2, [r4, #12]
 8004b38:	b293      	uxth	r3, r2
 8004b3a:	0719      	lsls	r1, r3, #28
 8004b3c:	d420      	bmi.n	8004b80 <__swsetup_r+0x7c>
 8004b3e:	06dd      	lsls	r5, r3, #27
 8004b40:	d405      	bmi.n	8004b4e <__swsetup_r+0x4a>
 8004b42:	2309      	movs	r3, #9
 8004b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b48:	6033      	str	r3, [r6, #0]
 8004b4a:	81a2      	strh	r2, [r4, #12]
 8004b4c:	e03b      	b.n	8004bc6 <__swsetup_r+0xc2>
 8004b4e:	0758      	lsls	r0, r3, #29
 8004b50:	d512      	bpl.n	8004b78 <__swsetup_r+0x74>
 8004b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b54:	b141      	cbz	r1, 8004b68 <__swsetup_r+0x64>
 8004b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b5a:	4299      	cmp	r1, r3
 8004b5c:	d002      	beq.n	8004b64 <__swsetup_r+0x60>
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f001 f86e 	bl	8005c40 <_free_r>
 8004b64:	2300      	movs	r3, #0
 8004b66:	6363      	str	r3, [r4, #52]	; 0x34
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b6e:	81a3      	strh	r3, [r4, #12]
 8004b70:	2300      	movs	r3, #0
 8004b72:	6063      	str	r3, [r4, #4]
 8004b74:	6923      	ldr	r3, [r4, #16]
 8004b76:	6023      	str	r3, [r4, #0]
 8004b78:	89a3      	ldrh	r3, [r4, #12]
 8004b7a:	f043 0308 	orr.w	r3, r3, #8
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	6923      	ldr	r3, [r4, #16]
 8004b82:	b94b      	cbnz	r3, 8004b98 <__swsetup_r+0x94>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b8e:	d003      	beq.n	8004b98 <__swsetup_r+0x94>
 8004b90:	4630      	mov	r0, r6
 8004b92:	4621      	mov	r1, r4
 8004b94:	f001 fa82 	bl	800609c <__smakebuf_r>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f013 0201 	ands.w	r2, r3, #1
 8004b9e:	d005      	beq.n	8004bac <__swsetup_r+0xa8>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60a2      	str	r2, [r4, #8]
 8004ba4:	6962      	ldr	r2, [r4, #20]
 8004ba6:	4252      	negs	r2, r2
 8004ba8:	61a2      	str	r2, [r4, #24]
 8004baa:	e003      	b.n	8004bb4 <__swsetup_r+0xb0>
 8004bac:	0799      	lsls	r1, r3, #30
 8004bae:	bf58      	it	pl
 8004bb0:	6962      	ldrpl	r2, [r4, #20]
 8004bb2:	60a2      	str	r2, [r4, #8]
 8004bb4:	6922      	ldr	r2, [r4, #16]
 8004bb6:	b94a      	cbnz	r2, 8004bcc <__swsetup_r+0xc8>
 8004bb8:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004bbc:	b280      	uxth	r0, r0
 8004bbe:	b130      	cbz	r0, 8004bce <__swsetup_r+0xca>
 8004bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bc4:	81a3      	strh	r3, [r4, #12]
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bca:	bd70      	pop	{r4, r5, r6, pc}
 8004bcc:	2000      	movs	r0, #0
 8004bce:	bd70      	pop	{r4, r5, r6, pc}
 8004bd0:	20000100 	.word	0x20000100
 8004bd4:	08007740 	.word	0x08007740
 8004bd8:	08007760 	.word	0x08007760
 8004bdc:	08007780 	.word	0x08007780

08004be0 <quorem>:
 8004be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	6903      	ldr	r3, [r0, #16]
 8004be6:	690c      	ldr	r4, [r1, #16]
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	4680      	mov	r8, r0
 8004bec:	f2c0 8081 	blt.w	8004cf2 <quorem+0x112>
 8004bf0:	3c01      	subs	r4, #1
 8004bf2:	f101 0714 	add.w	r7, r1, #20
 8004bf6:	00a2      	lsls	r2, r4, #2
 8004bf8:	f100 0514 	add.w	r5, r0, #20
 8004bfc:	4691      	mov	r9, r2
 8004bfe:	9200      	str	r2, [sp, #0]
 8004c00:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 8004c04:	442a      	add	r2, r5
 8004c06:	9201      	str	r2, [sp, #4]
 8004c08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c0c:	3601      	adds	r6, #1
 8004c0e:	fbb2 f6f6 	udiv	r6, r2, r6
 8004c12:	44b9      	add	r9, r7
 8004c14:	2e00      	cmp	r6, #0
 8004c16:	d03a      	beq.n	8004c8e <quorem+0xae>
 8004c18:	f04f 0e00 	mov.w	lr, #0
 8004c1c:	463a      	mov	r2, r7
 8004c1e:	4628      	mov	r0, r5
 8004c20:	46f3      	mov	fp, lr
 8004c22:	f852 cb04 	ldr.w	ip, [r2], #4
 8004c26:	6803      	ldr	r3, [r0, #0]
 8004c28:	fa1f fa8c 	uxth.w	sl, ip
 8004c2c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004c30:	fb0a ea06 	mla	sl, sl, r6, lr
 8004c34:	fb0c fc06 	mul.w	ip, ip, r6
 8004c38:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
 8004c3c:	fa1f fa8a 	uxth.w	sl, sl
 8004c40:	ebca 0a0b 	rsb	sl, sl, fp
 8004c44:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004c48:	fa1f fc8c 	uxth.w	ip, ip
 8004c4c:	fa1a fa83 	uxtah	sl, sl, r3
 8004c50:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
 8004c54:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
 8004c58:	fa1f fa8a 	uxth.w	sl, sl
 8004c5c:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
 8004c60:	454a      	cmp	r2, r9
 8004c62:	ea4f 4b2c 	mov.w	fp, ip, asr #16
 8004c66:	f840 ab04 	str.w	sl, [r0], #4
 8004c6a:	d9da      	bls.n	8004c22 <quorem+0x42>
 8004c6c:	9a00      	ldr	r2, [sp, #0]
 8004c6e:	58ab      	ldr	r3, [r5, r2]
 8004c70:	b96b      	cbnz	r3, 8004c8e <quorem+0xae>
 8004c72:	9a01      	ldr	r2, [sp, #4]
 8004c74:	1f13      	subs	r3, r2, #4
 8004c76:	42ab      	cmp	r3, r5
 8004c78:	461a      	mov	r2, r3
 8004c7a:	d802      	bhi.n	8004c82 <quorem+0xa2>
 8004c7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c80:	e005      	b.n	8004c8e <quorem+0xae>
 8004c82:	6812      	ldr	r2, [r2, #0]
 8004c84:	3b04      	subs	r3, #4
 8004c86:	2a00      	cmp	r2, #0
 8004c88:	d1f8      	bne.n	8004c7c <quorem+0x9c>
 8004c8a:	3c01      	subs	r4, #1
 8004c8c:	e7f3      	b.n	8004c76 <quorem+0x96>
 8004c8e:	4640      	mov	r0, r8
 8004c90:	f001 fec3 	bl	8006a1a <__mcmp>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	db2a      	blt.n	8004cee <quorem+0x10e>
 8004c98:	3601      	adds	r6, #1
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	f857 cb04 	ldr.w	ip, [r7], #4
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	fa1f f18c 	uxth.w	r1, ip
 8004ca8:	1a41      	subs	r1, r0, r1
 8004caa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004cae:	fa11 f182 	uxtah	r1, r1, r2
 8004cb2:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
 8004cb6:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004cba:	b289      	uxth	r1, r1
 8004cbc:	1410      	asrs	r0, r2, #16
 8004cbe:	454f      	cmp	r7, r9
 8004cc0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8004cc4:	f843 2b04 	str.w	r2, [r3], #4
 8004cc8:	d9e9      	bls.n	8004c9e <quorem+0xbe>
 8004cca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cd2:	b962      	cbnz	r2, 8004cee <quorem+0x10e>
 8004cd4:	3b04      	subs	r3, #4
 8004cd6:	42ab      	cmp	r3, r5
 8004cd8:	461a      	mov	r2, r3
 8004cda:	d802      	bhi.n	8004ce2 <quorem+0x102>
 8004cdc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004ce0:	e005      	b.n	8004cee <quorem+0x10e>
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	3b04      	subs	r3, #4
 8004ce6:	2a00      	cmp	r2, #0
 8004ce8:	d1f8      	bne.n	8004cdc <quorem+0xfc>
 8004cea:	3c01      	subs	r4, #1
 8004cec:	e7f3      	b.n	8004cd6 <quorem+0xf6>
 8004cee:	4630      	mov	r0, r6
 8004cf0:	e000      	b.n	8004cf4 <quorem+0x114>
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	b003      	add	sp, #12
 8004cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfa:	0000      	movs	r0, r0
 8004cfc:	0000      	movs	r0, r0
	...

08004d00 <_dtoa_r>:
 8004d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d04:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d06:	b09b      	sub	sp, #108	; 0x6c
 8004d08:	4682      	mov	sl, r0
 8004d0a:	910d      	str	r1, [sp, #52]	; 0x34
 8004d0c:	920e      	str	r2, [sp, #56]	; 0x38
 8004d0e:	9314      	str	r3, [sp, #80]	; 0x50
 8004d10:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8004d12:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004d16:	b945      	cbnz	r5, 8004d2a <_dtoa_r+0x2a>
 8004d18:	2010      	movs	r0, #16
 8004d1a:	f001 fa23 	bl	8006164 <malloc>
 8004d1e:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8004d22:	6045      	str	r5, [r0, #4]
 8004d24:	6085      	str	r5, [r0, #8]
 8004d26:	6005      	str	r5, [r0, #0]
 8004d28:	60c5      	str	r5, [r0, #12]
 8004d2a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004d2e:	6819      	ldr	r1, [r3, #0]
 8004d30:	b161      	cbz	r1, 8004d4c <_dtoa_r+0x4c>
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	604b      	str	r3, [r1, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	608b      	str	r3, [r1, #8]
 8004d3e:	4650      	mov	r0, sl
 8004d40:	f001 fc8b 	bl	800665a <_Bfree>
 8004d44:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	9903      	ldr	r1, [sp, #12]
 8004d4e:	2900      	cmp	r1, #0
 8004d50:	da05      	bge.n	8004d5e <_dtoa_r+0x5e>
 8004d52:	2301      	movs	r3, #1
 8004d54:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	9203      	str	r2, [sp, #12]
 8004d5c:	e001      	b.n	8004d62 <_dtoa_r+0x62>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	9c03      	ldr	r4, [sp, #12]
 8004d64:	4a9a      	ldr	r2, [pc, #616]	; (8004fd0 <_dtoa_r+0x2d0>)
 8004d66:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	051b      	lsls	r3, r3, #20
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d11d      	bne.n	8004dae <_dtoa_r+0xae>
 8004d72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004d74:	9902      	ldr	r1, [sp, #8]
 8004d76:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d7a:	603b      	str	r3, [r7, #0]
 8004d7c:	b941      	cbnz	r1, 8004d90 <_dtoa_r+0x90>
 8004d7e:	4b95      	ldr	r3, [pc, #596]	; (8004fd4 <_dtoa_r+0x2d4>)
 8004d80:	4a95      	ldr	r2, [pc, #596]	; (8004fd8 <_dtoa_r+0x2d8>)
 8004d82:	f3c4 0013 	ubfx	r0, r4, #0, #20
 8004d86:	2800      	cmp	r0, #0
 8004d88:	bf0c      	ite	eq
 8004d8a:	4610      	moveq	r0, r2
 8004d8c:	4618      	movne	r0, r3
 8004d8e:	e000      	b.n	8004d92 <_dtoa_r+0x92>
 8004d90:	4890      	ldr	r0, [pc, #576]	; (8004fd4 <_dtoa_r+0x2d4>)
 8004d92:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004d94:	2f00      	cmp	r7, #0
 8004d96:	f000 8565 	beq.w	8005864 <_dtoa_r+0xb64>
 8004d9a:	78c3      	ldrb	r3, [r0, #3]
 8004d9c:	b113      	cbz	r3, 8004da4 <_dtoa_r+0xa4>
 8004d9e:	f100 0308 	add.w	r3, r0, #8
 8004da2:	e000      	b.n	8004da6 <_dtoa_r+0xa6>
 8004da4:	1cc3      	adds	r3, r0, #3
 8004da6:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004da8:	603b      	str	r3, [r7, #0]
 8004daa:	f000 bd5b 	b.w	8005864 <_dtoa_r+0xb64>
 8004dae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	4640      	mov	r0, r8
 8004db6:	4649      	mov	r1, r9
 8004db8:	2300      	movs	r3, #0
 8004dba:	f7fb fe2d 	bl	8000a18 <__aeabi_dcmpeq>
 8004dbe:	4605      	mov	r5, r0
 8004dc0:	b158      	cbz	r0, 8004dda <_dtoa_r+0xda>
 8004dc2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004dca:	2f00      	cmp	r7, #0
 8004dcc:	f000 8547 	beq.w	800585e <_dtoa_r+0xb5e>
 8004dd0:	4882      	ldr	r0, [pc, #520]	; (8004fdc <_dtoa_r+0x2dc>)
 8004dd2:	6038      	str	r0, [r7, #0]
 8004dd4:	3801      	subs	r0, #1
 8004dd6:	f000 bd45 	b.w	8005864 <_dtoa_r+0xb64>
 8004dda:	4650      	mov	r0, sl
 8004ddc:	ec49 8b10 	vmov	d0, r8, r9
 8004de0:	a919      	add	r1, sp, #100	; 0x64
 8004de2:	aa18      	add	r2, sp, #96	; 0x60
 8004de4:	f001 fe94 	bl	8006b10 <__d2b>
 8004de8:	f3c4 560a 	ubfx	r6, r4, #20, #11
 8004dec:	4683      	mov	fp, r0
 8004dee:	b156      	cbz	r6, 8004e06 <_dtoa_r+0x106>
 8004df0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004df4:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004df8:	4640      	mov	r0, r8
 8004dfa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004dfe:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8004e02:	9515      	str	r5, [sp, #84]	; 0x54
 8004e04:	e01c      	b.n	8004e40 <_dtoa_r+0x140>
 8004e06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004e08:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8004e0a:	441e      	add	r6, r3
 8004e0c:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004e10:	429e      	cmp	r6, r3
 8004e12:	db09      	blt.n	8004e28 <_dtoa_r+0x128>
 8004e14:	9902      	ldr	r1, [sp, #8]
 8004e16:	331f      	adds	r3, #31
 8004e18:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8004e1c:	1b9b      	subs	r3, r3, r6
 8004e1e:	fa21 f000 	lsr.w	r0, r1, r0
 8004e22:	409c      	lsls	r4, r3
 8004e24:	4320      	orrs	r0, r4
 8004e26:	e004      	b.n	8004e32 <_dtoa_r+0x132>
 8004e28:	486d      	ldr	r0, [pc, #436]	; (8004fe0 <_dtoa_r+0x2e0>)
 8004e2a:	9a02      	ldr	r2, [sp, #8]
 8004e2c:	1b80      	subs	r0, r0, r6
 8004e2e:	fa02 f000 	lsl.w	r0, r2, r0
 8004e32:	f7fb fb13 	bl	800045c <__aeabi_ui2d>
 8004e36:	2701      	movs	r7, #1
 8004e38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e3c:	3e01      	subs	r6, #1
 8004e3e:	9715      	str	r7, [sp, #84]	; 0x54
 8004e40:	2200      	movs	r2, #0
 8004e42:	4b68      	ldr	r3, [pc, #416]	; (8004fe4 <_dtoa_r+0x2e4>)
 8004e44:	f7fb f9cc 	bl	80001e0 <__aeabi_dsub>
 8004e48:	a35b      	add	r3, pc, #364	; (adr r3, 8004fb8 <_dtoa_r+0x2b8>)
 8004e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4e:	f7fb fb7b 	bl	8000548 <__aeabi_dmul>
 8004e52:	a35b      	add	r3, pc, #364	; (adr r3, 8004fc0 <_dtoa_r+0x2c0>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f7fb f9c4 	bl	80001e4 <__adddf3>
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	4630      	mov	r0, r6
 8004e60:	460d      	mov	r5, r1
 8004e62:	f7fb fb0b 	bl	800047c <__aeabi_i2d>
 8004e66:	a358      	add	r3, pc, #352	; (adr r3, 8004fc8 <_dtoa_r+0x2c8>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb fb6c 	bl	8000548 <__aeabi_dmul>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4620      	mov	r0, r4
 8004e76:	4629      	mov	r1, r5
 8004e78:	f7fb f9b4 	bl	80001e4 <__adddf3>
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	460d      	mov	r5, r1
 8004e80:	f7fb fdfc 	bl	8000a7c <__aeabi_d2iz>
 8004e84:	4629      	mov	r1, r5
 8004e86:	4681      	mov	r9, r0
 8004e88:	2200      	movs	r2, #0
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f7fb fdcd 	bl	8000a2c <__aeabi_dcmplt>
 8004e92:	b158      	cbz	r0, 8004eac <_dtoa_r+0x1ac>
 8004e94:	4648      	mov	r0, r9
 8004e96:	f7fb faf1 	bl	800047c <__aeabi_i2d>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb fdb9 	bl	8000a18 <__aeabi_dcmpeq>
 8004ea6:	b908      	cbnz	r0, 8004eac <_dtoa_r+0x1ac>
 8004ea8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004eac:	f1b9 0f16 	cmp.w	r9, #22
 8004eb0:	d80d      	bhi.n	8004ece <_dtoa_r+0x1ce>
 8004eb2:	4b4d      	ldr	r3, [pc, #308]	; (8004fe8 <_dtoa_r+0x2e8>)
 8004eb4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004eb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ec0:	f7fb fdd2 	bl	8000a68 <__aeabi_dcmpgt>
 8004ec4:	b130      	cbz	r0, 8004ed4 <_dtoa_r+0x1d4>
 8004ec6:	f109 39ff 	add.w	r9, r9, #4294967295
 8004eca:	2700      	movs	r7, #0
 8004ecc:	e000      	b.n	8004ed0 <_dtoa_r+0x1d0>
 8004ece:	2701      	movs	r7, #1
 8004ed0:	9711      	str	r7, [sp, #68]	; 0x44
 8004ed2:	e000      	b.n	8004ed6 <_dtoa_r+0x1d6>
 8004ed4:	9011      	str	r0, [sp, #68]	; 0x44
 8004ed6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004ed8:	1b9e      	subs	r6, r3, r6
 8004eda:	3e01      	subs	r6, #1
 8004edc:	9606      	str	r6, [sp, #24]
 8004ede:	d504      	bpl.n	8004eea <_dtoa_r+0x1ea>
 8004ee0:	4277      	negs	r7, r6
 8004ee2:	9705      	str	r7, [sp, #20]
 8004ee4:	2700      	movs	r7, #0
 8004ee6:	9706      	str	r7, [sp, #24]
 8004ee8:	e001      	b.n	8004eee <_dtoa_r+0x1ee>
 8004eea:	2700      	movs	r7, #0
 8004eec:	9705      	str	r7, [sp, #20]
 8004eee:	f1b9 0f00 	cmp.w	r9, #0
 8004ef2:	db07      	blt.n	8004f04 <_dtoa_r+0x204>
 8004ef4:	9f06      	ldr	r7, [sp, #24]
 8004ef6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8004efa:	444f      	add	r7, r9
 8004efc:	9706      	str	r7, [sp, #24]
 8004efe:	2700      	movs	r7, #0
 8004f00:	970b      	str	r7, [sp, #44]	; 0x2c
 8004f02:	e008      	b.n	8004f16 <_dtoa_r+0x216>
 8004f04:	9f05      	ldr	r7, [sp, #20]
 8004f06:	ebc9 0707 	rsb	r7, r9, r7
 8004f0a:	9705      	str	r7, [sp, #20]
 8004f0c:	f1c9 0700 	rsb	r7, r9, #0
 8004f10:	970b      	str	r7, [sp, #44]	; 0x2c
 8004f12:	2700      	movs	r7, #0
 8004f14:	9710      	str	r7, [sp, #64]	; 0x40
 8004f16:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004f18:	2f09      	cmp	r7, #9
 8004f1a:	d828      	bhi.n	8004f6e <_dtoa_r+0x26e>
 8004f1c:	2f05      	cmp	r7, #5
 8004f1e:	bfc4      	itt	gt
 8004f20:	3f04      	subgt	r7, #4
 8004f22:	970d      	strgt	r7, [sp, #52]	; 0x34
 8004f24:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004f26:	f1a7 0302 	sub.w	r3, r7, #2
 8004f2a:	bfcc      	ite	gt
 8004f2c:	2500      	movgt	r5, #0
 8004f2e:	2501      	movle	r5, #1
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d821      	bhi.n	8004f78 <_dtoa_r+0x278>
 8004f34:	e8df f003 	tbb	[pc, r3]
 8004f38:	04020f06 	.word	0x04020f06
 8004f3c:	2701      	movs	r7, #1
 8004f3e:	e002      	b.n	8004f46 <_dtoa_r+0x246>
 8004f40:	2701      	movs	r7, #1
 8004f42:	e009      	b.n	8004f58 <_dtoa_r+0x258>
 8004f44:	2700      	movs	r7, #0
 8004f46:	970c      	str	r7, [sp, #48]	; 0x30
 8004f48:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004f4a:	2f00      	cmp	r7, #0
 8004f4c:	dd1e      	ble.n	8004f8c <_dtoa_r+0x28c>
 8004f4e:	970a      	str	r7, [sp, #40]	; 0x28
 8004f50:	9704      	str	r7, [sp, #16]
 8004f52:	463b      	mov	r3, r7
 8004f54:	e01f      	b.n	8004f96 <_dtoa_r+0x296>
 8004f56:	2700      	movs	r7, #0
 8004f58:	970c      	str	r7, [sp, #48]	; 0x30
 8004f5a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004f5c:	444f      	add	r7, r9
 8004f5e:	970a      	str	r7, [sp, #40]	; 0x28
 8004f60:	3701      	adds	r7, #1
 8004f62:	463b      	mov	r3, r7
 8004f64:	9704      	str	r7, [sp, #16]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	bfb8      	it	lt
 8004f6a:	2301      	movlt	r3, #1
 8004f6c:	e013      	b.n	8004f96 <_dtoa_r+0x296>
 8004f6e:	2501      	movs	r5, #1
 8004f70:	2700      	movs	r7, #0
 8004f72:	970d      	str	r7, [sp, #52]	; 0x34
 8004f74:	950c      	str	r5, [sp, #48]	; 0x30
 8004f76:	e001      	b.n	8004f7c <_dtoa_r+0x27c>
 8004f78:	2701      	movs	r7, #1
 8004f7a:	970c      	str	r7, [sp, #48]	; 0x30
 8004f7c:	f04f 37ff 	mov.w	r7, #4294967295
 8004f80:	970a      	str	r7, [sp, #40]	; 0x28
 8004f82:	9704      	str	r7, [sp, #16]
 8004f84:	2700      	movs	r7, #0
 8004f86:	2312      	movs	r3, #18
 8004f88:	970e      	str	r7, [sp, #56]	; 0x38
 8004f8a:	e004      	b.n	8004f96 <_dtoa_r+0x296>
 8004f8c:	2701      	movs	r7, #1
 8004f8e:	970a      	str	r7, [sp, #40]	; 0x28
 8004f90:	9704      	str	r7, [sp, #16]
 8004f92:	463b      	mov	r3, r7
 8004f94:	970e      	str	r7, [sp, #56]	; 0x38
 8004f96:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	6062      	str	r2, [r4, #4]
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	f101 0214 	add.w	r2, r1, #20
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d821      	bhi.n	8004fec <_dtoa_r+0x2ec>
 8004fa8:	6862      	ldr	r2, [r4, #4]
 8004faa:	3201      	adds	r2, #1
 8004fac:	6062      	str	r2, [r4, #4]
 8004fae:	0049      	lsls	r1, r1, #1
 8004fb0:	e7f6      	b.n	8004fa0 <_dtoa_r+0x2a0>
 8004fb2:	bf00      	nop
 8004fb4:	f3af 8000 	nop.w
 8004fb8:	636f4361 	.word	0x636f4361
 8004fbc:	3fd287a7 	.word	0x3fd287a7
 8004fc0:	8b60c8b3 	.word	0x8b60c8b3
 8004fc4:	3fc68a28 	.word	0x3fc68a28
 8004fc8:	509f79fb 	.word	0x509f79fb
 8004fcc:	3fd34413 	.word	0x3fd34413
 8004fd0:	7ff00000 	.word	0x7ff00000
 8004fd4:	0800773c 	.word	0x0800773c
 8004fd8:	08007733 	.word	0x08007733
 8004fdc:	08007722 	.word	0x08007722
 8004fe0:	fffffbee 	.word	0xfffffbee
 8004fe4:	3ff80000 	.word	0x3ff80000
 8004fe8:	080077b0 	.word	0x080077b0
 8004fec:	4650      	mov	r0, sl
 8004fee:	6861      	ldr	r1, [r4, #4]
 8004ff0:	f001 fafe 	bl	80065f0 <_Balloc>
 8004ff4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004ff8:	9f04      	ldr	r7, [sp, #16]
 8004ffa:	6020      	str	r0, [r4, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	9307      	str	r3, [sp, #28]
 8005000:	2f0e      	cmp	r7, #14
 8005002:	f200 8169 	bhi.w	80052d8 <_dtoa_r+0x5d8>
 8005006:	2d00      	cmp	r5, #0
 8005008:	f000 8166 	beq.w	80052d8 <_dtoa_r+0x5d8>
 800500c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005010:	f1b9 0f00 	cmp.w	r9, #0
 8005014:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8005018:	dd31      	ble.n	800507e <_dtoa_r+0x37e>
 800501a:	4a80      	ldr	r2, [pc, #512]	; (800521c <_dtoa_r+0x51c>)
 800501c:	f009 030f 	and.w	r3, r9, #15
 8005020:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005024:	ed93 7b00 	vldr	d7, [r3]
 8005028:	ea4f 1429 	mov.w	r4, r9, asr #4
 800502c:	06e0      	lsls	r0, r4, #27
 800502e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005032:	d50c      	bpl.n	800504e <_dtoa_r+0x34e>
 8005034:	4b7a      	ldr	r3, [pc, #488]	; (8005220 <_dtoa_r+0x520>)
 8005036:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800503a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800503e:	f7fb fbad 	bl	800079c <__aeabi_ddiv>
 8005042:	f004 040f 	and.w	r4, r4, #15
 8005046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800504a:	2703      	movs	r7, #3
 800504c:	e000      	b.n	8005050 <_dtoa_r+0x350>
 800504e:	2702      	movs	r7, #2
 8005050:	4d73      	ldr	r5, [pc, #460]	; (8005220 <_dtoa_r+0x520>)
 8005052:	b16c      	cbz	r4, 8005070 <_dtoa_r+0x370>
 8005054:	07e1      	lsls	r1, r4, #31
 8005056:	d508      	bpl.n	800506a <_dtoa_r+0x36a>
 8005058:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800505c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005060:	f7fb fa72 	bl	8000548 <__aeabi_dmul>
 8005064:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005068:	3701      	adds	r7, #1
 800506a:	1064      	asrs	r4, r4, #1
 800506c:	3508      	adds	r5, #8
 800506e:	e7f0      	b.n	8005052 <_dtoa_r+0x352>
 8005070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005074:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005078:	f7fb fb90 	bl	800079c <__aeabi_ddiv>
 800507c:	e01b      	b.n	80050b6 <_dtoa_r+0x3b6>
 800507e:	f1c9 0400 	rsb	r4, r9, #0
 8005082:	b1dc      	cbz	r4, 80050bc <_dtoa_r+0x3bc>
 8005084:	4b65      	ldr	r3, [pc, #404]	; (800521c <_dtoa_r+0x51c>)
 8005086:	4d66      	ldr	r5, [pc, #408]	; (8005220 <_dtoa_r+0x520>)
 8005088:	f004 020f 	and.w	r2, r4, #15
 800508c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005090:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb fa56 	bl	8000548 <__aeabi_dmul>
 800509c:	1124      	asrs	r4, r4, #4
 800509e:	2702      	movs	r7, #2
 80050a0:	b14c      	cbz	r4, 80050b6 <_dtoa_r+0x3b6>
 80050a2:	07e2      	lsls	r2, r4, #31
 80050a4:	d504      	bpl.n	80050b0 <_dtoa_r+0x3b0>
 80050a6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050aa:	3701      	adds	r7, #1
 80050ac:	f7fb fa4c 	bl	8000548 <__aeabi_dmul>
 80050b0:	1064      	asrs	r4, r4, #1
 80050b2:	3508      	adds	r5, #8
 80050b4:	e7f4      	b.n	80050a0 <_dtoa_r+0x3a0>
 80050b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ba:	e000      	b.n	80050be <_dtoa_r+0x3be>
 80050bc:	2702      	movs	r7, #2
 80050be:	9911      	ldr	r1, [sp, #68]	; 0x44
 80050c0:	b1e1      	cbz	r1, 80050fc <_dtoa_r+0x3fc>
 80050c2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050c6:	2200      	movs	r2, #0
 80050c8:	4620      	mov	r0, r4
 80050ca:	4629      	mov	r1, r5
 80050cc:	4b55      	ldr	r3, [pc, #340]	; (8005224 <_dtoa_r+0x524>)
 80050ce:	f7fb fcad 	bl	8000a2c <__aeabi_dcmplt>
 80050d2:	b1c0      	cbz	r0, 8005106 <_dtoa_r+0x406>
 80050d4:	9a04      	ldr	r2, [sp, #16]
 80050d6:	b1da      	cbz	r2, 8005110 <_dtoa_r+0x410>
 80050d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f340 80f8 	ble.w	80052d0 <_dtoa_r+0x5d0>
 80050e0:	f109 31ff 	add.w	r1, r9, #4294967295
 80050e4:	910f      	str	r1, [sp, #60]	; 0x3c
 80050e6:	2200      	movs	r2, #0
 80050e8:	4620      	mov	r0, r4
 80050ea:	4629      	mov	r1, r5
 80050ec:	4b4e      	ldr	r3, [pc, #312]	; (8005228 <_dtoa_r+0x528>)
 80050ee:	f7fb fa2b 	bl	8000548 <__aeabi_dmul>
 80050f2:	3701      	adds	r7, #1
 80050f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050fa:	e00c      	b.n	8005116 <_dtoa_r+0x416>
 80050fc:	9b04      	ldr	r3, [sp, #16]
 80050fe:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8005102:	9308      	str	r3, [sp, #32]
 8005104:	e008      	b.n	8005118 <_dtoa_r+0x418>
 8005106:	9904      	ldr	r1, [sp, #16]
 8005108:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800510c:	9108      	str	r1, [sp, #32]
 800510e:	e003      	b.n	8005118 <_dtoa_r+0x418>
 8005110:	9a04      	ldr	r2, [sp, #16]
 8005112:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8005116:	9208      	str	r2, [sp, #32]
 8005118:	4638      	mov	r0, r7
 800511a:	f7fb f9af 	bl	800047c <__aeabi_i2d>
 800511e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005122:	f7fb fa11 	bl	8000548 <__aeabi_dmul>
 8005126:	2200      	movs	r2, #0
 8005128:	4b40      	ldr	r3, [pc, #256]	; (800522c <_dtoa_r+0x52c>)
 800512a:	f7fb f85b 	bl	80001e4 <__adddf3>
 800512e:	9f08      	ldr	r7, [sp, #32]
 8005130:	4604      	mov	r4, r0
 8005132:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005136:	b9cf      	cbnz	r7, 800516c <_dtoa_r+0x46c>
 8005138:	2200      	movs	r2, #0
 800513a:	4b3d      	ldr	r3, [pc, #244]	; (8005230 <_dtoa_r+0x530>)
 800513c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005140:	f7fb f84e 	bl	80001e0 <__aeabi_dsub>
 8005144:	4622      	mov	r2, r4
 8005146:	462b      	mov	r3, r5
 8005148:	4606      	mov	r6, r0
 800514a:	460f      	mov	r7, r1
 800514c:	f7fb fc8c 	bl	8000a68 <__aeabi_dcmpgt>
 8005150:	2800      	cmp	r0, #0
 8005152:	f040 824b 	bne.w	80055ec <_dtoa_r+0x8ec>
 8005156:	4622      	mov	r2, r4
 8005158:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800515c:	4630      	mov	r0, r6
 800515e:	4639      	mov	r1, r7
 8005160:	f7fb fc64 	bl	8000a2c <__aeabi_dcmplt>
 8005164:	2800      	cmp	r0, #0
 8005166:	f040 8237 	bne.w	80055d8 <_dtoa_r+0x8d8>
 800516a:	e0b1      	b.n	80052d0 <_dtoa_r+0x5d0>
 800516c:	9f08      	ldr	r7, [sp, #32]
 800516e:	4b2b      	ldr	r3, [pc, #172]	; (800521c <_dtoa_r+0x51c>)
 8005170:	1e7a      	subs	r2, r7, #1
 8005172:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005178:	2f00      	cmp	r7, #0
 800517a:	d05d      	beq.n	8005238 <_dtoa_r+0x538>
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	2000      	movs	r0, #0
 8005182:	492c      	ldr	r1, [pc, #176]	; (8005234 <_dtoa_r+0x534>)
 8005184:	f7fb fb0a 	bl	800079c <__aeabi_ddiv>
 8005188:	4622      	mov	r2, r4
 800518a:	462b      	mov	r3, r5
 800518c:	f7fb f828 	bl	80001e0 <__aeabi_dsub>
 8005190:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005194:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005198:	4604      	mov	r4, r0
 800519a:	460d      	mov	r5, r1
 800519c:	4639      	mov	r1, r7
 800519e:	4630      	mov	r0, r6
 80051a0:	f7fb fc6c 	bl	8000a7c <__aeabi_d2iz>
 80051a4:	9000      	str	r0, [sp, #0]
 80051a6:	f7fb f969 	bl	800047c <__aeabi_i2d>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4630      	mov	r0, r6
 80051b0:	4639      	mov	r1, r7
 80051b2:	f7fb f815 	bl	80001e0 <__aeabi_dsub>
 80051b6:	f8dd c000 	ldr.w	ip, [sp]
 80051ba:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 80051be:	f808 3b01 	strb.w	r3, [r8], #1
 80051c2:	4622      	mov	r2, r4
 80051c4:	462b      	mov	r3, r5
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	f7fb fc2f 	bl	8000a2c <__aeabi_dcmplt>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	f040 8333 	bne.w	800583a <_dtoa_r+0xb3a>
 80051d4:	4632      	mov	r2, r6
 80051d6:	463b      	mov	r3, r7
 80051d8:	2000      	movs	r0, #0
 80051da:	4912      	ldr	r1, [pc, #72]	; (8005224 <_dtoa_r+0x524>)
 80051dc:	f7fb f800 	bl	80001e0 <__aeabi_dsub>
 80051e0:	4622      	mov	r2, r4
 80051e2:	462b      	mov	r3, r5
 80051e4:	f7fb fc22 	bl	8000a2c <__aeabi_dcmplt>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	f040 80d4 	bne.w	8005396 <_dtoa_r+0x696>
 80051ee:	9907      	ldr	r1, [sp, #28]
 80051f0:	9a08      	ldr	r2, [sp, #32]
 80051f2:	ebc1 0308 	rsb	r3, r1, r8
 80051f6:	4293      	cmp	r3, r2
 80051f8:	da6a      	bge.n	80052d0 <_dtoa_r+0x5d0>
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	2200      	movs	r2, #0
 8005200:	4b09      	ldr	r3, [pc, #36]	; (8005228 <_dtoa_r+0x528>)
 8005202:	f7fb f9a1 	bl	8000548 <__aeabi_dmul>
 8005206:	2200      	movs	r2, #0
 8005208:	4604      	mov	r4, r0
 800520a:	460d      	mov	r5, r1
 800520c:	4630      	mov	r0, r6
 800520e:	4639      	mov	r1, r7
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <_dtoa_r+0x528>)
 8005212:	f7fb f999 	bl	8000548 <__aeabi_dmul>
 8005216:	4606      	mov	r6, r0
 8005218:	460f      	mov	r7, r1
 800521a:	e7bf      	b.n	800519c <_dtoa_r+0x49c>
 800521c:	080077b0 	.word	0x080077b0
 8005220:	08007878 	.word	0x08007878
 8005224:	3ff00000 	.word	0x3ff00000
 8005228:	40240000 	.word	0x40240000
 800522c:	401c0000 	.word	0x401c0000
 8005230:	40140000 	.word	0x40140000
 8005234:	3fe00000 	.word	0x3fe00000
 8005238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800523c:	4622      	mov	r2, r4
 800523e:	462b      	mov	r3, r5
 8005240:	f7fb f982 	bl	8000548 <__aeabi_dmul>
 8005244:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005248:	9b08      	ldr	r3, [sp, #32]
 800524a:	9c07      	ldr	r4, [sp, #28]
 800524c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8005250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005254:	4498      	add	r8, r3
 8005256:	4639      	mov	r1, r7
 8005258:	4630      	mov	r0, r6
 800525a:	f7fb fc0f 	bl	8000a7c <__aeabi_d2iz>
 800525e:	4605      	mov	r5, r0
 8005260:	f7fb f90c 	bl	800047c <__aeabi_i2d>
 8005264:	3530      	adds	r5, #48	; 0x30
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4630      	mov	r0, r6
 800526c:	4639      	mov	r1, r7
 800526e:	f7fa ffb7 	bl	80001e0 <__aeabi_dsub>
 8005272:	f804 5b01 	strb.w	r5, [r4], #1
 8005276:	4544      	cmp	r4, r8
 8005278:	4606      	mov	r6, r0
 800527a:	460f      	mov	r7, r1
 800527c:	d121      	bne.n	80052c2 <_dtoa_r+0x5c2>
 800527e:	2200      	movs	r2, #0
 8005280:	4b87      	ldr	r3, [pc, #540]	; (80054a0 <_dtoa_r+0x7a0>)
 8005282:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8005286:	f7fa ffad 	bl	80001e4 <__adddf3>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4630      	mov	r0, r6
 8005290:	4639      	mov	r1, r7
 8005292:	f7fb fbe9 	bl	8000a68 <__aeabi_dcmpgt>
 8005296:	2800      	cmp	r0, #0
 8005298:	d17d      	bne.n	8005396 <_dtoa_r+0x696>
 800529a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800529e:	2000      	movs	r0, #0
 80052a0:	497f      	ldr	r1, [pc, #508]	; (80054a0 <_dtoa_r+0x7a0>)
 80052a2:	f7fa ff9d 	bl	80001e0 <__aeabi_dsub>
 80052a6:	4602      	mov	r2, r0
 80052a8:	460b      	mov	r3, r1
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fb fbbd 	bl	8000a2c <__aeabi_dcmplt>
 80052b2:	b168      	cbz	r0, 80052d0 <_dtoa_r+0x5d0>
 80052b4:	46a0      	mov	r8, r4
 80052b6:	3c01      	subs	r4, #1
 80052b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80052bc:	2b30      	cmp	r3, #48	; 0x30
 80052be:	d0f9      	beq.n	80052b4 <_dtoa_r+0x5b4>
 80052c0:	e2bb      	b.n	800583a <_dtoa_r+0xb3a>
 80052c2:	2200      	movs	r2, #0
 80052c4:	4b77      	ldr	r3, [pc, #476]	; (80054a4 <_dtoa_r+0x7a4>)
 80052c6:	f7fb f93f 	bl	8000548 <__aeabi_dmul>
 80052ca:	4606      	mov	r6, r0
 80052cc:	460f      	mov	r7, r1
 80052ce:	e7c2      	b.n	8005256 <_dtoa_r+0x556>
 80052d0:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 80052d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052da:	2b00      	cmp	r3, #0
 80052dc:	db7c      	blt.n	80053d8 <_dtoa_r+0x6d8>
 80052de:	f1b9 0f0e 	cmp.w	r9, #14
 80052e2:	dc79      	bgt.n	80053d8 <_dtoa_r+0x6d8>
 80052e4:	4b70      	ldr	r3, [pc, #448]	; (80054a8 <_dtoa_r+0x7a8>)
 80052e6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80052e8:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80052ec:	2f00      	cmp	r7, #0
 80052ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80052f2:	da14      	bge.n	800531e <_dtoa_r+0x61e>
 80052f4:	9f04      	ldr	r7, [sp, #16]
 80052f6:	2f00      	cmp	r7, #0
 80052f8:	dc11      	bgt.n	800531e <_dtoa_r+0x61e>
 80052fa:	f040 816f 	bne.w	80055dc <_dtoa_r+0x8dc>
 80052fe:	4620      	mov	r0, r4
 8005300:	4629      	mov	r1, r5
 8005302:	2200      	movs	r2, #0
 8005304:	4b69      	ldr	r3, [pc, #420]	; (80054ac <_dtoa_r+0x7ac>)
 8005306:	f7fb f91f 	bl	8000548 <__aeabi_dmul>
 800530a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800530e:	f7fb fba1 	bl	8000a54 <__aeabi_dcmpge>
 8005312:	9d04      	ldr	r5, [sp, #16]
 8005314:	462c      	mov	r4, r5
 8005316:	2800      	cmp	r0, #0
 8005318:	f040 8162 	bne.w	80055e0 <_dtoa_r+0x8e0>
 800531c:	e16a      	b.n	80055f4 <_dtoa_r+0x8f4>
 800531e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005322:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8005326:	4622      	mov	r2, r4
 8005328:	462b      	mov	r3, r5
 800532a:	4630      	mov	r0, r6
 800532c:	4639      	mov	r1, r7
 800532e:	f7fb fa35 	bl	800079c <__aeabi_ddiv>
 8005332:	f7fb fba3 	bl	8000a7c <__aeabi_d2iz>
 8005336:	9002      	str	r0, [sp, #8]
 8005338:	f7fb f8a0 	bl	800047c <__aeabi_i2d>
 800533c:	4622      	mov	r2, r4
 800533e:	462b      	mov	r3, r5
 8005340:	f7fb f902 	bl	8000548 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4630      	mov	r0, r6
 800534a:	4639      	mov	r1, r7
 800534c:	f7fa ff48 	bl	80001e0 <__aeabi_dsub>
 8005350:	9f02      	ldr	r7, [sp, #8]
 8005352:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8005356:	f808 6b01 	strb.w	r6, [r8], #1
 800535a:	9f07      	ldr	r7, [sp, #28]
 800535c:	ebc7 0608 	rsb	r6, r7, r8
 8005360:	9f04      	ldr	r7, [sp, #16]
 8005362:	42be      	cmp	r6, r7
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	d129      	bne.n	80053be <_dtoa_r+0x6be>
 800536a:	f7fa ff3b 	bl	80001e4 <__adddf3>
 800536e:	4622      	mov	r2, r4
 8005370:	462b      	mov	r3, r5
 8005372:	4606      	mov	r6, r0
 8005374:	460f      	mov	r7, r1
 8005376:	f7fb fb77 	bl	8000a68 <__aeabi_dcmpgt>
 800537a:	b970      	cbnz	r0, 800539a <_dtoa_r+0x69a>
 800537c:	4630      	mov	r0, r6
 800537e:	4639      	mov	r1, r7
 8005380:	4622      	mov	r2, r4
 8005382:	462b      	mov	r3, r5
 8005384:	f7fb fb48 	bl	8000a18 <__aeabi_dcmpeq>
 8005388:	2800      	cmp	r0, #0
 800538a:	f000 8258 	beq.w	800583e <_dtoa_r+0xb3e>
 800538e:	9f02      	ldr	r7, [sp, #8]
 8005390:	07fb      	lsls	r3, r7, #31
 8005392:	d402      	bmi.n	800539a <_dtoa_r+0x69a>
 8005394:	e253      	b.n	800583e <_dtoa_r+0xb3e>
 8005396:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800539a:	4643      	mov	r3, r8
 800539c:	4698      	mov	r8, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80053a4:	2a39      	cmp	r2, #57	; 0x39
 80053a6:	d106      	bne.n	80053b6 <_dtoa_r+0x6b6>
 80053a8:	9f07      	ldr	r7, [sp, #28]
 80053aa:	429f      	cmp	r7, r3
 80053ac:	d1f6      	bne.n	800539c <_dtoa_r+0x69c>
 80053ae:	2230      	movs	r2, #48	; 0x30
 80053b0:	f109 0901 	add.w	r9, r9, #1
 80053b4:	703a      	strb	r2, [r7, #0]
 80053b6:	781a      	ldrb	r2, [r3, #0]
 80053b8:	3201      	adds	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]
 80053bc:	e23f      	b.n	800583e <_dtoa_r+0xb3e>
 80053be:	2200      	movs	r2, #0
 80053c0:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <_dtoa_r+0x7a4>)
 80053c2:	f7fb f8c1 	bl	8000548 <__aeabi_dmul>
 80053c6:	2200      	movs	r2, #0
 80053c8:	2300      	movs	r3, #0
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	f7fb fb23 	bl	8000a18 <__aeabi_dcmpeq>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d0a7      	beq.n	8005326 <_dtoa_r+0x626>
 80053d6:	e232      	b.n	800583e <_dtoa_r+0xb3e>
 80053d8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80053da:	2f00      	cmp	r7, #0
 80053dc:	d030      	beq.n	8005440 <_dtoa_r+0x740>
 80053de:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80053e0:	2f01      	cmp	r7, #1
 80053e2:	dc0a      	bgt.n	80053fa <_dtoa_r+0x6fa>
 80053e4:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80053e6:	b117      	cbz	r7, 80053ee <_dtoa_r+0x6ee>
 80053e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053ec:	e002      	b.n	80053f4 <_dtoa_r+0x6f4>
 80053ee:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80053f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053f4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80053f6:	9e05      	ldr	r6, [sp, #20]
 80053f8:	e016      	b.n	8005428 <_dtoa_r+0x728>
 80053fa:	9f04      	ldr	r7, [sp, #16]
 80053fc:	1e7d      	subs	r5, r7, #1
 80053fe:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005400:	42af      	cmp	r7, r5
 8005402:	db01      	blt.n	8005408 <_dtoa_r+0x708>
 8005404:	1b7d      	subs	r5, r7, r5
 8005406:	e006      	b.n	8005416 <_dtoa_r+0x716>
 8005408:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800540a:	950b      	str	r5, [sp, #44]	; 0x2c
 800540c:	1beb      	subs	r3, r5, r7
 800540e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8005410:	441f      	add	r7, r3
 8005412:	9710      	str	r7, [sp, #64]	; 0x40
 8005414:	2500      	movs	r5, #0
 8005416:	9f04      	ldr	r7, [sp, #16]
 8005418:	2f00      	cmp	r7, #0
 800541a:	da03      	bge.n	8005424 <_dtoa_r+0x724>
 800541c:	9905      	ldr	r1, [sp, #20]
 800541e:	2300      	movs	r3, #0
 8005420:	1bce      	subs	r6, r1, r7
 8005422:	e001      	b.n	8005428 <_dtoa_r+0x728>
 8005424:	9e05      	ldr	r6, [sp, #20]
 8005426:	9b04      	ldr	r3, [sp, #16]
 8005428:	9f05      	ldr	r7, [sp, #20]
 800542a:	441f      	add	r7, r3
 800542c:	9705      	str	r7, [sp, #20]
 800542e:	9f06      	ldr	r7, [sp, #24]
 8005430:	4650      	mov	r0, sl
 8005432:	441f      	add	r7, r3
 8005434:	2101      	movs	r1, #1
 8005436:	9706      	str	r7, [sp, #24]
 8005438:	f001 f9ad 	bl	8006796 <__i2b>
 800543c:	4604      	mov	r4, r0
 800543e:	e002      	b.n	8005446 <_dtoa_r+0x746>
 8005440:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005442:	9e05      	ldr	r6, [sp, #20]
 8005444:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005446:	b16e      	cbz	r6, 8005464 <_dtoa_r+0x764>
 8005448:	9f06      	ldr	r7, [sp, #24]
 800544a:	2f00      	cmp	r7, #0
 800544c:	dd0a      	ble.n	8005464 <_dtoa_r+0x764>
 800544e:	463b      	mov	r3, r7
 8005450:	9f05      	ldr	r7, [sp, #20]
 8005452:	42b3      	cmp	r3, r6
 8005454:	bfa8      	it	ge
 8005456:	4633      	movge	r3, r6
 8005458:	1aff      	subs	r7, r7, r3
 800545a:	9705      	str	r7, [sp, #20]
 800545c:	9f06      	ldr	r7, [sp, #24]
 800545e:	1aff      	subs	r7, r7, r3
 8005460:	1af6      	subs	r6, r6, r3
 8005462:	9706      	str	r7, [sp, #24]
 8005464:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005466:	2f00      	cmp	r7, #0
 8005468:	dd28      	ble.n	80054bc <_dtoa_r+0x7bc>
 800546a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800546c:	b307      	cbz	r7, 80054b0 <_dtoa_r+0x7b0>
 800546e:	2d00      	cmp	r5, #0
 8005470:	dd10      	ble.n	8005494 <_dtoa_r+0x794>
 8005472:	4621      	mov	r1, r4
 8005474:	462a      	mov	r2, r5
 8005476:	4650      	mov	r0, sl
 8005478:	f001 fa2e 	bl	80068d8 <__pow5mult>
 800547c:	4604      	mov	r4, r0
 800547e:	465a      	mov	r2, fp
 8005480:	4621      	mov	r1, r4
 8005482:	4650      	mov	r0, sl
 8005484:	f001 f990 	bl	80067a8 <__multiply>
 8005488:	4659      	mov	r1, fp
 800548a:	4607      	mov	r7, r0
 800548c:	4650      	mov	r0, sl
 800548e:	f001 f8e4 	bl	800665a <_Bfree>
 8005492:	46bb      	mov	fp, r7
 8005494:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8005496:	1b7a      	subs	r2, r7, r5
 8005498:	d010      	beq.n	80054bc <_dtoa_r+0x7bc>
 800549a:	4650      	mov	r0, sl
 800549c:	4659      	mov	r1, fp
 800549e:	e00a      	b.n	80054b6 <_dtoa_r+0x7b6>
 80054a0:	3fe00000 	.word	0x3fe00000
 80054a4:	40240000 	.word	0x40240000
 80054a8:	080077b0 	.word	0x080077b0
 80054ac:	40140000 	.word	0x40140000
 80054b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054b2:	4650      	mov	r0, sl
 80054b4:	4659      	mov	r1, fp
 80054b6:	f001 fa0f 	bl	80068d8 <__pow5mult>
 80054ba:	4683      	mov	fp, r0
 80054bc:	4650      	mov	r0, sl
 80054be:	2101      	movs	r1, #1
 80054c0:	f001 f969 	bl	8006796 <__i2b>
 80054c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80054c6:	2f00      	cmp	r7, #0
 80054c8:	4605      	mov	r5, r0
 80054ca:	dd05      	ble.n	80054d8 <_dtoa_r+0x7d8>
 80054cc:	4629      	mov	r1, r5
 80054ce:	4650      	mov	r0, sl
 80054d0:	463a      	mov	r2, r7
 80054d2:	f001 fa01 	bl	80068d8 <__pow5mult>
 80054d6:	4605      	mov	r5, r0
 80054d8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80054da:	2f01      	cmp	r7, #1
 80054dc:	dc12      	bgt.n	8005504 <_dtoa_r+0x804>
 80054de:	9902      	ldr	r1, [sp, #8]
 80054e0:	b981      	cbnz	r1, 8005504 <_dtoa_r+0x804>
 80054e2:	9a03      	ldr	r2, [sp, #12]
 80054e4:	f3c2 0313 	ubfx	r3, r2, #0, #20
 80054e8:	b973      	cbnz	r3, 8005508 <_dtoa_r+0x808>
 80054ea:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 80054ee:	0d3f      	lsrs	r7, r7, #20
 80054f0:	053f      	lsls	r7, r7, #20
 80054f2:	b157      	cbz	r7, 800550a <_dtoa_r+0x80a>
 80054f4:	9f05      	ldr	r7, [sp, #20]
 80054f6:	3701      	adds	r7, #1
 80054f8:	9705      	str	r7, [sp, #20]
 80054fa:	9f06      	ldr	r7, [sp, #24]
 80054fc:	3701      	adds	r7, #1
 80054fe:	9706      	str	r7, [sp, #24]
 8005500:	2701      	movs	r7, #1
 8005502:	e002      	b.n	800550a <_dtoa_r+0x80a>
 8005504:	2700      	movs	r7, #0
 8005506:	e000      	b.n	800550a <_dtoa_r+0x80a>
 8005508:	9f02      	ldr	r7, [sp, #8]
 800550a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800550c:	b141      	cbz	r1, 8005520 <_dtoa_r+0x820>
 800550e:	692b      	ldr	r3, [r5, #16]
 8005510:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005514:	6918      	ldr	r0, [r3, #16]
 8005516:	f001 f8f1 	bl	80066fc <__hi0bits>
 800551a:	f1c0 0020 	rsb	r0, r0, #32
 800551e:	e000      	b.n	8005522 <_dtoa_r+0x822>
 8005520:	2001      	movs	r0, #1
 8005522:	9b06      	ldr	r3, [sp, #24]
 8005524:	4403      	add	r3, r0
 8005526:	f013 031f 	ands.w	r3, r3, #31
 800552a:	d008      	beq.n	800553e <_dtoa_r+0x83e>
 800552c:	f1c3 0220 	rsb	r2, r3, #32
 8005530:	2a04      	cmp	r2, #4
 8005532:	dd02      	ble.n	800553a <_dtoa_r+0x83a>
 8005534:	f1c3 031c 	rsb	r3, r3, #28
 8005538:	e002      	b.n	8005540 <_dtoa_r+0x840>
 800553a:	d008      	beq.n	800554e <_dtoa_r+0x84e>
 800553c:	4613      	mov	r3, r2
 800553e:	331c      	adds	r3, #28
 8005540:	9a05      	ldr	r2, [sp, #20]
 8005542:	9906      	ldr	r1, [sp, #24]
 8005544:	441a      	add	r2, r3
 8005546:	4419      	add	r1, r3
 8005548:	9205      	str	r2, [sp, #20]
 800554a:	441e      	add	r6, r3
 800554c:	9106      	str	r1, [sp, #24]
 800554e:	9a05      	ldr	r2, [sp, #20]
 8005550:	2a00      	cmp	r2, #0
 8005552:	dd04      	ble.n	800555e <_dtoa_r+0x85e>
 8005554:	4659      	mov	r1, fp
 8005556:	4650      	mov	r0, sl
 8005558:	f001 fa0c 	bl	8006974 <__lshift>
 800555c:	4683      	mov	fp, r0
 800555e:	9b06      	ldr	r3, [sp, #24]
 8005560:	2b00      	cmp	r3, #0
 8005562:	dd05      	ble.n	8005570 <_dtoa_r+0x870>
 8005564:	4629      	mov	r1, r5
 8005566:	4650      	mov	r0, sl
 8005568:	461a      	mov	r2, r3
 800556a:	f001 fa03 	bl	8006974 <__lshift>
 800556e:	4605      	mov	r5, r0
 8005570:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005572:	b1e1      	cbz	r1, 80055ae <_dtoa_r+0x8ae>
 8005574:	4658      	mov	r0, fp
 8005576:	4629      	mov	r1, r5
 8005578:	f001 fa4f 	bl	8006a1a <__mcmp>
 800557c:	2800      	cmp	r0, #0
 800557e:	da16      	bge.n	80055ae <_dtoa_r+0x8ae>
 8005580:	4659      	mov	r1, fp
 8005582:	220a      	movs	r2, #10
 8005584:	4650      	mov	r0, sl
 8005586:	2300      	movs	r3, #0
 8005588:	f001 f87e 	bl	8006688 <__multadd>
 800558c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800558e:	f109 39ff 	add.w	r9, r9, #4294967295
 8005592:	4683      	mov	fp, r0
 8005594:	b14a      	cbz	r2, 80055aa <_dtoa_r+0x8aa>
 8005596:	4621      	mov	r1, r4
 8005598:	2300      	movs	r3, #0
 800559a:	4650      	mov	r0, sl
 800559c:	220a      	movs	r2, #10
 800559e:	f001 f873 	bl	8006688 <__multadd>
 80055a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	4604      	mov	r4, r0
 80055a8:	e001      	b.n	80055ae <_dtoa_r+0x8ae>
 80055aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055ac:	9104      	str	r1, [sp, #16]
 80055ae:	9a04      	ldr	r2, [sp, #16]
 80055b0:	2a00      	cmp	r2, #0
 80055b2:	dc29      	bgt.n	8005608 <_dtoa_r+0x908>
 80055b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	dd26      	ble.n	8005608 <_dtoa_r+0x908>
 80055ba:	b98a      	cbnz	r2, 80055e0 <_dtoa_r+0x8e0>
 80055bc:	4629      	mov	r1, r5
 80055be:	2205      	movs	r2, #5
 80055c0:	9b04      	ldr	r3, [sp, #16]
 80055c2:	4650      	mov	r0, sl
 80055c4:	f001 f860 	bl	8006688 <__multadd>
 80055c8:	4605      	mov	r5, r0
 80055ca:	4629      	mov	r1, r5
 80055cc:	4658      	mov	r0, fp
 80055ce:	f001 fa24 	bl	8006a1a <__mcmp>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	dc0e      	bgt.n	80055f4 <_dtoa_r+0x8f4>
 80055d6:	e003      	b.n	80055e0 <_dtoa_r+0x8e0>
 80055d8:	9d08      	ldr	r5, [sp, #32]
 80055da:	e000      	b.n	80055de <_dtoa_r+0x8de>
 80055dc:	2500      	movs	r5, #0
 80055de:	462c      	mov	r4, r5
 80055e0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80055e2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80055e6:	ea6f 0907 	mvn.w	r9, r7
 80055ea:	e00a      	b.n	8005602 <_dtoa_r+0x902>
 80055ec:	9d08      	ldr	r5, [sp, #32]
 80055ee:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80055f2:	462c      	mov	r4, r5
 80055f4:	9f07      	ldr	r7, [sp, #28]
 80055f6:	2331      	movs	r3, #49	; 0x31
 80055f8:	f107 0801 	add.w	r8, r7, #1
 80055fc:	703b      	strb	r3, [r7, #0]
 80055fe:	f109 0901 	add.w	r9, r9, #1
 8005602:	4627      	mov	r7, r4
 8005604:	2400      	movs	r4, #0
 8005606:	e107      	b.n	8005818 <_dtoa_r+0xb18>
 8005608:	990c      	ldr	r1, [sp, #48]	; 0x30
 800560a:	2900      	cmp	r1, #0
 800560c:	f000 80bb 	beq.w	8005786 <_dtoa_r+0xa86>
 8005610:	2e00      	cmp	r6, #0
 8005612:	dd05      	ble.n	8005620 <_dtoa_r+0x920>
 8005614:	4621      	mov	r1, r4
 8005616:	4650      	mov	r0, sl
 8005618:	4632      	mov	r2, r6
 800561a:	f001 f9ab 	bl	8006974 <__lshift>
 800561e:	4604      	mov	r4, r0
 8005620:	b19f      	cbz	r7, 800564a <_dtoa_r+0x94a>
 8005622:	6861      	ldr	r1, [r4, #4]
 8005624:	4650      	mov	r0, sl
 8005626:	f000 ffe3 	bl	80065f0 <_Balloc>
 800562a:	6922      	ldr	r2, [r4, #16]
 800562c:	3202      	adds	r2, #2
 800562e:	4606      	mov	r6, r0
 8005630:	f104 010c 	add.w	r1, r4, #12
 8005634:	0092      	lsls	r2, r2, #2
 8005636:	300c      	adds	r0, #12
 8005638:	f7fe f9da 	bl	80039f0 <memcpy>
 800563c:	4650      	mov	r0, sl
 800563e:	4631      	mov	r1, r6
 8005640:	2201      	movs	r2, #1
 8005642:	f001 f997 	bl	8006974 <__lshift>
 8005646:	4607      	mov	r7, r0
 8005648:	e000      	b.n	800564c <_dtoa_r+0x94c>
 800564a:	4627      	mov	r7, r4
 800564c:	9e07      	ldr	r6, [sp, #28]
 800564e:	4629      	mov	r1, r5
 8005650:	4658      	mov	r0, fp
 8005652:	f7ff fac5 	bl	8004be0 <quorem>
 8005656:	4621      	mov	r1, r4
 8005658:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800565c:	4680      	mov	r8, r0
 800565e:	4658      	mov	r0, fp
 8005660:	f8cd c000 	str.w	ip, [sp]
 8005664:	f001 f9d9 	bl	8006a1a <__mcmp>
 8005668:	463a      	mov	r2, r7
 800566a:	9005      	str	r0, [sp, #20]
 800566c:	4629      	mov	r1, r5
 800566e:	4650      	mov	r0, sl
 8005670:	f001 f9f0 	bl	8006a54 <__mdiff>
 8005674:	68c3      	ldr	r3, [r0, #12]
 8005676:	f8dd c000 	ldr.w	ip, [sp]
 800567a:	4602      	mov	r2, r0
 800567c:	b94b      	cbnz	r3, 8005692 <_dtoa_r+0x992>
 800567e:	4611      	mov	r1, r2
 8005680:	4658      	mov	r0, fp
 8005682:	9201      	str	r2, [sp, #4]
 8005684:	f001 f9c9 	bl	8006a1a <__mcmp>
 8005688:	9a01      	ldr	r2, [sp, #4]
 800568a:	f8dd c000 	ldr.w	ip, [sp]
 800568e:	4603      	mov	r3, r0
 8005690:	e000      	b.n	8005694 <_dtoa_r+0x994>
 8005692:	2301      	movs	r3, #1
 8005694:	4650      	mov	r0, sl
 8005696:	4611      	mov	r1, r2
 8005698:	9301      	str	r3, [sp, #4]
 800569a:	f8cd c000 	str.w	ip, [sp]
 800569e:	f000 ffdc 	bl	800665a <_Bfree>
 80056a2:	9b01      	ldr	r3, [sp, #4]
 80056a4:	f8dd c000 	ldr.w	ip, [sp]
 80056a8:	b963      	cbnz	r3, 80056c4 <_dtoa_r+0x9c4>
 80056aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056ac:	b952      	cbnz	r2, 80056c4 <_dtoa_r+0x9c4>
 80056ae:	9902      	ldr	r1, [sp, #8]
 80056b0:	f001 0201 	and.w	r2, r1, #1
 80056b4:	b932      	cbnz	r2, 80056c4 <_dtoa_r+0x9c4>
 80056b6:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80056ba:	d035      	beq.n	8005728 <_dtoa_r+0xa28>
 80056bc:	9b05      	ldr	r3, [sp, #20]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	dc24      	bgt.n	800570c <_dtoa_r+0xa0c>
 80056c2:	e025      	b.n	8005710 <_dtoa_r+0xa10>
 80056c4:	9905      	ldr	r1, [sp, #20]
 80056c6:	2900      	cmp	r1, #0
 80056c8:	da02      	bge.n	80056d0 <_dtoa_r+0x9d0>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dc08      	bgt.n	80056e0 <_dtoa_r+0x9e0>
 80056ce:	e01f      	b.n	8005710 <_dtoa_r+0xa10>
 80056d0:	d123      	bne.n	800571a <_dtoa_r+0xa1a>
 80056d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056d4:	bb0a      	cbnz	r2, 800571a <_dtoa_r+0xa1a>
 80056d6:	9902      	ldr	r1, [sp, #8]
 80056d8:	f001 0201 	and.w	r2, r1, #1
 80056dc:	b9ea      	cbnz	r2, 800571a <_dtoa_r+0xa1a>
 80056de:	e7f4      	b.n	80056ca <_dtoa_r+0x9ca>
 80056e0:	4659      	mov	r1, fp
 80056e2:	2201      	movs	r2, #1
 80056e4:	4650      	mov	r0, sl
 80056e6:	f8cd c000 	str.w	ip, [sp]
 80056ea:	f001 f943 	bl	8006974 <__lshift>
 80056ee:	4629      	mov	r1, r5
 80056f0:	4683      	mov	fp, r0
 80056f2:	f001 f992 	bl	8006a1a <__mcmp>
 80056f6:	2800      	cmp	r0, #0
 80056f8:	f8dd c000 	ldr.w	ip, [sp]
 80056fc:	dc03      	bgt.n	8005706 <_dtoa_r+0xa06>
 80056fe:	d107      	bne.n	8005710 <_dtoa_r+0xa10>
 8005700:	f01c 0f01 	tst.w	ip, #1
 8005704:	d004      	beq.n	8005710 <_dtoa_r+0xa10>
 8005706:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 800570a:	d00d      	beq.n	8005728 <_dtoa_r+0xa28>
 800570c:	f108 0c31 	add.w	ip, r8, #49	; 0x31
 8005710:	f106 0801 	add.w	r8, r6, #1
 8005714:	f886 c000 	strb.w	ip, [r6]
 8005718:	e07e      	b.n	8005818 <_dtoa_r+0xb18>
 800571a:	2b00      	cmp	r3, #0
 800571c:	f106 0801 	add.w	r8, r6, #1
 8005720:	dd09      	ble.n	8005736 <_dtoa_r+0xa36>
 8005722:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8005726:	d103      	bne.n	8005730 <_dtoa_r+0xa30>
 8005728:	2339      	movs	r3, #57	; 0x39
 800572a:	7033      	strb	r3, [r6, #0]
 800572c:	3601      	adds	r6, #1
 800572e:	e05b      	b.n	80057e8 <_dtoa_r+0xae8>
 8005730:	f10c 0301 	add.w	r3, ip, #1
 8005734:	e068      	b.n	8005808 <_dtoa_r+0xb08>
 8005736:	9a07      	ldr	r2, [sp, #28]
 8005738:	9904      	ldr	r1, [sp, #16]
 800573a:	4646      	mov	r6, r8
 800573c:	ebc2 0308 	rsb	r3, r2, r8
 8005740:	428b      	cmp	r3, r1
 8005742:	f806 cc01 	strb.w	ip, [r6, #-1]
 8005746:	d03c      	beq.n	80057c2 <_dtoa_r+0xac2>
 8005748:	4659      	mov	r1, fp
 800574a:	220a      	movs	r2, #10
 800574c:	2300      	movs	r3, #0
 800574e:	4650      	mov	r0, sl
 8005750:	f000 ff9a 	bl	8006688 <__multadd>
 8005754:	42bc      	cmp	r4, r7
 8005756:	4683      	mov	fp, r0
 8005758:	4621      	mov	r1, r4
 800575a:	4650      	mov	r0, sl
 800575c:	f04f 020a 	mov.w	r2, #10
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	d104      	bne.n	8005770 <_dtoa_r+0xa70>
 8005766:	f000 ff8f 	bl	8006688 <__multadd>
 800576a:	4604      	mov	r4, r0
 800576c:	4607      	mov	r7, r0
 800576e:	e76e      	b.n	800564e <_dtoa_r+0x94e>
 8005770:	f000 ff8a 	bl	8006688 <__multadd>
 8005774:	4639      	mov	r1, r7
 8005776:	4604      	mov	r4, r0
 8005778:	220a      	movs	r2, #10
 800577a:	4650      	mov	r0, sl
 800577c:	2300      	movs	r3, #0
 800577e:	f000 ff83 	bl	8006688 <__multadd>
 8005782:	4607      	mov	r7, r0
 8005784:	e763      	b.n	800564e <_dtoa_r+0x94e>
 8005786:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005788:	4658      	mov	r0, fp
 800578a:	4629      	mov	r1, r5
 800578c:	f7ff fa28 	bl	8004be0 <quorem>
 8005790:	9f07      	ldr	r7, [sp, #28]
 8005792:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005796:	f807 c006 	strb.w	ip, [r7, r6]
 800579a:	9f04      	ldr	r7, [sp, #16]
 800579c:	3601      	adds	r6, #1
 800579e:	42be      	cmp	r6, r7
 80057a0:	db07      	blt.n	80057b2 <_dtoa_r+0xab2>
 80057a2:	9e07      	ldr	r6, [sp, #28]
 80057a4:	2f01      	cmp	r7, #1
 80057a6:	bfac      	ite	ge
 80057a8:	19f6      	addge	r6, r6, r7
 80057aa:	3601      	addlt	r6, #1
 80057ac:	4627      	mov	r7, r4
 80057ae:	2400      	movs	r4, #0
 80057b0:	e007      	b.n	80057c2 <_dtoa_r+0xac2>
 80057b2:	4659      	mov	r1, fp
 80057b4:	4650      	mov	r0, sl
 80057b6:	220a      	movs	r2, #10
 80057b8:	2300      	movs	r3, #0
 80057ba:	f000 ff65 	bl	8006688 <__multadd>
 80057be:	4683      	mov	fp, r0
 80057c0:	e7e2      	b.n	8005788 <_dtoa_r+0xa88>
 80057c2:	4659      	mov	r1, fp
 80057c4:	2201      	movs	r2, #1
 80057c6:	4650      	mov	r0, sl
 80057c8:	f8cd c000 	str.w	ip, [sp]
 80057cc:	f001 f8d2 	bl	8006974 <__lshift>
 80057d0:	4629      	mov	r1, r5
 80057d2:	4683      	mov	fp, r0
 80057d4:	f001 f921 	bl	8006a1a <__mcmp>
 80057d8:	2800      	cmp	r0, #0
 80057da:	f8dd c000 	ldr.w	ip, [sp]
 80057de:	dc03      	bgt.n	80057e8 <_dtoa_r+0xae8>
 80057e0:	d114      	bne.n	800580c <_dtoa_r+0xb0c>
 80057e2:	f01c 0f01 	tst.w	ip, #1
 80057e6:	d011      	beq.n	800580c <_dtoa_r+0xb0c>
 80057e8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80057ec:	2b39      	cmp	r3, #57	; 0x39
 80057ee:	46b0      	mov	r8, r6
 80057f0:	f106 36ff 	add.w	r6, r6, #4294967295
 80057f4:	d107      	bne.n	8005806 <_dtoa_r+0xb06>
 80057f6:	9907      	ldr	r1, [sp, #28]
 80057f8:	42b1      	cmp	r1, r6
 80057fa:	d1f5      	bne.n	80057e8 <_dtoa_r+0xae8>
 80057fc:	2331      	movs	r3, #49	; 0x31
 80057fe:	f109 0901 	add.w	r9, r9, #1
 8005802:	700b      	strb	r3, [r1, #0]
 8005804:	e008      	b.n	8005818 <_dtoa_r+0xb18>
 8005806:	3301      	adds	r3, #1
 8005808:	7033      	strb	r3, [r6, #0]
 800580a:	e005      	b.n	8005818 <_dtoa_r+0xb18>
 800580c:	46b0      	mov	r8, r6
 800580e:	3e01      	subs	r6, #1
 8005810:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d0f9      	beq.n	800580c <_dtoa_r+0xb0c>
 8005818:	4650      	mov	r0, sl
 800581a:	4629      	mov	r1, r5
 800581c:	f000 ff1d 	bl	800665a <_Bfree>
 8005820:	b16f      	cbz	r7, 800583e <_dtoa_r+0xb3e>
 8005822:	b12c      	cbz	r4, 8005830 <_dtoa_r+0xb30>
 8005824:	42bc      	cmp	r4, r7
 8005826:	d003      	beq.n	8005830 <_dtoa_r+0xb30>
 8005828:	4650      	mov	r0, sl
 800582a:	4621      	mov	r1, r4
 800582c:	f000 ff15 	bl	800665a <_Bfree>
 8005830:	4650      	mov	r0, sl
 8005832:	4639      	mov	r1, r7
 8005834:	f000 ff11 	bl	800665a <_Bfree>
 8005838:	e001      	b.n	800583e <_dtoa_r+0xb3e>
 800583a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800583e:	4650      	mov	r0, sl
 8005840:	4659      	mov	r1, fp
 8005842:	f000 ff0a 	bl	800665a <_Bfree>
 8005846:	2300      	movs	r3, #0
 8005848:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800584a:	f888 3000 	strb.w	r3, [r8]
 800584e:	f109 0301 	add.w	r3, r9, #1
 8005852:	603b      	str	r3, [r7, #0]
 8005854:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8005856:	b127      	cbz	r7, 8005862 <_dtoa_r+0xb62>
 8005858:	f8c7 8000 	str.w	r8, [r7]
 800585c:	e001      	b.n	8005862 <_dtoa_r+0xb62>
 800585e:	4803      	ldr	r0, [pc, #12]	; (800586c <_dtoa_r+0xb6c>)
 8005860:	e000      	b.n	8005864 <_dtoa_r+0xb64>
 8005862:	9807      	ldr	r0, [sp, #28]
 8005864:	b01b      	add	sp, #108	; 0x6c
 8005866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586a:	bf00      	nop
 800586c:	08007721 	.word	0x08007721

08005870 <__sflush_r>:
 8005870:	898a      	ldrh	r2, [r1, #12]
 8005872:	b293      	uxth	r3, r2
 8005874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005878:	4605      	mov	r5, r0
 800587a:	0718      	lsls	r0, r3, #28
 800587c:	460c      	mov	r4, r1
 800587e:	d45e      	bmi.n	800593e <__sflush_r+0xce>
 8005880:	684b      	ldr	r3, [r1, #4]
 8005882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005886:	2b00      	cmp	r3, #0
 8005888:	818a      	strh	r2, [r1, #12]
 800588a:	dc02      	bgt.n	8005892 <__sflush_r+0x22>
 800588c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	dd18      	ble.n	80058c4 <__sflush_r+0x54>
 8005892:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005894:	b1b6      	cbz	r6, 80058c4 <__sflush_r+0x54>
 8005896:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800589a:	2300      	movs	r3, #0
 800589c:	b292      	uxth	r2, r2
 800589e:	682f      	ldr	r7, [r5, #0]
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	b10a      	cbz	r2, 80058a8 <__sflush_r+0x38>
 80058a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80058a6:	e010      	b.n	80058ca <__sflush_r+0x5a>
 80058a8:	6a21      	ldr	r1, [r4, #32]
 80058aa:	4628      	mov	r0, r5
 80058ac:	2301      	movs	r3, #1
 80058ae:	47b0      	blx	r6
 80058b0:	1c41      	adds	r1, r0, #1
 80058b2:	4602      	mov	r2, r0
 80058b4:	d109      	bne.n	80058ca <__sflush_r+0x5a>
 80058b6:	682b      	ldr	r3, [r5, #0]
 80058b8:	b13b      	cbz	r3, 80058ca <__sflush_r+0x5a>
 80058ba:	2b1d      	cmp	r3, #29
 80058bc:	d001      	beq.n	80058c2 <__sflush_r+0x52>
 80058be:	2b16      	cmp	r3, #22
 80058c0:	d14b      	bne.n	800595a <__sflush_r+0xea>
 80058c2:	602f      	str	r7, [r5, #0]
 80058c4:	2000      	movs	r0, #0
 80058c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	075b      	lsls	r3, r3, #29
 80058ce:	d505      	bpl.n	80058dc <__sflush_r+0x6c>
 80058d0:	6863      	ldr	r3, [r4, #4]
 80058d2:	1ad2      	subs	r2, r2, r3
 80058d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058d6:	b10b      	cbz	r3, 80058dc <__sflush_r+0x6c>
 80058d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058da:	1ad2      	subs	r2, r2, r3
 80058dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058de:	6a21      	ldr	r1, [r4, #32]
 80058e0:	4628      	mov	r0, r5
 80058e2:	2300      	movs	r3, #0
 80058e4:	47b0      	blx	r6
 80058e6:	1c46      	adds	r6, r0, #1
 80058e8:	89a2      	ldrh	r2, [r4, #12]
 80058ea:	d105      	bne.n	80058f8 <__sflush_r+0x88>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b11b      	cbz	r3, 80058f8 <__sflush_r+0x88>
 80058f0:	2b1d      	cmp	r3, #29
 80058f2:	d001      	beq.n	80058f8 <__sflush_r+0x88>
 80058f4:	2b16      	cmp	r3, #22
 80058f6:	d11d      	bne.n	8005934 <__sflush_r+0xc4>
 80058f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fc:	b292      	uxth	r2, r2
 80058fe:	2300      	movs	r3, #0
 8005900:	6063      	str	r3, [r4, #4]
 8005902:	04d1      	lsls	r1, r2, #19
 8005904:	6923      	ldr	r3, [r4, #16]
 8005906:	81a2      	strh	r2, [r4, #12]
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	d504      	bpl.n	8005916 <__sflush_r+0xa6>
 800590c:	1c42      	adds	r2, r0, #1
 800590e:	d101      	bne.n	8005914 <__sflush_r+0xa4>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	b903      	cbnz	r3, 8005916 <__sflush_r+0xa6>
 8005914:	6560      	str	r0, [r4, #84]	; 0x54
 8005916:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005918:	602f      	str	r7, [r5, #0]
 800591a:	2900      	cmp	r1, #0
 800591c:	d0d2      	beq.n	80058c4 <__sflush_r+0x54>
 800591e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005922:	4299      	cmp	r1, r3
 8005924:	d002      	beq.n	800592c <__sflush_r+0xbc>
 8005926:	4628      	mov	r0, r5
 8005928:	f000 f98a 	bl	8005c40 <_free_r>
 800592c:	2000      	movs	r0, #0
 800592e:	6360      	str	r0, [r4, #52]	; 0x34
 8005930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005934:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005938:	81a2      	strh	r2, [r4, #12]
 800593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800593e:	690e      	ldr	r6, [r1, #16]
 8005940:	2e00      	cmp	r6, #0
 8005942:	d0bf      	beq.n	80058c4 <__sflush_r+0x54>
 8005944:	079b      	lsls	r3, r3, #30
 8005946:	680a      	ldr	r2, [r1, #0]
 8005948:	bf08      	it	eq
 800594a:	694b      	ldreq	r3, [r1, #20]
 800594c:	600e      	str	r6, [r1, #0]
 800594e:	bf18      	it	ne
 8005950:	2300      	movne	r3, #0
 8005952:	ebc6 0802 	rsb	r8, r6, r2
 8005956:	608b      	str	r3, [r1, #8]
 8005958:	e012      	b.n	8005980 <__sflush_r+0x110>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005960:	81a3      	strh	r3, [r4, #12]
 8005962:	f04f 30ff 	mov.w	r0, #4294967295
 8005966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800596a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800596c:	6a21      	ldr	r1, [r4, #32]
 800596e:	4628      	mov	r0, r5
 8005970:	4632      	mov	r2, r6
 8005972:	4643      	mov	r3, r8
 8005974:	47b8      	blx	r7
 8005976:	2800      	cmp	r0, #0
 8005978:	ddef      	ble.n	800595a <__sflush_r+0xea>
 800597a:	4406      	add	r6, r0
 800597c:	ebc0 0808 	rsb	r8, r0, r8
 8005980:	f1b8 0f00 	cmp.w	r8, #0
 8005984:	dcf1      	bgt.n	800596a <__sflush_r+0xfa>
 8005986:	e79d      	b.n	80058c4 <__sflush_r+0x54>

08005988 <_fflush_r>:
 8005988:	b538      	push	{r3, r4, r5, lr}
 800598a:	690b      	ldr	r3, [r1, #16]
 800598c:	4605      	mov	r5, r0
 800598e:	460c      	mov	r4, r1
 8005990:	b1db      	cbz	r3, 80059ca <_fflush_r+0x42>
 8005992:	b118      	cbz	r0, 800599c <_fflush_r+0x14>
 8005994:	6983      	ldr	r3, [r0, #24]
 8005996:	b90b      	cbnz	r3, 800599c <_fflush_r+0x14>
 8005998:	f000 f83c 	bl	8005a14 <__sinit>
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <_fflush_r+0x48>)
 800599e:	429c      	cmp	r4, r3
 80059a0:	d101      	bne.n	80059a6 <_fflush_r+0x1e>
 80059a2:	686c      	ldr	r4, [r5, #4]
 80059a4:	e008      	b.n	80059b8 <_fflush_r+0x30>
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <_fflush_r+0x4c>)
 80059a8:	429c      	cmp	r4, r3
 80059aa:	d101      	bne.n	80059b0 <_fflush_r+0x28>
 80059ac:	68ac      	ldr	r4, [r5, #8]
 80059ae:	e003      	b.n	80059b8 <_fflush_r+0x30>
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <_fflush_r+0x50>)
 80059b2:	429c      	cmp	r4, r3
 80059b4:	bf08      	it	eq
 80059b6:	68ec      	ldreq	r4, [r5, #12]
 80059b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059bc:	b12b      	cbz	r3, 80059ca <_fflush_r+0x42>
 80059be:	4628      	mov	r0, r5
 80059c0:	4621      	mov	r1, r4
 80059c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059c6:	f7ff bf53 	b.w	8005870 <__sflush_r>
 80059ca:	2000      	movs	r0, #0
 80059cc:	bd38      	pop	{r3, r4, r5, pc}
 80059ce:	bf00      	nop
 80059d0:	08007740 	.word	0x08007740
 80059d4:	08007760 	.word	0x08007760
 80059d8:	08007780 	.word	0x08007780

080059dc <_cleanup_r>:
 80059dc:	4901      	ldr	r1, [pc, #4]	; (80059e4 <_cleanup_r+0x8>)
 80059de:	f000 bb33 	b.w	8006048 <_fwalk>
 80059e2:	bf00      	nop
 80059e4:	08007325 	.word	0x08007325

080059e8 <__sfmoreglue>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	1e4b      	subs	r3, r1, #1
 80059ec:	2568      	movs	r5, #104	; 0x68
 80059ee:	435d      	muls	r5, r3
 80059f0:	460e      	mov	r6, r1
 80059f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80059f6:	f000 fbbd 	bl	8006174 <_malloc_r>
 80059fa:	4604      	mov	r4, r0
 80059fc:	b140      	cbz	r0, 8005a10 <__sfmoreglue+0x28>
 80059fe:	2100      	movs	r1, #0
 8005a00:	e880 0042 	stmia.w	r0, {r1, r6}
 8005a04:	300c      	adds	r0, #12
 8005a06:	60a0      	str	r0, [r4, #8]
 8005a08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005a0c:	f7fd fff9 	bl	8003a02 <memset>
 8005a10:	4620      	mov	r0, r4
 8005a12:	bd70      	pop	{r4, r5, r6, pc}

08005a14 <__sinit>:
 8005a14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	6983      	ldr	r3, [r0, #24]
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d171      	bne.n	8005b04 <__sinit+0xf0>
 8005a20:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 8005a24:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 8005a28:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 8005a2c:	4b36      	ldr	r3, [pc, #216]	; (8005b08 <__sinit+0xf4>)
 8005a2e:	4a37      	ldr	r2, [pc, #220]	; (8005b0c <__sinit+0xf8>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6282      	str	r2, [r0, #40]	; 0x28
 8005a34:	4298      	cmp	r0, r3
 8005a36:	bf04      	itt	eq
 8005a38:	2301      	moveq	r3, #1
 8005a3a:	6183      	streq	r3, [r0, #24]
 8005a3c:	f000 f870 	bl	8005b20 <__sfp>
 8005a40:	6068      	str	r0, [r5, #4]
 8005a42:	4628      	mov	r0, r5
 8005a44:	f000 f86c 	bl	8005b20 <__sfp>
 8005a48:	60a8      	str	r0, [r5, #8]
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	f000 f868 	bl	8005b20 <__sfp>
 8005a50:	686e      	ldr	r6, [r5, #4]
 8005a52:	60e8      	str	r0, [r5, #12]
 8005a54:	2400      	movs	r4, #0
 8005a56:	2304      	movs	r3, #4
 8005a58:	81b3      	strh	r3, [r6, #12]
 8005a5a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005b14 <__sinit+0x100>
 8005a5e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8005b18 <__sinit+0x104>
 8005a62:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8005b1c <__sinit+0x108>
 8005a66:	4f2a      	ldr	r7, [pc, #168]	; (8005b10 <__sinit+0xfc>)
 8005a68:	6034      	str	r4, [r6, #0]
 8005a6a:	6074      	str	r4, [r6, #4]
 8005a6c:	60b4      	str	r4, [r6, #8]
 8005a6e:	6674      	str	r4, [r6, #100]	; 0x64
 8005a70:	81f4      	strh	r4, [r6, #14]
 8005a72:	6134      	str	r4, [r6, #16]
 8005a74:	6174      	str	r4, [r6, #20]
 8005a76:	61b4      	str	r4, [r6, #24]
 8005a78:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8005a7c:	4621      	mov	r1, r4
 8005a7e:	2208      	movs	r2, #8
 8005a80:	f7fd ffbf 	bl	8003a02 <memset>
 8005a84:	6236      	str	r6, [r6, #32]
 8005a86:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8005a8a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8005a8e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8005a92:	6337      	str	r7, [r6, #48]	; 0x30
 8005a94:	68ae      	ldr	r6, [r5, #8]
 8005a96:	2309      	movs	r3, #9
 8005a98:	f04f 0b01 	mov.w	fp, #1
 8005a9c:	81b3      	strh	r3, [r6, #12]
 8005a9e:	6034      	str	r4, [r6, #0]
 8005aa0:	6074      	str	r4, [r6, #4]
 8005aa2:	60b4      	str	r4, [r6, #8]
 8005aa4:	6674      	str	r4, [r6, #100]	; 0x64
 8005aa6:	f8a6 b00e 	strh.w	fp, [r6, #14]
 8005aaa:	6134      	str	r4, [r6, #16]
 8005aac:	6174      	str	r4, [r6, #20]
 8005aae:	61b4      	str	r4, [r6, #24]
 8005ab0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	2208      	movs	r2, #8
 8005ab8:	f7fd ffa3 	bl	8003a02 <memset>
 8005abc:	6236      	str	r6, [r6, #32]
 8005abe:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8005ac2:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8005ac6:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8005aca:	6337      	str	r7, [r6, #48]	; 0x30
 8005acc:	68ee      	ldr	r6, [r5, #12]
 8005ace:	2312      	movs	r3, #18
 8005ad0:	81b3      	strh	r3, [r6, #12]
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	6034      	str	r4, [r6, #0]
 8005ad6:	6074      	str	r4, [r6, #4]
 8005ad8:	60b4      	str	r4, [r6, #8]
 8005ada:	6674      	str	r4, [r6, #100]	; 0x64
 8005adc:	81f3      	strh	r3, [r6, #14]
 8005ade:	6134      	str	r4, [r6, #16]
 8005ae0:	6174      	str	r4, [r6, #20]
 8005ae2:	61b4      	str	r4, [r6, #24]
 8005ae4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8005ae8:	4621      	mov	r1, r4
 8005aea:	2208      	movs	r2, #8
 8005aec:	f7fd ff89 	bl	8003a02 <memset>
 8005af0:	6236      	str	r6, [r6, #32]
 8005af2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8005af6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8005afa:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8005afe:	6337      	str	r7, [r6, #48]	; 0x30
 8005b00:	f8c5 b018 	str.w	fp, [r5, #24]
 8005b04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b08:	080077a4 	.word	0x080077a4
 8005b0c:	080059dd 	.word	0x080059dd
 8005b10:	0800705f 	.word	0x0800705f
 8005b14:	08006fe1 	.word	0x08006fe1
 8005b18:	08007003 	.word	0x08007003
 8005b1c:	0800703b 	.word	0x0800703b

08005b20 <__sfp>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <__sfp+0x70>)
 8005b24:	681e      	ldr	r6, [r3, #0]
 8005b26:	69b3      	ldr	r3, [r6, #24]
 8005b28:	4607      	mov	r7, r0
 8005b2a:	b913      	cbnz	r3, 8005b32 <__sfp+0x12>
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff ff71 	bl	8005a14 <__sinit>
 8005b32:	36d8      	adds	r6, #216	; 0xd8
 8005b34:	68b4      	ldr	r4, [r6, #8]
 8005b36:	6873      	ldr	r3, [r6, #4]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	d404      	bmi.n	8005b46 <__sfp+0x26>
 8005b3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005b40:	b175      	cbz	r5, 8005b60 <__sfp+0x40>
 8005b42:	3468      	adds	r4, #104	; 0x68
 8005b44:	e7f8      	b.n	8005b38 <__sfp+0x18>
 8005b46:	6833      	ldr	r3, [r6, #0]
 8005b48:	b92b      	cbnz	r3, 8005b56 <__sfp+0x36>
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	2104      	movs	r1, #4
 8005b4e:	f7ff ff4b 	bl	80059e8 <__sfmoreglue>
 8005b52:	6030      	str	r0, [r6, #0]
 8005b54:	b108      	cbz	r0, 8005b5a <__sfp+0x3a>
 8005b56:	6836      	ldr	r6, [r6, #0]
 8005b58:	e7ec      	b.n	8005b34 <__sfp+0x14>
 8005b5a:	230c      	movs	r3, #12
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b64:	81e3      	strh	r3, [r4, #14]
 8005b66:	2301      	movs	r3, #1
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8005b6c:	6025      	str	r5, [r4, #0]
 8005b6e:	60a5      	str	r5, [r4, #8]
 8005b70:	6065      	str	r5, [r4, #4]
 8005b72:	6125      	str	r5, [r4, #16]
 8005b74:	6165      	str	r5, [r4, #20]
 8005b76:	61a5      	str	r5, [r4, #24]
 8005b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	2208      	movs	r2, #8
 8005b80:	f7fd ff3f 	bl	8003a02 <memset>
 8005b84:	6365      	str	r5, [r4, #52]	; 0x34
 8005b86:	63a5      	str	r5, [r4, #56]	; 0x38
 8005b88:	64a5      	str	r5, [r4, #72]	; 0x48
 8005b8a:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b90:	080077a4 	.word	0x080077a4

08005b94 <__sfp_lock_acquire>:
 8005b94:	4770      	bx	lr

08005b96 <__sfp_lock_release>:
 8005b96:	4770      	bx	lr

08005b98 <_malloc_trim_r>:
 8005b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b9c:	4d24      	ldr	r5, [pc, #144]	; (8005c30 <_malloc_trim_r+0x98>)
 8005b9e:	4f25      	ldr	r7, [pc, #148]	; (8005c34 <_malloc_trim_r+0x9c>)
 8005ba0:	460e      	mov	r6, r1
 8005ba2:	4604      	mov	r4, r0
 8005ba4:	f000 fd22 	bl	80065ec <__malloc_lock>
 8005ba8:	68ab      	ldr	r3, [r5, #8]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f023 0803 	bic.w	r8, r3, #3
 8005bb0:	f1a7 0311 	sub.w	r3, r7, #17
 8005bb4:	4443      	add	r3, r8
 8005bb6:	1b9e      	subs	r6, r3, r6
 8005bb8:	fbb6 f6f7 	udiv	r6, r6, r7
 8005bbc:	3e01      	subs	r6, #1
 8005bbe:	437e      	muls	r6, r7
 8005bc0:	42be      	cmp	r6, r7
 8005bc2:	da05      	bge.n	8005bd0 <_malloc_trim_r+0x38>
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 fd12 	bl	80065ee <__malloc_unlock>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	f001 f9f4 	bl	8006fc0 <_sbrk_r>
 8005bd8:	68ab      	ldr	r3, [r5, #8]
 8005bda:	4443      	add	r3, r8
 8005bdc:	4298      	cmp	r0, r3
 8005bde:	d1f1      	bne.n	8005bc4 <_malloc_trim_r+0x2c>
 8005be0:	4620      	mov	r0, r4
 8005be2:	4271      	negs	r1, r6
 8005be4:	f001 f9ec 	bl	8006fc0 <_sbrk_r>
 8005be8:	3001      	adds	r0, #1
 8005bea:	d110      	bne.n	8005c0e <_malloc_trim_r+0x76>
 8005bec:	4620      	mov	r0, r4
 8005bee:	2100      	movs	r1, #0
 8005bf0:	f001 f9e6 	bl	8006fc0 <_sbrk_r>
 8005bf4:	68ab      	ldr	r3, [r5, #8]
 8005bf6:	1ac2      	subs	r2, r0, r3
 8005bf8:	2a0f      	cmp	r2, #15
 8005bfa:	dde3      	ble.n	8005bc4 <_malloc_trim_r+0x2c>
 8005bfc:	490e      	ldr	r1, [pc, #56]	; (8005c38 <_malloc_trim_r+0xa0>)
 8005bfe:	6809      	ldr	r1, [r1, #0]
 8005c00:	1a40      	subs	r0, r0, r1
 8005c02:	490e      	ldr	r1, [pc, #56]	; (8005c3c <_malloc_trim_r+0xa4>)
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	6008      	str	r0, [r1, #0]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	e7da      	b.n	8005bc4 <_malloc_trim_r+0x2c>
 8005c0e:	68ab      	ldr	r3, [r5, #8]
 8005c10:	ebc6 0808 	rsb	r8, r6, r8
 8005c14:	f048 0201 	orr.w	r2, r8, #1
 8005c18:	605a      	str	r2, [r3, #4]
 8005c1a:	4b08      	ldr	r3, [pc, #32]	; (8005c3c <_malloc_trim_r+0xa4>)
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	4620      	mov	r0, r4
 8005c20:	1b96      	subs	r6, r2, r6
 8005c22:	601e      	str	r6, [r3, #0]
 8005c24:	f000 fce3 	bl	80065ee <__malloc_unlock>
 8005c28:	2001      	movs	r0, #1
 8005c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000160 	.word	0x20000160
 8005c34:	00001000 	.word	0x00001000
 8005c38:	2000056c 	.word	0x2000056c
 8005c3c:	20000988 	.word	0x20000988

08005c40 <_free_r>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	4606      	mov	r6, r0
 8005c44:	460d      	mov	r5, r1
 8005c46:	2900      	cmp	r1, #0
 8005c48:	f000 80a9 	beq.w	8005d9e <_free_r+0x15e>
 8005c4c:	f000 fcce 	bl	80065ec <__malloc_lock>
 8005c50:	f855 cc04 	ldr.w	ip, [r5, #-4]
 8005c54:	4c52      	ldr	r4, [pc, #328]	; (8005da0 <_free_r+0x160>)
 8005c56:	f1a5 0308 	sub.w	r3, r5, #8
 8005c5a:	f02c 0201 	bic.w	r2, ip, #1
 8005c5e:	1898      	adds	r0, r3, r2
 8005c60:	68a1      	ldr	r1, [r4, #8]
 8005c62:	6847      	ldr	r7, [r0, #4]
 8005c64:	4288      	cmp	r0, r1
 8005c66:	f027 0703 	bic.w	r7, r7, #3
 8005c6a:	f00c 0101 	and.w	r1, ip, #1
 8005c6e:	d11b      	bne.n	8005ca8 <_free_r+0x68>
 8005c70:	443a      	add	r2, r7
 8005c72:	b939      	cbnz	r1, 8005c84 <_free_r+0x44>
 8005c74:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8005c78:	1a5b      	subs	r3, r3, r1
 8005c7a:	440a      	add	r2, r1
 8005c7c:	6898      	ldr	r0, [r3, #8]
 8005c7e:	68d9      	ldr	r1, [r3, #12]
 8005c80:	60c1      	str	r1, [r0, #12]
 8005c82:	6088      	str	r0, [r1, #8]
 8005c84:	f042 0101 	orr.w	r1, r2, #1
 8005c88:	6059      	str	r1, [r3, #4]
 8005c8a:	60a3      	str	r3, [r4, #8]
 8005c8c:	4b45      	ldr	r3, [pc, #276]	; (8005da4 <_free_r+0x164>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d304      	bcc.n	8005c9e <_free_r+0x5e>
 8005c94:	4b44      	ldr	r3, [pc, #272]	; (8005da8 <_free_r+0x168>)
 8005c96:	4630      	mov	r0, r6
 8005c98:	6819      	ldr	r1, [r3, #0]
 8005c9a:	f7ff ff7d 	bl	8005b98 <_malloc_trim_r>
 8005c9e:	4630      	mov	r0, r6
 8005ca0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ca4:	f000 bca3 	b.w	80065ee <__malloc_unlock>
 8005ca8:	6047      	str	r7, [r0, #4]
 8005caa:	b979      	cbnz	r1, 8005ccc <_free_r+0x8c>
 8005cac:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8005cb0:	1b5b      	subs	r3, r3, r5
 8005cb2:	442a      	add	r2, r5
 8005cb4:	689d      	ldr	r5, [r3, #8]
 8005cb6:	f104 0c08 	add.w	ip, r4, #8
 8005cba:	4565      	cmp	r5, ip
 8005cbc:	d008      	beq.n	8005cd0 <_free_r+0x90>
 8005cbe:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005cc2:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005cc6:	f8cc 5008 	str.w	r5, [ip, #8]
 8005cca:	e002      	b.n	8005cd2 <_free_r+0x92>
 8005ccc:	2100      	movs	r1, #0
 8005cce:	e000      	b.n	8005cd2 <_free_r+0x92>
 8005cd0:	2101      	movs	r1, #1
 8005cd2:	19c5      	adds	r5, r0, r7
 8005cd4:	686d      	ldr	r5, [r5, #4]
 8005cd6:	07ed      	lsls	r5, r5, #31
 8005cd8:	d40e      	bmi.n	8005cf8 <_free_r+0xb8>
 8005cda:	443a      	add	r2, r7
 8005cdc:	6885      	ldr	r5, [r0, #8]
 8005cde:	b941      	cbnz	r1, 8005cf2 <_free_r+0xb2>
 8005ce0:	4f32      	ldr	r7, [pc, #200]	; (8005dac <_free_r+0x16c>)
 8005ce2:	42bd      	cmp	r5, r7
 8005ce4:	d105      	bne.n	8005cf2 <_free_r+0xb2>
 8005ce6:	6163      	str	r3, [r4, #20]
 8005ce8:	6123      	str	r3, [r4, #16]
 8005cea:	2101      	movs	r1, #1
 8005cec:	60dd      	str	r5, [r3, #12]
 8005cee:	609d      	str	r5, [r3, #8]
 8005cf0:	e002      	b.n	8005cf8 <_free_r+0xb8>
 8005cf2:	68c0      	ldr	r0, [r0, #12]
 8005cf4:	60e8      	str	r0, [r5, #12]
 8005cf6:	6085      	str	r5, [r0, #8]
 8005cf8:	f042 0001 	orr.w	r0, r2, #1
 8005cfc:	6058      	str	r0, [r3, #4]
 8005cfe:	509a      	str	r2, [r3, r2]
 8005d00:	2900      	cmp	r1, #0
 8005d02:	d1cc      	bne.n	8005c9e <_free_r+0x5e>
 8005d04:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005d08:	d20e      	bcs.n	8005d28 <_free_r+0xe8>
 8005d0a:	08d2      	lsrs	r2, r2, #3
 8005d0c:	1091      	asrs	r1, r2, #2
 8005d0e:	2001      	movs	r0, #1
 8005d10:	4088      	lsls	r0, r1
 8005d12:	6861      	ldr	r1, [r4, #4]
 8005d14:	4301      	orrs	r1, r0
 8005d16:	6061      	str	r1, [r4, #4]
 8005d18:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8005d1c:	68a2      	ldr	r2, [r4, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
 8005d20:	60dc      	str	r4, [r3, #12]
 8005d22:	60a3      	str	r3, [r4, #8]
 8005d24:	60d3      	str	r3, [r2, #12]
 8005d26:	e7ba      	b.n	8005c9e <_free_r+0x5e>
 8005d28:	0a51      	lsrs	r1, r2, #9
 8005d2a:	2904      	cmp	r1, #4
 8005d2c:	d802      	bhi.n	8005d34 <_free_r+0xf4>
 8005d2e:	0991      	lsrs	r1, r2, #6
 8005d30:	3138      	adds	r1, #56	; 0x38
 8005d32:	e015      	b.n	8005d60 <_free_r+0x120>
 8005d34:	2914      	cmp	r1, #20
 8005d36:	d801      	bhi.n	8005d3c <_free_r+0xfc>
 8005d38:	315b      	adds	r1, #91	; 0x5b
 8005d3a:	e011      	b.n	8005d60 <_free_r+0x120>
 8005d3c:	2954      	cmp	r1, #84	; 0x54
 8005d3e:	d802      	bhi.n	8005d46 <_free_r+0x106>
 8005d40:	0b11      	lsrs	r1, r2, #12
 8005d42:	316e      	adds	r1, #110	; 0x6e
 8005d44:	e00c      	b.n	8005d60 <_free_r+0x120>
 8005d46:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 8005d4a:	d802      	bhi.n	8005d52 <_free_r+0x112>
 8005d4c:	0bd1      	lsrs	r1, r2, #15
 8005d4e:	3177      	adds	r1, #119	; 0x77
 8005d50:	e006      	b.n	8005d60 <_free_r+0x120>
 8005d52:	f240 5054 	movw	r0, #1364	; 0x554
 8005d56:	4281      	cmp	r1, r0
 8005d58:	bf9a      	itte	ls
 8005d5a:	0c91      	lsrls	r1, r2, #18
 8005d5c:	317c      	addls	r1, #124	; 0x7c
 8005d5e:	217e      	movhi	r1, #126	; 0x7e
 8005d60:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 8005d64:	480e      	ldr	r0, [pc, #56]	; (8005da0 <_free_r+0x160>)
 8005d66:	68a5      	ldr	r5, [r4, #8]
 8005d68:	42a5      	cmp	r5, r4
 8005d6a:	d001      	beq.n	8005d70 <_free_r+0x130>
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	e00b      	b.n	8005d88 <_free_r+0x148>
 8005d70:	2201      	movs	r2, #1
 8005d72:	1089      	asrs	r1, r1, #2
 8005d74:	fa02 f101 	lsl.w	r1, r2, r1
 8005d78:	6842      	ldr	r2, [r0, #4]
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	6042      	str	r2, [r0, #4]
 8005d7e:	4629      	mov	r1, r5
 8005d80:	e008      	b.n	8005d94 <_free_r+0x154>
 8005d82:	6889      	ldr	r1, [r1, #8]
 8005d84:	42a1      	cmp	r1, r4
 8005d86:	d004      	beq.n	8005d92 <_free_r+0x152>
 8005d88:	6848      	ldr	r0, [r1, #4]
 8005d8a:	f020 0003 	bic.w	r0, r0, #3
 8005d8e:	4282      	cmp	r2, r0
 8005d90:	d3f7      	bcc.n	8005d82 <_free_r+0x142>
 8005d92:	68cd      	ldr	r5, [r1, #12]
 8005d94:	60dd      	str	r5, [r3, #12]
 8005d96:	6099      	str	r1, [r3, #8]
 8005d98:	60ab      	str	r3, [r5, #8]
 8005d9a:	60cb      	str	r3, [r1, #12]
 8005d9c:	e77f      	b.n	8005c9e <_free_r+0x5e>
 8005d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005da0:	20000160 	.word	0x20000160
 8005da4:	20000568 	.word	0x20000568
 8005da8:	20000984 	.word	0x20000984
 8005dac:	20000168 	.word	0x20000168

08005db0 <__sfvwrite_r>:
 8005db0:	6893      	ldr	r3, [r2, #8]
 8005db2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db6:	4680      	mov	r8, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	4691      	mov	r9, r2
 8005dbc:	b90b      	cbnz	r3, 8005dc2 <__sfvwrite_r+0x12>
 8005dbe:	2000      	movs	r0, #0
 8005dc0:	e13c      	b.n	800603c <__sfvwrite_r+0x28c>
 8005dc2:	898b      	ldrh	r3, [r1, #12]
 8005dc4:	0718      	lsls	r0, r3, #28
 8005dc6:	d50e      	bpl.n	8005de6 <__sfvwrite_r+0x36>
 8005dc8:	690b      	ldr	r3, [r1, #16]
 8005dca:	b163      	cbz	r3, 8005de6 <__sfvwrite_r+0x36>
 8005dcc:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8005dd0:	f8d9 6000 	ldr.w	r6, [r9]
 8005dd4:	f00a 0c02 	and.w	ip, sl, #2
 8005dd8:	fa1f f38c 	uxth.w	r3, ip
 8005ddc:	b333      	cbz	r3, 8005e2c <__sfvwrite_r+0x7c>
 8005dde:	f04f 0a00 	mov.w	sl, #0
 8005de2:	4657      	mov	r7, sl
 8005de4:	e01b      	b.n	8005e1e <__sfvwrite_r+0x6e>
 8005de6:	4640      	mov	r0, r8
 8005de8:	4621      	mov	r1, r4
 8005dea:	f7fe fe8b 	bl	8004b04 <__swsetup_r>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d0ec      	beq.n	8005dcc <__sfvwrite_r+0x1c>
 8005df2:	e121      	b.n	8006038 <__sfvwrite_r+0x288>
 8005df4:	4b93      	ldr	r3, [pc, #588]	; (8006044 <__sfvwrite_r+0x294>)
 8005df6:	6a21      	ldr	r1, [r4, #32]
 8005df8:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005dfa:	429f      	cmp	r7, r3
 8005dfc:	bf38      	it	cc
 8005dfe:	463b      	movcc	r3, r7
 8005e00:	4640      	mov	r0, r8
 8005e02:	4652      	mov	r2, sl
 8005e04:	47a8      	blx	r5
 8005e06:	2800      	cmp	r0, #0
 8005e08:	f340 8112 	ble.w	8006030 <__sfvwrite_r+0x280>
 8005e0c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005e10:	4482      	add	sl, r0
 8005e12:	1a3f      	subs	r7, r7, r0
 8005e14:	1a18      	subs	r0, r3, r0
 8005e16:	f8c9 0008 	str.w	r0, [r9, #8]
 8005e1a:	2800      	cmp	r0, #0
 8005e1c:	d0cf      	beq.n	8005dbe <__sfvwrite_r+0xe>
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	d1e8      	bne.n	8005df4 <__sfvwrite_r+0x44>
 8005e22:	f8d6 a000 	ldr.w	sl, [r6]
 8005e26:	6877      	ldr	r7, [r6, #4]
 8005e28:	3608      	adds	r6, #8
 8005e2a:	e7f8      	b.n	8005e1e <__sfvwrite_r+0x6e>
 8005e2c:	f01a 0a01 	ands.w	sl, sl, #1
 8005e30:	d004      	beq.n	8005e3c <__sfvwrite_r+0x8c>
 8005e32:	469b      	mov	fp, r3
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	461f      	mov	r7, r3
 8005e38:	469a      	mov	sl, r3
 8005e3a:	e0bf      	b.n	8005fbc <__sfvwrite_r+0x20c>
 8005e3c:	4655      	mov	r5, sl
 8005e3e:	b925      	cbnz	r5, 8005e4a <__sfvwrite_r+0x9a>
 8005e40:	f8d6 a000 	ldr.w	sl, [r6]
 8005e44:	6875      	ldr	r5, [r6, #4]
 8005e46:	3608      	adds	r6, #8
 8005e48:	e7f9      	b.n	8005e3e <__sfvwrite_r+0x8e>
 8005e4a:	89a2      	ldrh	r2, [r4, #12]
 8005e4c:	68a7      	ldr	r7, [r4, #8]
 8005e4e:	0591      	lsls	r1, r2, #22
 8005e50:	d552      	bpl.n	8005ef8 <__sfvwrite_r+0x148>
 8005e52:	42bd      	cmp	r5, r7
 8005e54:	d342      	bcc.n	8005edc <__sfvwrite_r+0x12c>
 8005e56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e5a:	d03d      	beq.n	8005ed8 <__sfvwrite_r+0x128>
 8005e5c:	6921      	ldr	r1, [r4, #16]
 8005e5e:	6823      	ldr	r3, [r4, #0]
 8005e60:	1a5b      	subs	r3, r3, r1
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	6963      	ldr	r3, [r4, #20]
 8005e66:	2002      	movs	r0, #2
 8005e68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005e6c:	fb93 fbf0 	sdiv	fp, r3, r0
 8005e70:	9b01      	ldr	r3, [sp, #4]
 8005e72:	1c58      	adds	r0, r3, #1
 8005e74:	4428      	add	r0, r5
 8005e76:	4583      	cmp	fp, r0
 8005e78:	bf38      	it	cc
 8005e7a:	4683      	movcc	fp, r0
 8005e7c:	0553      	lsls	r3, r2, #21
 8005e7e:	4640      	mov	r0, r8
 8005e80:	d50f      	bpl.n	8005ea2 <__sfvwrite_r+0xf2>
 8005e82:	4659      	mov	r1, fp
 8005e84:	f000 f976 	bl	8006174 <_malloc_r>
 8005e88:	4607      	mov	r7, r0
 8005e8a:	b1b8      	cbz	r0, 8005ebc <__sfvwrite_r+0x10c>
 8005e8c:	9a01      	ldr	r2, [sp, #4]
 8005e8e:	6921      	ldr	r1, [r4, #16]
 8005e90:	f7fd fdae 	bl	80039f0 <memcpy>
 8005e94:	89a2      	ldrh	r2, [r4, #12]
 8005e96:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005e9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e9e:	81a2      	strh	r2, [r4, #12]
 8005ea0:	e010      	b.n	8005ec4 <__sfvwrite_r+0x114>
 8005ea2:	465a      	mov	r2, fp
 8005ea4:	f000 fec0 	bl	8006c28 <_realloc_r>
 8005ea8:	4607      	mov	r7, r0
 8005eaa:	b958      	cbnz	r0, 8005ec4 <__sfvwrite_r+0x114>
 8005eac:	4640      	mov	r0, r8
 8005eae:	6921      	ldr	r1, [r4, #16]
 8005eb0:	f7ff fec6 	bl	8005c40 <_free_r>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	230c      	movs	r3, #12
 8005ebe:	f8c8 3000 	str.w	r3, [r8]
 8005ec2:	e0b5      	b.n	8006030 <__sfvwrite_r+0x280>
 8005ec4:	9b01      	ldr	r3, [sp, #4]
 8005ec6:	6127      	str	r7, [r4, #16]
 8005ec8:	441f      	add	r7, r3
 8005eca:	ebc3 030b 	rsb	r3, r3, fp
 8005ece:	6027      	str	r7, [r4, #0]
 8005ed0:	f8c4 b014 	str.w	fp, [r4, #20]
 8005ed4:	462f      	mov	r7, r5
 8005ed6:	60a3      	str	r3, [r4, #8]
 8005ed8:	42bd      	cmp	r5, r7
 8005eda:	d200      	bcs.n	8005ede <__sfvwrite_r+0x12e>
 8005edc:	462f      	mov	r7, r5
 8005ede:	463a      	mov	r2, r7
 8005ee0:	6820      	ldr	r0, [r4, #0]
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	f000 fb67 	bl	80065b6 <memmove>
 8005ee8:	68a3      	ldr	r3, [r4, #8]
 8005eea:	1bdb      	subs	r3, r3, r7
 8005eec:	60a3      	str	r3, [r4, #8]
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	441f      	add	r7, r3
 8005ef2:	6027      	str	r7, [r4, #0]
 8005ef4:	462f      	mov	r7, r5
 8005ef6:	e02a      	b.n	8005f4e <__sfvwrite_r+0x19e>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	4298      	cmp	r0, r3
 8005efe:	d802      	bhi.n	8005f06 <__sfvwrite_r+0x156>
 8005f00:	6963      	ldr	r3, [r4, #20]
 8005f02:	429d      	cmp	r5, r3
 8005f04:	d213      	bcs.n	8005f2e <__sfvwrite_r+0x17e>
 8005f06:	42bd      	cmp	r5, r7
 8005f08:	bf38      	it	cc
 8005f0a:	462f      	movcc	r7, r5
 8005f0c:	463a      	mov	r2, r7
 8005f0e:	4651      	mov	r1, sl
 8005f10:	f000 fb51 	bl	80065b6 <memmove>
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	6822      	ldr	r2, [r4, #0]
 8005f18:	1bdb      	subs	r3, r3, r7
 8005f1a:	443a      	add	r2, r7
 8005f1c:	60a3      	str	r3, [r4, #8]
 8005f1e:	6022      	str	r2, [r4, #0]
 8005f20:	b9ab      	cbnz	r3, 8005f4e <__sfvwrite_r+0x19e>
 8005f22:	4640      	mov	r0, r8
 8005f24:	4621      	mov	r1, r4
 8005f26:	f7ff fd2f 	bl	8005988 <_fflush_r>
 8005f2a:	b180      	cbz	r0, 8005f4e <__sfvwrite_r+0x19e>
 8005f2c:	e080      	b.n	8006030 <__sfvwrite_r+0x280>
 8005f2e:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
 8005f32:	4575      	cmp	r5, lr
 8005f34:	bf38      	it	cc
 8005f36:	46ae      	movcc	lr, r5
 8005f38:	fb9e fef3 	sdiv	lr, lr, r3
 8005f3c:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8005f3e:	6a21      	ldr	r1, [r4, #32]
 8005f40:	4640      	mov	r0, r8
 8005f42:	4652      	mov	r2, sl
 8005f44:	fb03 f30e 	mul.w	r3, r3, lr
 8005f48:	47b8      	blx	r7
 8005f4a:	1e07      	subs	r7, r0, #0
 8005f4c:	dd70      	ble.n	8006030 <__sfvwrite_r+0x280>
 8005f4e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005f52:	44ba      	add	sl, r7
 8005f54:	1bed      	subs	r5, r5, r7
 8005f56:	1bdf      	subs	r7, r3, r7
 8005f58:	f8c9 7008 	str.w	r7, [r9, #8]
 8005f5c:	2f00      	cmp	r7, #0
 8005f5e:	f47f af6e 	bne.w	8005e3e <__sfvwrite_r+0x8e>
 8005f62:	e72c      	b.n	8005dbe <__sfvwrite_r+0xe>
 8005f64:	9d01      	ldr	r5, [sp, #4]
 8005f66:	2d00      	cmp	r5, #0
 8005f68:	d031      	beq.n	8005fce <__sfvwrite_r+0x21e>
 8005f6a:	6820      	ldr	r0, [r4, #0]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	68a5      	ldr	r5, [r4, #8]
 8005f70:	f8d4 e014 	ldr.w	lr, [r4, #20]
 8005f74:	45d3      	cmp	fp, sl
 8005f76:	bf34      	ite	cc
 8005f78:	465b      	movcc	r3, fp
 8005f7a:	4653      	movcs	r3, sl
 8005f7c:	4290      	cmp	r0, r2
 8005f7e:	d936      	bls.n	8005fee <__sfvwrite_r+0x23e>
 8005f80:	4475      	add	r5, lr
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	dd33      	ble.n	8005fee <__sfvwrite_r+0x23e>
 8005f86:	4639      	mov	r1, r7
 8005f88:	462a      	mov	r2, r5
 8005f8a:	f000 fb14 	bl	80065b6 <memmove>
 8005f8e:	6823      	ldr	r3, [r4, #0]
 8005f90:	442b      	add	r3, r5
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	4640      	mov	r0, r8
 8005f96:	4621      	mov	r1, r4
 8005f98:	f7ff fcf6 	bl	8005988 <_fflush_r>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d147      	bne.n	8006030 <__sfvwrite_r+0x280>
 8005fa0:	ebbb 0b05 	subs.w	fp, fp, r5
 8005fa4:	d03c      	beq.n	8006020 <__sfvwrite_r+0x270>
 8005fa6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005faa:	442f      	add	r7, r5
 8005fac:	ebc5 0a0a 	rsb	sl, r5, sl
 8005fb0:	1b5d      	subs	r5, r3, r5
 8005fb2:	f8c9 5008 	str.w	r5, [r9, #8]
 8005fb6:	2d00      	cmp	r5, #0
 8005fb8:	f43f af01 	beq.w	8005dbe <__sfvwrite_r+0xe>
 8005fbc:	f1ba 0f00 	cmp.w	sl, #0
 8005fc0:	d1d0      	bne.n	8005f64 <__sfvwrite_r+0x1b4>
 8005fc2:	2500      	movs	r5, #0
 8005fc4:	e896 0480 	ldmia.w	r6, {r7, sl}
 8005fc8:	9501      	str	r5, [sp, #4]
 8005fca:	3608      	adds	r6, #8
 8005fcc:	e7f6      	b.n	8005fbc <__sfvwrite_r+0x20c>
 8005fce:	4638      	mov	r0, r7
 8005fd0:	210a      	movs	r1, #10
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	f000 fae0 	bl	8006598 <memchr>
 8005fd8:	b120      	cbz	r0, 8005fe4 <__sfvwrite_r+0x234>
 8005fda:	f100 0c01 	add.w	ip, r0, #1
 8005fde:	ebc7 0b0c 	rsb	fp, r7, ip
 8005fe2:	e001      	b.n	8005fe8 <__sfvwrite_r+0x238>
 8005fe4:	f10a 0b01 	add.w	fp, sl, #1
 8005fe8:	2501      	movs	r5, #1
 8005fea:	9501      	str	r5, [sp, #4]
 8005fec:	e7bd      	b.n	8005f6a <__sfvwrite_r+0x1ba>
 8005fee:	4573      	cmp	r3, lr
 8005ff0:	db08      	blt.n	8006004 <__sfvwrite_r+0x254>
 8005ff2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005ff4:	6a21      	ldr	r1, [r4, #32]
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	463a      	mov	r2, r7
 8005ffa:	4673      	mov	r3, lr
 8005ffc:	47a8      	blx	r5
 8005ffe:	1e05      	subs	r5, r0, #0
 8006000:	dcce      	bgt.n	8005fa0 <__sfvwrite_r+0x1f0>
 8006002:	e015      	b.n	8006030 <__sfvwrite_r+0x280>
 8006004:	461a      	mov	r2, r3
 8006006:	4639      	mov	r1, r7
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	f000 fad4 	bl	80065b6 <memmove>
 800600e:	9b00      	ldr	r3, [sp, #0]
 8006010:	68a2      	ldr	r2, [r4, #8]
 8006012:	1ad2      	subs	r2, r2, r3
 8006014:	60a2      	str	r2, [r4, #8]
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	441a      	add	r2, r3
 800601a:	6022      	str	r2, [r4, #0]
 800601c:	461d      	mov	r5, r3
 800601e:	e7bf      	b.n	8005fa0 <__sfvwrite_r+0x1f0>
 8006020:	4640      	mov	r0, r8
 8006022:	4621      	mov	r1, r4
 8006024:	f7ff fcb0 	bl	8005988 <_fflush_r>
 8006028:	b910      	cbnz	r0, 8006030 <__sfvwrite_r+0x280>
 800602a:	f8cd b004 	str.w	fp, [sp, #4]
 800602e:	e7ba      	b.n	8005fa6 <__sfvwrite_r+0x1f6>
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	f04f 30ff 	mov.w	r0, #4294967295
 800603c:	b003      	add	sp, #12
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	bf00      	nop
 8006044:	7ffffc00 	.word	0x7ffffc00

08006048 <_fwalk>:
 8006048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604c:	4688      	mov	r8, r1
 800604e:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8006052:	2600      	movs	r6, #0
 8006054:	b18c      	cbz	r4, 800607a <_fwalk+0x32>
 8006056:	68a5      	ldr	r5, [r4, #8]
 8006058:	6867      	ldr	r7, [r4, #4]
 800605a:	3f01      	subs	r7, #1
 800605c:	d40b      	bmi.n	8006076 <_fwalk+0x2e>
 800605e:	89ab      	ldrh	r3, [r5, #12]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d906      	bls.n	8006072 <_fwalk+0x2a>
 8006064:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006068:	3301      	adds	r3, #1
 800606a:	d002      	beq.n	8006072 <_fwalk+0x2a>
 800606c:	4628      	mov	r0, r5
 800606e:	47c0      	blx	r8
 8006070:	4306      	orrs	r6, r0
 8006072:	3568      	adds	r5, #104	; 0x68
 8006074:	e7f1      	b.n	800605a <_fwalk+0x12>
 8006076:	6824      	ldr	r4, [r4, #0]
 8006078:	e7ec      	b.n	8006054 <_fwalk+0xc>
 800607a:	4630      	mov	r0, r6
 800607c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006080 <__locale_charset>:
 8006080:	4800      	ldr	r0, [pc, #0]	; (8006084 <__locale_charset+0x4>)
 8006082:	4770      	bx	lr
 8006084:	2000013c 	.word	0x2000013c

08006088 <__locale_mb_cur_max>:
 8006088:	4b01      	ldr	r3, [pc, #4]	; (8006090 <__locale_mb_cur_max+0x8>)
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	2000015c 	.word	0x2000015c

08006094 <_localeconv_r>:
 8006094:	4800      	ldr	r0, [pc, #0]	; (8006098 <_localeconv_r+0x4>)
 8006096:	4770      	bx	lr
 8006098:	20000104 	.word	0x20000104

0800609c <__smakebuf_r>:
 800609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609e:	898b      	ldrh	r3, [r1, #12]
 80060a0:	079d      	lsls	r5, r3, #30
 80060a2:	b091      	sub	sp, #68	; 0x44
 80060a4:	4606      	mov	r6, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	d43a      	bmi.n	8006120 <__smakebuf_r+0x84>
 80060aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ae:	2900      	cmp	r1, #0
 80060b0:	da0b      	bge.n	80060ca <__smakebuf_r+0x2e>
 80060b2:	89a3      	ldrh	r3, [r4, #12]
 80060b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060bc:	bf0c      	ite	eq
 80060be:	f44f 6580 	moveq.w	r5, #1024	; 0x400
 80060c2:	2540      	movne	r5, #64	; 0x40
 80060c4:	81a3      	strh	r3, [r4, #12]
 80060c6:	2700      	movs	r7, #0
 80060c8:	e01f      	b.n	800610a <__smakebuf_r+0x6e>
 80060ca:	aa01      	add	r2, sp, #4
 80060cc:	f001 f98a 	bl	80073e4 <_fstat_r>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	dbee      	blt.n	80060b2 <__smakebuf_r+0x16>
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80060da:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 80060de:	424f      	negs	r7, r1
 80060e0:	414f      	adcs	r7, r1
 80060e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	d10a      	bne.n	8006100 <__smakebuf_r+0x64>
 80060ea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80060ec:	491b      	ldr	r1, [pc, #108]	; (800615c <__smakebuf_r+0xc0>)
 80060ee:	428a      	cmp	r2, r1
 80060f0:	d106      	bne.n	8006100 <__smakebuf_r+0x64>
 80060f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060f6:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80060fa:	81a3      	strh	r3, [r4, #12]
 80060fc:	6525      	str	r5, [r4, #80]	; 0x50
 80060fe:	e004      	b.n	800610a <__smakebuf_r+0x6e>
 8006100:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800610a:	4630      	mov	r0, r6
 800610c:	4629      	mov	r1, r5
 800610e:	f000 f831 	bl	8006174 <_malloc_r>
 8006112:	b960      	cbnz	r0, 800612e <__smakebuf_r+0x92>
 8006114:	89a3      	ldrh	r3, [r4, #12]
 8006116:	059a      	lsls	r2, r3, #22
 8006118:	d41d      	bmi.n	8006156 <__smakebuf_r+0xba>
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	81a3      	strh	r3, [r4, #12]
 8006120:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	6123      	str	r3, [r4, #16]
 8006128:	2301      	movs	r3, #1
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	e013      	b.n	8006156 <__smakebuf_r+0xba>
 800612e:	4b0c      	ldr	r3, [pc, #48]	; (8006160 <__smakebuf_r+0xc4>)
 8006130:	62b3      	str	r3, [r6, #40]	; 0x28
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	6020      	str	r0, [r4, #0]
 8006136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800613a:	81a3      	strh	r3, [r4, #12]
 800613c:	6120      	str	r0, [r4, #16]
 800613e:	6165      	str	r5, [r4, #20]
 8006140:	b14f      	cbz	r7, 8006156 <__smakebuf_r+0xba>
 8006142:	4630      	mov	r0, r6
 8006144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006148:	f001 f95e 	bl	8007408 <_isatty_r>
 800614c:	b118      	cbz	r0, 8006156 <__smakebuf_r+0xba>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	b011      	add	sp, #68	; 0x44
 8006158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800615a:	bf00      	nop
 800615c:	0800703b 	.word	0x0800703b
 8006160:	080059dd 	.word	0x080059dd

08006164 <malloc>:
 8006164:	4b02      	ldr	r3, [pc, #8]	; (8006170 <malloc+0xc>)
 8006166:	4601      	mov	r1, r0
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	f000 b803 	b.w	8006174 <_malloc_r>
 800616e:	bf00      	nop
 8006170:	20000100 	.word	0x20000100

08006174 <_malloc_r>:
 8006174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006178:	f101 040b 	add.w	r4, r1, #11
 800617c:	2c16      	cmp	r4, #22
 800617e:	b085      	sub	sp, #20
 8006180:	4607      	mov	r7, r0
 8006182:	d903      	bls.n	800618c <_malloc_r+0x18>
 8006184:	f034 0407 	bics.w	r4, r4, #7
 8006188:	d501      	bpl.n	800618e <_malloc_r+0x1a>
 800618a:	e002      	b.n	8006192 <_malloc_r+0x1e>
 800618c:	2410      	movs	r4, #16
 800618e:	428c      	cmp	r4, r1
 8006190:	d202      	bcs.n	8006198 <_malloc_r+0x24>
 8006192:	230c      	movs	r3, #12
 8006194:	603b      	str	r3, [r7, #0]
 8006196:	e1dd      	b.n	8006554 <_malloc_r+0x3e0>
 8006198:	4638      	mov	r0, r7
 800619a:	f000 fa27 	bl	80065ec <__malloc_lock>
 800619e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80061a2:	4d97      	ldr	r5, [pc, #604]	; (8006400 <_malloc_r+0x28c>)
 80061a4:	d214      	bcs.n	80061d0 <_malloc_r+0x5c>
 80061a6:	08e2      	lsrs	r2, r4, #3
 80061a8:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 80061ac:	68de      	ldr	r6, [r3, #12]
 80061ae:	429e      	cmp	r6, r3
 80061b0:	d106      	bne.n	80061c0 <_malloc_r+0x4c>
 80061b2:	f106 0308 	add.w	r3, r6, #8
 80061b6:	6976      	ldr	r6, [r6, #20]
 80061b8:	429e      	cmp	r6, r3
 80061ba:	bf08      	it	eq
 80061bc:	3202      	addeq	r2, #2
 80061be:	d043      	beq.n	8006248 <_malloc_r+0xd4>
 80061c0:	6873      	ldr	r3, [r6, #4]
 80061c2:	68f2      	ldr	r2, [r6, #12]
 80061c4:	68b1      	ldr	r1, [r6, #8]
 80061c6:	f023 0303 	bic.w	r3, r3, #3
 80061ca:	60ca      	str	r2, [r1, #12]
 80061cc:	6091      	str	r1, [r2, #8]
 80061ce:	e05d      	b.n	800628c <_malloc_r+0x118>
 80061d0:	0a62      	lsrs	r2, r4, #9
 80061d2:	d01a      	beq.n	800620a <_malloc_r+0x96>
 80061d4:	2a04      	cmp	r2, #4
 80061d6:	d802      	bhi.n	80061de <_malloc_r+0x6a>
 80061d8:	09a2      	lsrs	r2, r4, #6
 80061da:	3238      	adds	r2, #56	; 0x38
 80061dc:	e018      	b.n	8006210 <_malloc_r+0x9c>
 80061de:	2a14      	cmp	r2, #20
 80061e0:	d801      	bhi.n	80061e6 <_malloc_r+0x72>
 80061e2:	325b      	adds	r2, #91	; 0x5b
 80061e4:	e014      	b.n	8006210 <_malloc_r+0x9c>
 80061e6:	2a54      	cmp	r2, #84	; 0x54
 80061e8:	d802      	bhi.n	80061f0 <_malloc_r+0x7c>
 80061ea:	0b22      	lsrs	r2, r4, #12
 80061ec:	326e      	adds	r2, #110	; 0x6e
 80061ee:	e00f      	b.n	8006210 <_malloc_r+0x9c>
 80061f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80061f4:	d802      	bhi.n	80061fc <_malloc_r+0x88>
 80061f6:	0be2      	lsrs	r2, r4, #15
 80061f8:	3277      	adds	r2, #119	; 0x77
 80061fa:	e009      	b.n	8006210 <_malloc_r+0x9c>
 80061fc:	f240 5354 	movw	r3, #1364	; 0x554
 8006200:	429a      	cmp	r2, r3
 8006202:	d804      	bhi.n	800620e <_malloc_r+0x9a>
 8006204:	0ca2      	lsrs	r2, r4, #18
 8006206:	327c      	adds	r2, #124	; 0x7c
 8006208:	e002      	b.n	8006210 <_malloc_r+0x9c>
 800620a:	223f      	movs	r2, #63	; 0x3f
 800620c:	e000      	b.n	8006210 <_malloc_r+0x9c>
 800620e:	227e      	movs	r2, #126	; 0x7e
 8006210:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8006214:	68de      	ldr	r6, [r3, #12]
 8006216:	429e      	cmp	r6, r3
 8006218:	d015      	beq.n	8006246 <_malloc_r+0xd2>
 800621a:	6871      	ldr	r1, [r6, #4]
 800621c:	f021 0103 	bic.w	r1, r1, #3
 8006220:	1b08      	subs	r0, r1, r4
 8006222:	280f      	cmp	r0, #15
 8006224:	dd01      	ble.n	800622a <_malloc_r+0xb6>
 8006226:	3a01      	subs	r2, #1
 8006228:	e00d      	b.n	8006246 <_malloc_r+0xd2>
 800622a:	2800      	cmp	r0, #0
 800622c:	db09      	blt.n	8006242 <_malloc_r+0xce>
 800622e:	68f3      	ldr	r3, [r6, #12]
 8006230:	68b2      	ldr	r2, [r6, #8]
 8006232:	60d3      	str	r3, [r2, #12]
 8006234:	609a      	str	r2, [r3, #8]
 8006236:	1873      	adds	r3, r6, r1
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	e193      	b.n	800656a <_malloc_r+0x3f6>
 8006242:	68f6      	ldr	r6, [r6, #12]
 8006244:	e7e7      	b.n	8006216 <_malloc_r+0xa2>
 8006246:	3201      	adds	r2, #1
 8006248:	496d      	ldr	r1, [pc, #436]	; (8006400 <_malloc_r+0x28c>)
 800624a:	692e      	ldr	r6, [r5, #16]
 800624c:	f101 0008 	add.w	r0, r1, #8
 8006250:	4286      	cmp	r6, r0
 8006252:	4686      	mov	lr, r0
 8006254:	d06d      	beq.n	8006332 <_malloc_r+0x1be>
 8006256:	6873      	ldr	r3, [r6, #4]
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	ebc4 0c03 	rsb	ip, r4, r3
 8006260:	f1bc 0f0f 	cmp.w	ip, #15
 8006264:	dd0d      	ble.n	8006282 <_malloc_r+0x10e>
 8006266:	1933      	adds	r3, r6, r4
 8006268:	f04c 0201 	orr.w	r2, ip, #1
 800626c:	f044 0401 	orr.w	r4, r4, #1
 8006270:	6074      	str	r4, [r6, #4]
 8006272:	614b      	str	r3, [r1, #20]
 8006274:	610b      	str	r3, [r1, #16]
 8006276:	60d8      	str	r0, [r3, #12]
 8006278:	6098      	str	r0, [r3, #8]
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	f843 c00c 	str.w	ip, [r3, ip]
 8006280:	e173      	b.n	800656a <_malloc_r+0x3f6>
 8006282:	f1bc 0f00 	cmp.w	ip, #0
 8006286:	6148      	str	r0, [r1, #20]
 8006288:	6108      	str	r0, [r1, #16]
 800628a:	db01      	blt.n	8006290 <_malloc_r+0x11c>
 800628c:	4433      	add	r3, r6
 800628e:	e7d3      	b.n	8006238 <_malloc_r+0xc4>
 8006290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006294:	d211      	bcs.n	80062ba <_malloc_r+0x146>
 8006296:	08db      	lsrs	r3, r3, #3
 8006298:	1098      	asrs	r0, r3, #2
 800629a:	f04f 0c01 	mov.w	ip, #1
 800629e:	fa0c fc00 	lsl.w	ip, ip, r0
 80062a2:	6848      	ldr	r0, [r1, #4]
 80062a4:	ea4c 0000 	orr.w	r0, ip, r0
 80062a8:	6048      	str	r0, [r1, #4]
 80062aa:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80062ae:	688b      	ldr	r3, [r1, #8]
 80062b0:	60b3      	str	r3, [r6, #8]
 80062b2:	60f1      	str	r1, [r6, #12]
 80062b4:	608e      	str	r6, [r1, #8]
 80062b6:	60de      	str	r6, [r3, #12]
 80062b8:	e03b      	b.n	8006332 <_malloc_r+0x1be>
 80062ba:	0a58      	lsrs	r0, r3, #9
 80062bc:	2804      	cmp	r0, #4
 80062be:	d802      	bhi.n	80062c6 <_malloc_r+0x152>
 80062c0:	0998      	lsrs	r0, r3, #6
 80062c2:	3038      	adds	r0, #56	; 0x38
 80062c4:	e015      	b.n	80062f2 <_malloc_r+0x17e>
 80062c6:	2814      	cmp	r0, #20
 80062c8:	d801      	bhi.n	80062ce <_malloc_r+0x15a>
 80062ca:	305b      	adds	r0, #91	; 0x5b
 80062cc:	e011      	b.n	80062f2 <_malloc_r+0x17e>
 80062ce:	2854      	cmp	r0, #84	; 0x54
 80062d0:	d802      	bhi.n	80062d8 <_malloc_r+0x164>
 80062d2:	0b18      	lsrs	r0, r3, #12
 80062d4:	306e      	adds	r0, #110	; 0x6e
 80062d6:	e00c      	b.n	80062f2 <_malloc_r+0x17e>
 80062d8:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80062dc:	d802      	bhi.n	80062e4 <_malloc_r+0x170>
 80062de:	0bd8      	lsrs	r0, r3, #15
 80062e0:	3077      	adds	r0, #119	; 0x77
 80062e2:	e006      	b.n	80062f2 <_malloc_r+0x17e>
 80062e4:	f240 5154 	movw	r1, #1364	; 0x554
 80062e8:	4288      	cmp	r0, r1
 80062ea:	bf9a      	itte	ls
 80062ec:	0c98      	lsrls	r0, r3, #18
 80062ee:	307c      	addls	r0, #124	; 0x7c
 80062f0:	207e      	movhi	r0, #126	; 0x7e
 80062f2:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 80062f6:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8006400 <_malloc_r+0x28c>
 80062fa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80062fe:	4561      	cmp	r1, ip
 8006300:	d10d      	bne.n	800631e <_malloc_r+0x1aa>
 8006302:	2301      	movs	r3, #1
 8006304:	1080      	asrs	r0, r0, #2
 8006306:	fa03 f000 	lsl.w	r0, r3, r0
 800630a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800630e:	4303      	orrs	r3, r0
 8006310:	f8c8 3004 	str.w	r3, [r8, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	e008      	b.n	800632a <_malloc_r+0x1b6>
 8006318:	6889      	ldr	r1, [r1, #8]
 800631a:	4561      	cmp	r1, ip
 800631c:	d004      	beq.n	8006328 <_malloc_r+0x1b4>
 800631e:	6848      	ldr	r0, [r1, #4]
 8006320:	f020 0003 	bic.w	r0, r0, #3
 8006324:	4283      	cmp	r3, r0
 8006326:	d3f7      	bcc.n	8006318 <_malloc_r+0x1a4>
 8006328:	68cb      	ldr	r3, [r1, #12]
 800632a:	60f3      	str	r3, [r6, #12]
 800632c:	60b1      	str	r1, [r6, #8]
 800632e:	609e      	str	r6, [r3, #8]
 8006330:	60ce      	str	r6, [r1, #12]
 8006332:	2101      	movs	r1, #1
 8006334:	1093      	asrs	r3, r2, #2
 8006336:	fa01 f303 	lsl.w	r3, r1, r3
 800633a:	6869      	ldr	r1, [r5, #4]
 800633c:	428b      	cmp	r3, r1
 800633e:	d861      	bhi.n	8006404 <_malloc_r+0x290>
 8006340:	420b      	tst	r3, r1
 8006342:	d106      	bne.n	8006352 <_malloc_r+0x1de>
 8006344:	f022 0203 	bic.w	r2, r2, #3
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	420b      	tst	r3, r1
 800634c:	f102 0204 	add.w	r2, r2, #4
 8006350:	d0fa      	beq.n	8006348 <_malloc_r+0x1d4>
 8006352:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8006356:	4680      	mov	r8, r0
 8006358:	4694      	mov	ip, r2
 800635a:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800635e:	4546      	cmp	r6, r8
 8006360:	d02d      	beq.n	80063be <_malloc_r+0x24a>
 8006362:	6871      	ldr	r1, [r6, #4]
 8006364:	f021 0903 	bic.w	r9, r1, #3
 8006368:	ebc4 0109 	rsb	r1, r4, r9
 800636c:	290f      	cmp	r1, #15
 800636e:	dd13      	ble.n	8006398 <_malloc_r+0x224>
 8006370:	1933      	adds	r3, r6, r4
 8006372:	f044 0401 	orr.w	r4, r4, #1
 8006376:	68f2      	ldr	r2, [r6, #12]
 8006378:	6074      	str	r4, [r6, #4]
 800637a:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800637e:	60c2      	str	r2, [r0, #12]
 8006380:	6090      	str	r0, [r2, #8]
 8006382:	f041 0201 	orr.w	r2, r1, #1
 8006386:	616b      	str	r3, [r5, #20]
 8006388:	612b      	str	r3, [r5, #16]
 800638a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800638e:	f8c3 e008 	str.w	lr, [r3, #8]
 8006392:	605a      	str	r2, [r3, #4]
 8006394:	5059      	str	r1, [r3, r1]
 8006396:	e00c      	b.n	80063b2 <_malloc_r+0x23e>
 8006398:	2900      	cmp	r1, #0
 800639a:	db0e      	blt.n	80063ba <_malloc_r+0x246>
 800639c:	eb06 0109 	add.w	r1, r6, r9
 80063a0:	684b      	ldr	r3, [r1, #4]
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	604b      	str	r3, [r1, #4]
 80063a8:	68f3      	ldr	r3, [r6, #12]
 80063aa:	f856 2f08 	ldr.w	r2, [r6, #8]!
 80063ae:	60d3      	str	r3, [r2, #12]
 80063b0:	609a      	str	r2, [r3, #8]
 80063b2:	4638      	mov	r0, r7
 80063b4:	f000 f91b 	bl	80065ee <__malloc_unlock>
 80063b8:	e0db      	b.n	8006572 <_malloc_r+0x3fe>
 80063ba:	68f6      	ldr	r6, [r6, #12]
 80063bc:	e7cf      	b.n	800635e <_malloc_r+0x1ea>
 80063be:	f10c 0c01 	add.w	ip, ip, #1
 80063c2:	f01c 0f03 	tst.w	ip, #3
 80063c6:	f108 0808 	add.w	r8, r8, #8
 80063ca:	d1c6      	bne.n	800635a <_malloc_r+0x1e6>
 80063cc:	0791      	lsls	r1, r2, #30
 80063ce:	d104      	bne.n	80063da <_malloc_r+0x266>
 80063d0:	686a      	ldr	r2, [r5, #4]
 80063d2:	ea22 0203 	bic.w	r2, r2, r3
 80063d6:	606a      	str	r2, [r5, #4]
 80063d8:	e006      	b.n	80063e8 <_malloc_r+0x274>
 80063da:	f1a0 0108 	sub.w	r1, r0, #8
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	4288      	cmp	r0, r1
 80063e2:	f102 32ff 	add.w	r2, r2, #4294967295
 80063e6:	d0f1      	beq.n	80063cc <_malloc_r+0x258>
 80063e8:	6869      	ldr	r1, [r5, #4]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	428b      	cmp	r3, r1
 80063ee:	d809      	bhi.n	8006404 <_malloc_r+0x290>
 80063f0:	b143      	cbz	r3, 8006404 <_malloc_r+0x290>
 80063f2:	4662      	mov	r2, ip
 80063f4:	420b      	tst	r3, r1
 80063f6:	d1ac      	bne.n	8006352 <_malloc_r+0x1de>
 80063f8:	3204      	adds	r2, #4
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	e7fa      	b.n	80063f4 <_malloc_r+0x280>
 80063fe:	bf00      	nop
 8006400:	20000160 	.word	0x20000160
 8006404:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8006408:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800640c:	f023 0903 	bic.w	r9, r3, #3
 8006410:	45a1      	cmp	r9, r4
 8006412:	d304      	bcc.n	800641e <_malloc_r+0x2aa>
 8006414:	ebc4 0309 	rsb	r3, r4, r9
 8006418:	2b0f      	cmp	r3, #15
 800641a:	f300 809d 	bgt.w	8006558 <_malloc_r+0x3e4>
 800641e:	4b57      	ldr	r3, [pc, #348]	; (800657c <_malloc_r+0x408>)
 8006420:	4a57      	ldr	r2, [pc, #348]	; (8006580 <_malloc_r+0x40c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6811      	ldr	r1, [r2, #0]
 8006426:	f103 0a10 	add.w	sl, r3, #16
 800642a:	3101      	adds	r1, #1
 800642c:	eb08 0c09 	add.w	ip, r8, r9
 8006430:	44a2      	add	sl, r4
 8006432:	4b54      	ldr	r3, [pc, #336]	; (8006584 <_malloc_r+0x410>)
 8006434:	d004      	beq.n	8006440 <_malloc_r+0x2cc>
 8006436:	1e59      	subs	r1, r3, #1
 8006438:	448a      	add	sl, r1
 800643a:	4259      	negs	r1, r3
 800643c:	ea0a 0a01 	and.w	sl, sl, r1
 8006440:	4638      	mov	r0, r7
 8006442:	4651      	mov	r1, sl
 8006444:	9201      	str	r2, [sp, #4]
 8006446:	9302      	str	r3, [sp, #8]
 8006448:	f8cd c00c 	str.w	ip, [sp, #12]
 800644c:	f000 fdb8 	bl	8006fc0 <_sbrk_r>
 8006450:	1c42      	adds	r2, r0, #1
 8006452:	aa01      	add	r2, sp, #4
 8006454:	4606      	mov	r6, r0
 8006456:	e892 100c 	ldmia.w	r2, {r2, r3, ip}
 800645a:	d06e      	beq.n	800653a <_malloc_r+0x3c6>
 800645c:	4560      	cmp	r0, ip
 800645e:	d201      	bcs.n	8006464 <_malloc_r+0x2f0>
 8006460:	45a8      	cmp	r8, r5
 8006462:	d16a      	bne.n	800653a <_malloc_r+0x3c6>
 8006464:	4948      	ldr	r1, [pc, #288]	; (8006588 <_malloc_r+0x414>)
 8006466:	6808      	ldr	r0, [r1, #0]
 8006468:	4566      	cmp	r6, ip
 800646a:	eb0a 0e00 	add.w	lr, sl, r0
 800646e:	f8c1 e000 	str.w	lr, [r1]
 8006472:	4846      	ldr	r0, [pc, #280]	; (800658c <_malloc_r+0x418>)
 8006474:	468b      	mov	fp, r1
 8006476:	d107      	bne.n	8006488 <_malloc_r+0x314>
 8006478:	4206      	tst	r6, r0
 800647a:	d105      	bne.n	8006488 <_malloc_r+0x314>
 800647c:	68ab      	ldr	r3, [r5, #8]
 800647e:	44d1      	add	r9, sl
 8006480:	f049 0201 	orr.w	r2, r9, #1
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	e04c      	b.n	8006522 <_malloc_r+0x3ae>
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	3201      	adds	r2, #1
 800648c:	d102      	bne.n	8006494 <_malloc_r+0x320>
 800648e:	4a3c      	ldr	r2, [pc, #240]	; (8006580 <_malloc_r+0x40c>)
 8006490:	6016      	str	r6, [r2, #0]
 8006492:	e005      	b.n	80064a0 <_malloc_r+0x32c>
 8006494:	ebcc 0c06 	rsb	ip, ip, r6
 8006498:	eb0e 020c 	add.w	r2, lr, ip
 800649c:	f8cb 2000 	str.w	r2, [fp]
 80064a0:	f016 0207 	ands.w	r2, r6, #7
 80064a4:	bf1c      	itt	ne
 80064a6:	f1c2 0208 	rsbne	r2, r2, #8
 80064aa:	18b6      	addne	r6, r6, r2
 80064ac:	44b2      	add	sl, r6
 80064ae:	4413      	add	r3, r2
 80064b0:	ea0a 0000 	and.w	r0, sl, r0
 80064b4:	ebc0 0a03 	rsb	sl, r0, r3
 80064b8:	4651      	mov	r1, sl
 80064ba:	4638      	mov	r0, r7
 80064bc:	f000 fd80 	bl	8006fc0 <_sbrk_r>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	bf04      	itt	eq
 80064c4:	4630      	moveq	r0, r6
 80064c6:	f04f 0a00 	moveq.w	sl, #0
 80064ca:	f8db 3000 	ldr.w	r3, [fp]
 80064ce:	60ae      	str	r6, [r5, #8]
 80064d0:	1b80      	subs	r0, r0, r6
 80064d2:	4450      	add	r0, sl
 80064d4:	4453      	add	r3, sl
 80064d6:	f040 0001 	orr.w	r0, r0, #1
 80064da:	45a8      	cmp	r8, r5
 80064dc:	f8cb 3000 	str.w	r3, [fp]
 80064e0:	6070      	str	r0, [r6, #4]
 80064e2:	d01e      	beq.n	8006522 <_malloc_r+0x3ae>
 80064e4:	f1b9 0f0f 	cmp.w	r9, #15
 80064e8:	d802      	bhi.n	80064f0 <_malloc_r+0x37c>
 80064ea:	2301      	movs	r3, #1
 80064ec:	6073      	str	r3, [r6, #4]
 80064ee:	e024      	b.n	800653a <_malloc_r+0x3c6>
 80064f0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80064f4:	f1a9 090c 	sub.w	r9, r9, #12
 80064f8:	f029 0907 	bic.w	r9, r9, #7
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	ea49 0303 	orr.w	r3, r9, r3
 8006504:	f8c8 3004 	str.w	r3, [r8, #4]
 8006508:	eb08 0309 	add.w	r3, r8, r9
 800650c:	2205      	movs	r2, #5
 800650e:	f1b9 0f0f 	cmp.w	r9, #15
 8006512:	605a      	str	r2, [r3, #4]
 8006514:	609a      	str	r2, [r3, #8]
 8006516:	d904      	bls.n	8006522 <_malloc_r+0x3ae>
 8006518:	4638      	mov	r0, r7
 800651a:	f108 0108 	add.w	r1, r8, #8
 800651e:	f7ff fb8f 	bl	8005c40 <_free_r>
 8006522:	4a1b      	ldr	r2, [pc, #108]	; (8006590 <_malloc_r+0x41c>)
 8006524:	f8db 3000 	ldr.w	r3, [fp]
 8006528:	6811      	ldr	r1, [r2, #0]
 800652a:	428b      	cmp	r3, r1
 800652c:	bf88      	it	hi
 800652e:	6013      	strhi	r3, [r2, #0]
 8006530:	4a18      	ldr	r2, [pc, #96]	; (8006594 <_malloc_r+0x420>)
 8006532:	6811      	ldr	r1, [r2, #0]
 8006534:	428b      	cmp	r3, r1
 8006536:	bf88      	it	hi
 8006538:	6013      	strhi	r3, [r2, #0]
 800653a:	68ab      	ldr	r3, [r5, #8]
 800653c:	685a      	ldr	r2, [r3, #4]
 800653e:	f022 0203 	bic.w	r2, r2, #3
 8006542:	42a2      	cmp	r2, r4
 8006544:	ebc4 0302 	rsb	r3, r4, r2
 8006548:	d301      	bcc.n	800654e <_malloc_r+0x3da>
 800654a:	2b0f      	cmp	r3, #15
 800654c:	dc04      	bgt.n	8006558 <_malloc_r+0x3e4>
 800654e:	4638      	mov	r0, r7
 8006550:	f000 f84d 	bl	80065ee <__malloc_unlock>
 8006554:	2600      	movs	r6, #0
 8006556:	e00c      	b.n	8006572 <_malloc_r+0x3fe>
 8006558:	68ae      	ldr	r6, [r5, #8]
 800655a:	f044 0201 	orr.w	r2, r4, #1
 800655e:	4434      	add	r4, r6
 8006560:	f043 0301 	orr.w	r3, r3, #1
 8006564:	6072      	str	r2, [r6, #4]
 8006566:	60ac      	str	r4, [r5, #8]
 8006568:	6063      	str	r3, [r4, #4]
 800656a:	4638      	mov	r0, r7
 800656c:	f000 f83f 	bl	80065ee <__malloc_unlock>
 8006570:	3608      	adds	r6, #8
 8006572:	4630      	mov	r0, r6
 8006574:	b005      	add	sp, #20
 8006576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800657a:	bf00      	nop
 800657c:	20000984 	.word	0x20000984
 8006580:	2000056c 	.word	0x2000056c
 8006584:	00001000 	.word	0x00001000
 8006588:	20000988 	.word	0x20000988
 800658c:	00000fff 	.word	0x00000fff
 8006590:	20000980 	.word	0x20000980
 8006594:	2000097c 	.word	0x2000097c

08006598 <memchr>:
 8006598:	b510      	push	{r4, lr}
 800659a:	b2c9      	uxtb	r1, r1
 800659c:	4402      	add	r2, r0
 800659e:	4290      	cmp	r0, r2
 80065a0:	4603      	mov	r3, r0
 80065a2:	d006      	beq.n	80065b2 <memchr+0x1a>
 80065a4:	781c      	ldrb	r4, [r3, #0]
 80065a6:	428c      	cmp	r4, r1
 80065a8:	f100 0001 	add.w	r0, r0, #1
 80065ac:	d1f7      	bne.n	800659e <memchr+0x6>
 80065ae:	4618      	mov	r0, r3
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	2000      	movs	r0, #0
 80065b4:	bd10      	pop	{r4, pc}

080065b6 <memmove>:
 80065b6:	4281      	cmp	r1, r0
 80065b8:	b570      	push	{r4, r5, r6, lr}
 80065ba:	d301      	bcc.n	80065c0 <memmove+0xa>
 80065bc:	2300      	movs	r3, #0
 80065be:	e00e      	b.n	80065de <memmove+0x28>
 80065c0:	188c      	adds	r4, r1, r2
 80065c2:	42a0      	cmp	r0, r4
 80065c4:	d2fa      	bcs.n	80065bc <memmove+0x6>
 80065c6:	1885      	adds	r5, r0, r2
 80065c8:	4613      	mov	r3, r2
 80065ca:	f113 33ff 	adds.w	r3, r3, #4294967295
 80065ce:	d305      	bcc.n	80065dc <memmove+0x26>
 80065d0:	4251      	negs	r1, r2
 80065d2:	1866      	adds	r6, r4, r1
 80065d4:	4429      	add	r1, r5
 80065d6:	5cf6      	ldrb	r6, [r6, r3]
 80065d8:	54ce      	strb	r6, [r1, r3]
 80065da:	e7f6      	b.n	80065ca <memmove+0x14>
 80065dc:	bd70      	pop	{r4, r5, r6, pc}
 80065de:	4293      	cmp	r3, r2
 80065e0:	d003      	beq.n	80065ea <memmove+0x34>
 80065e2:	5ccc      	ldrb	r4, [r1, r3]
 80065e4:	54c4      	strb	r4, [r0, r3]
 80065e6:	3301      	adds	r3, #1
 80065e8:	e7f9      	b.n	80065de <memmove+0x28>
 80065ea:	bd70      	pop	{r4, r5, r6, pc}

080065ec <__malloc_lock>:
 80065ec:	4770      	bx	lr

080065ee <__malloc_unlock>:
 80065ee:	4770      	bx	lr

080065f0 <_Balloc>:
 80065f0:	b570      	push	{r4, r5, r6, lr}
 80065f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065f4:	4604      	mov	r4, r0
 80065f6:	460e      	mov	r6, r1
 80065f8:	b93d      	cbnz	r5, 800660a <_Balloc+0x1a>
 80065fa:	2010      	movs	r0, #16
 80065fc:	f7ff fdb2 	bl	8006164 <malloc>
 8006600:	6260      	str	r0, [r4, #36]	; 0x24
 8006602:	6045      	str	r5, [r0, #4]
 8006604:	6085      	str	r5, [r0, #8]
 8006606:	6005      	str	r5, [r0, #0]
 8006608:	60c5      	str	r5, [r0, #12]
 800660a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800660c:	68eb      	ldr	r3, [r5, #12]
 800660e:	b143      	cbz	r3, 8006622 <_Balloc+0x32>
 8006610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8006618:	b178      	cbz	r0, 800663a <_Balloc+0x4a>
 800661a:	6801      	ldr	r1, [r0, #0]
 800661c:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 8006620:	e017      	b.n	8006652 <_Balloc+0x62>
 8006622:	4620      	mov	r0, r4
 8006624:	2104      	movs	r1, #4
 8006626:	2221      	movs	r2, #33	; 0x21
 8006628:	f000 fdec 	bl	8007204 <_calloc_r>
 800662c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800662e:	60e8      	str	r0, [r5, #12]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1ec      	bne.n	8006610 <_Balloc+0x20>
 8006636:	2000      	movs	r0, #0
 8006638:	bd70      	pop	{r4, r5, r6, pc}
 800663a:	2101      	movs	r1, #1
 800663c:	fa01 f506 	lsl.w	r5, r1, r6
 8006640:	1d6a      	adds	r2, r5, #5
 8006642:	4620      	mov	r0, r4
 8006644:	0092      	lsls	r2, r2, #2
 8006646:	f000 fddd 	bl	8007204 <_calloc_r>
 800664a:	2800      	cmp	r0, #0
 800664c:	d0f3      	beq.n	8006636 <_Balloc+0x46>
 800664e:	6046      	str	r6, [r0, #4]
 8006650:	6085      	str	r5, [r0, #8]
 8006652:	2200      	movs	r2, #0
 8006654:	6102      	str	r2, [r0, #16]
 8006656:	60c2      	str	r2, [r0, #12]
 8006658:	bd70      	pop	{r4, r5, r6, pc}

0800665a <_Bfree>:
 800665a:	b570      	push	{r4, r5, r6, lr}
 800665c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800665e:	4606      	mov	r6, r0
 8006660:	460d      	mov	r5, r1
 8006662:	b93c      	cbnz	r4, 8006674 <_Bfree+0x1a>
 8006664:	2010      	movs	r0, #16
 8006666:	f7ff fd7d 	bl	8006164 <malloc>
 800666a:	6270      	str	r0, [r6, #36]	; 0x24
 800666c:	6044      	str	r4, [r0, #4]
 800666e:	6084      	str	r4, [r0, #8]
 8006670:	6004      	str	r4, [r0, #0]
 8006672:	60c4      	str	r4, [r0, #12]
 8006674:	b13d      	cbz	r5, 8006686 <_Bfree+0x2c>
 8006676:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006678:	686a      	ldr	r2, [r5, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006680:	6029      	str	r1, [r5, #0]
 8006682:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006686:	bd70      	pop	{r4, r5, r6, pc}

08006688 <__multadd>:
 8006688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668c:	460c      	mov	r4, r1
 800668e:	461e      	mov	r6, r3
 8006690:	690d      	ldr	r5, [r1, #16]
 8006692:	4607      	mov	r7, r0
 8006694:	3114      	adds	r1, #20
 8006696:	2300      	movs	r3, #0
 8006698:	6808      	ldr	r0, [r1, #0]
 800669a:	fa1f fc80 	uxth.w	ip, r0
 800669e:	0c00      	lsrs	r0, r0, #16
 80066a0:	fb02 6c0c 	mla	ip, r2, ip, r6
 80066a4:	4350      	muls	r0, r2
 80066a6:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 80066aa:	3301      	adds	r3, #1
 80066ac:	fa1f fc8c 	uxth.w	ip, ip
 80066b0:	0c06      	lsrs	r6, r0, #16
 80066b2:	42ab      	cmp	r3, r5
 80066b4:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
 80066b8:	f841 0b04 	str.w	r0, [r1], #4
 80066bc:	dbec      	blt.n	8006698 <__multadd+0x10>
 80066be:	b1d6      	cbz	r6, 80066f6 <__multadd+0x6e>
 80066c0:	68a3      	ldr	r3, [r4, #8]
 80066c2:	429d      	cmp	r5, r3
 80066c4:	db12      	blt.n	80066ec <__multadd+0x64>
 80066c6:	6861      	ldr	r1, [r4, #4]
 80066c8:	4638      	mov	r0, r7
 80066ca:	3101      	adds	r1, #1
 80066cc:	f7ff ff90 	bl	80065f0 <_Balloc>
 80066d0:	6922      	ldr	r2, [r4, #16]
 80066d2:	3202      	adds	r2, #2
 80066d4:	f104 010c 	add.w	r1, r4, #12
 80066d8:	4680      	mov	r8, r0
 80066da:	0092      	lsls	r2, r2, #2
 80066dc:	300c      	adds	r0, #12
 80066de:	f7fd f987 	bl	80039f0 <memcpy>
 80066e2:	4621      	mov	r1, r4
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7ff ffb8 	bl	800665a <_Bfree>
 80066ea:	4644      	mov	r4, r8
 80066ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066f0:	3501      	adds	r5, #1
 80066f2:	615e      	str	r6, [r3, #20]
 80066f4:	6125      	str	r5, [r4, #16]
 80066f6:	4620      	mov	r0, r4
 80066f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066fc <__hi0bits>:
 80066fc:	0c03      	lsrs	r3, r0, #16
 80066fe:	041b      	lsls	r3, r3, #16
 8006700:	b913      	cbnz	r3, 8006708 <__hi0bits+0xc>
 8006702:	0400      	lsls	r0, r0, #16
 8006704:	2310      	movs	r3, #16
 8006706:	e000      	b.n	800670a <__hi0bits+0xe>
 8006708:	2300      	movs	r3, #0
 800670a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800670e:	bf04      	itt	eq
 8006710:	0200      	lsleq	r0, r0, #8
 8006712:	3308      	addeq	r3, #8
 8006714:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006718:	bf04      	itt	eq
 800671a:	0100      	lsleq	r0, r0, #4
 800671c:	3304      	addeq	r3, #4
 800671e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006722:	bf04      	itt	eq
 8006724:	0080      	lsleq	r0, r0, #2
 8006726:	3302      	addeq	r3, #2
 8006728:	2800      	cmp	r0, #0
 800672a:	db03      	blt.n	8006734 <__hi0bits+0x38>
 800672c:	0042      	lsls	r2, r0, #1
 800672e:	d503      	bpl.n	8006738 <__hi0bits+0x3c>
 8006730:	1c58      	adds	r0, r3, #1
 8006732:	4770      	bx	lr
 8006734:	4618      	mov	r0, r3
 8006736:	4770      	bx	lr
 8006738:	2020      	movs	r0, #32
 800673a:	4770      	bx	lr

0800673c <__lo0bits>:
 800673c:	6803      	ldr	r3, [r0, #0]
 800673e:	f013 0207 	ands.w	r2, r3, #7
 8006742:	d00b      	beq.n	800675c <__lo0bits+0x20>
 8006744:	07d9      	lsls	r1, r3, #31
 8006746:	d422      	bmi.n	800678e <__lo0bits+0x52>
 8006748:	079a      	lsls	r2, r3, #30
 800674a:	d503      	bpl.n	8006754 <__lo0bits+0x18>
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	6003      	str	r3, [r0, #0]
 8006750:	2001      	movs	r0, #1
 8006752:	4770      	bx	lr
 8006754:	089b      	lsrs	r3, r3, #2
 8006756:	6003      	str	r3, [r0, #0]
 8006758:	2002      	movs	r0, #2
 800675a:	4770      	bx	lr
 800675c:	b299      	uxth	r1, r3
 800675e:	b909      	cbnz	r1, 8006764 <__lo0bits+0x28>
 8006760:	0c1b      	lsrs	r3, r3, #16
 8006762:	2210      	movs	r2, #16
 8006764:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006768:	bf04      	itt	eq
 800676a:	0a1b      	lsreq	r3, r3, #8
 800676c:	3208      	addeq	r2, #8
 800676e:	0719      	lsls	r1, r3, #28
 8006770:	bf04      	itt	eq
 8006772:	091b      	lsreq	r3, r3, #4
 8006774:	3204      	addeq	r2, #4
 8006776:	0799      	lsls	r1, r3, #30
 8006778:	bf04      	itt	eq
 800677a:	089b      	lsreq	r3, r3, #2
 800677c:	3202      	addeq	r2, #2
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	d402      	bmi.n	8006788 <__lo0bits+0x4c>
 8006782:	085b      	lsrs	r3, r3, #1
 8006784:	d005      	beq.n	8006792 <__lo0bits+0x56>
 8006786:	3201      	adds	r2, #1
 8006788:	6003      	str	r3, [r0, #0]
 800678a:	4610      	mov	r0, r2
 800678c:	4770      	bx	lr
 800678e:	2000      	movs	r0, #0
 8006790:	4770      	bx	lr
 8006792:	2020      	movs	r0, #32
 8006794:	4770      	bx	lr

08006796 <__i2b>:
 8006796:	b510      	push	{r4, lr}
 8006798:	460c      	mov	r4, r1
 800679a:	2101      	movs	r1, #1
 800679c:	f7ff ff28 	bl	80065f0 <_Balloc>
 80067a0:	2201      	movs	r2, #1
 80067a2:	6144      	str	r4, [r0, #20]
 80067a4:	6102      	str	r2, [r0, #16]
 80067a6:	bd10      	pop	{r4, pc}

080067a8 <__multiply>:
 80067a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	4616      	mov	r6, r2
 80067ae:	690a      	ldr	r2, [r1, #16]
 80067b0:	6933      	ldr	r3, [r6, #16]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	b085      	sub	sp, #20
 80067b6:	460d      	mov	r5, r1
 80067b8:	da01      	bge.n	80067be <__multiply+0x16>
 80067ba:	4635      	mov	r5, r6
 80067bc:	460e      	mov	r6, r1
 80067be:	f8d5 8010 	ldr.w	r8, [r5, #16]
 80067c2:	6937      	ldr	r7, [r6, #16]
 80067c4:	68ab      	ldr	r3, [r5, #8]
 80067c6:	6869      	ldr	r1, [r5, #4]
 80067c8:	eb08 0407 	add.w	r4, r8, r7
 80067cc:	429c      	cmp	r4, r3
 80067ce:	bfc8      	it	gt
 80067d0:	3101      	addgt	r1, #1
 80067d2:	f7ff ff0d 	bl	80065f0 <_Balloc>
 80067d6:	f100 0314 	add.w	r3, r0, #20
 80067da:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 80067de:	9101      	str	r1, [sp, #4]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f8dd a004 	ldr.w	sl, [sp, #4]
 80067e6:	4552      	cmp	r2, sl
 80067e8:	d203      	bcs.n	80067f2 <__multiply+0x4a>
 80067ea:	2100      	movs	r1, #0
 80067ec:	f842 1b04 	str.w	r1, [r2], #4
 80067f0:	e7f7      	b.n	80067e2 <__multiply+0x3a>
 80067f2:	f105 0114 	add.w	r1, r5, #20
 80067f6:	f106 0214 	add.w	r2, r6, #20
 80067fa:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80067fe:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006802:	f8cd 8008 	str.w	r8, [sp, #8]
 8006806:	9703      	str	r7, [sp, #12]
 8006808:	9e03      	ldr	r6, [sp, #12]
 800680a:	42b2      	cmp	r2, r6
 800680c:	4615      	mov	r5, r2
 800680e:	d256      	bcs.n	80068be <__multiply+0x116>
 8006810:	f8b5 c000 	ldrh.w	ip, [r5]
 8006814:	3204      	adds	r2, #4
 8006816:	f1bc 0f00 	cmp.w	ip, #0
 800681a:	d025      	beq.n	8006868 <__multiply+0xc0>
 800681c:	460f      	mov	r7, r1
 800681e:	461d      	mov	r5, r3
 8006820:	2600      	movs	r6, #0
 8006822:	f857 9b04 	ldr.w	r9, [r7], #4
 8006826:	f8d5 8000 	ldr.w	r8, [r5]
 800682a:	fa1f fb89 	uxth.w	fp, r9
 800682e:	fa1f fa88 	uxth.w	sl, r8
 8006832:	fb0c aa0b 	mla	sl, ip, fp, sl
 8006836:	ea4f 4919 	mov.w	r9, r9, lsr #16
 800683a:	ea4f 4818 	mov.w	r8, r8, lsr #16
 800683e:	44b2      	add	sl, r6
 8006840:	fb0c 8809 	mla	r8, ip, r9, r8
 8006844:	eb08 481a 	add.w	r8, r8, sl, lsr #16
 8006848:	fa1f fa8a 	uxth.w	sl, sl
 800684c:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
 8006850:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8006854:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006858:	46ab      	mov	fp, r5
 800685a:	45b8      	cmp	r8, r7
 800685c:	f84b ab04 	str.w	sl, [fp], #4
 8006860:	d901      	bls.n	8006866 <__multiply+0xbe>
 8006862:	465d      	mov	r5, fp
 8006864:	e7dd      	b.n	8006822 <__multiply+0x7a>
 8006866:	606e      	str	r6, [r5, #4]
 8006868:	f832 8c02 	ldrh.w	r8, [r2, #-2]
 800686c:	f1b8 0f00 	cmp.w	r8, #0
 8006870:	d023      	beq.n	80068ba <__multiply+0x112>
 8006872:	681e      	ldr	r6, [r3, #0]
 8006874:	460f      	mov	r7, r1
 8006876:	461d      	mov	r5, r3
 8006878:	f04f 0900 	mov.w	r9, #0
 800687c:	f8b7 a000 	ldrh.w	sl, [r7]
 8006880:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8006884:	fb08 cc0a 	mla	ip, r8, sl, ip
 8006888:	44e1      	add	r9, ip
 800688a:	b2b6      	uxth	r6, r6
 800688c:	46ac      	mov	ip, r5
 800688e:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8006892:	f84c 6b04 	str.w	r6, [ip], #4
 8006896:	f857 6b04 	ldr.w	r6, [r7], #4
 800689a:	f8b5 a004 	ldrh.w	sl, [r5, #4]
 800689e:	0c36      	lsrs	r6, r6, #16
 80068a0:	fb08 a606 	mla	r6, r8, r6, sl
 80068a4:	f8dd a008 	ldr.w	sl, [sp, #8]
 80068a8:	eb06 4619 	add.w	r6, r6, r9, lsr #16
 80068ac:	4557      	cmp	r7, sl
 80068ae:	ea4f 4916 	mov.w	r9, r6, lsr #16
 80068b2:	d201      	bcs.n	80068b8 <__multiply+0x110>
 80068b4:	4665      	mov	r5, ip
 80068b6:	e7e1      	b.n	800687c <__multiply+0xd4>
 80068b8:	606e      	str	r6, [r5, #4]
 80068ba:	3304      	adds	r3, #4
 80068bc:	e7a4      	b.n	8006808 <__multiply+0x60>
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	2c00      	cmp	r4, #0
 80068c2:	dc03      	bgt.n	80068cc <__multiply+0x124>
 80068c4:	6104      	str	r4, [r0, #16]
 80068c6:	b005      	add	sp, #20
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d1f7      	bne.n	80068c4 <__multiply+0x11c>
 80068d4:	3c01      	subs	r4, #1
 80068d6:	e7f3      	b.n	80068c0 <__multiply+0x118>

080068d8 <__pow5mult>:
 80068d8:	f012 0303 	ands.w	r3, r2, #3
 80068dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068e0:	4605      	mov	r5, r0
 80068e2:	460e      	mov	r6, r1
 80068e4:	4617      	mov	r7, r2
 80068e6:	d007      	beq.n	80068f8 <__pow5mult+0x20>
 80068e8:	3b01      	subs	r3, #1
 80068ea:	4a21      	ldr	r2, [pc, #132]	; (8006970 <__pow5mult+0x98>)
 80068ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80068f0:	2300      	movs	r3, #0
 80068f2:	f7ff fec9 	bl	8006688 <__multadd>
 80068f6:	4606      	mov	r6, r0
 80068f8:	10bf      	asrs	r7, r7, #2
 80068fa:	d035      	beq.n	8006968 <__pow5mult+0x90>
 80068fc:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80068fe:	b93c      	cbnz	r4, 8006910 <__pow5mult+0x38>
 8006900:	2010      	movs	r0, #16
 8006902:	f7ff fc2f 	bl	8006164 <malloc>
 8006906:	6268      	str	r0, [r5, #36]	; 0x24
 8006908:	6044      	str	r4, [r0, #4]
 800690a:	6084      	str	r4, [r0, #8]
 800690c:	6004      	str	r4, [r0, #0]
 800690e:	60c4      	str	r4, [r0, #12]
 8006910:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8006914:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006918:	b97c      	cbnz	r4, 800693a <__pow5mult+0x62>
 800691a:	4628      	mov	r0, r5
 800691c:	f240 2171 	movw	r1, #625	; 0x271
 8006920:	f7ff ff39 	bl	8006796 <__i2b>
 8006924:	2300      	movs	r3, #0
 8006926:	f8c8 0008 	str.w	r0, [r8, #8]
 800692a:	4604      	mov	r4, r0
 800692c:	6003      	str	r3, [r0, #0]
 800692e:	e004      	b.n	800693a <__pow5mult+0x62>
 8006930:	107f      	asrs	r7, r7, #1
 8006932:	d019      	beq.n	8006968 <__pow5mult+0x90>
 8006934:	6820      	ldr	r0, [r4, #0]
 8006936:	b170      	cbz	r0, 8006956 <__pow5mult+0x7e>
 8006938:	4604      	mov	r4, r0
 800693a:	07fb      	lsls	r3, r7, #31
 800693c:	d5f8      	bpl.n	8006930 <__pow5mult+0x58>
 800693e:	4631      	mov	r1, r6
 8006940:	4622      	mov	r2, r4
 8006942:	4628      	mov	r0, r5
 8006944:	f7ff ff30 	bl	80067a8 <__multiply>
 8006948:	4631      	mov	r1, r6
 800694a:	4680      	mov	r8, r0
 800694c:	4628      	mov	r0, r5
 800694e:	f7ff fe84 	bl	800665a <_Bfree>
 8006952:	4646      	mov	r6, r8
 8006954:	e7ec      	b.n	8006930 <__pow5mult+0x58>
 8006956:	4628      	mov	r0, r5
 8006958:	4621      	mov	r1, r4
 800695a:	4622      	mov	r2, r4
 800695c:	f7ff ff24 	bl	80067a8 <__multiply>
 8006960:	2300      	movs	r3, #0
 8006962:	6020      	str	r0, [r4, #0]
 8006964:	6003      	str	r3, [r0, #0]
 8006966:	e7e7      	b.n	8006938 <__pow5mult+0x60>
 8006968:	4630      	mov	r0, r6
 800696a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696e:	bf00      	nop
 8006970:	080078a0 	.word	0x080078a0

08006974 <__lshift>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	460c      	mov	r4, r1
 800697a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800697e:	6923      	ldr	r3, [r4, #16]
 8006980:	6849      	ldr	r1, [r1, #4]
 8006982:	eb0a 0903 	add.w	r9, sl, r3
 8006986:	68a3      	ldr	r3, [r4, #8]
 8006988:	4680      	mov	r8, r0
 800698a:	4615      	mov	r5, r2
 800698c:	f109 0701 	add.w	r7, r9, #1
 8006990:	429f      	cmp	r7, r3
 8006992:	dd02      	ble.n	800699a <__lshift+0x26>
 8006994:	3101      	adds	r1, #1
 8006996:	005b      	lsls	r3, r3, #1
 8006998:	e7fa      	b.n	8006990 <__lshift+0x1c>
 800699a:	4640      	mov	r0, r8
 800699c:	f7ff fe28 	bl	80065f0 <_Balloc>
 80069a0:	2300      	movs	r3, #0
 80069a2:	4606      	mov	r6, r0
 80069a4:	f100 0214 	add.w	r2, r0, #20
 80069a8:	4553      	cmp	r3, sl
 80069aa:	da04      	bge.n	80069b6 <__lshift+0x42>
 80069ac:	2100      	movs	r1, #0
 80069ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80069b2:	3301      	adds	r3, #1
 80069b4:	e7f8      	b.n	80069a8 <__lshift+0x34>
 80069b6:	6920      	ldr	r0, [r4, #16]
 80069b8:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
 80069bc:	f104 0314 	add.w	r3, r4, #20
 80069c0:	f015 0c1f 	ands.w	ip, r5, #31
 80069c4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80069c8:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80069cc:	d016      	beq.n	80069fc <__lshift+0x88>
 80069ce:	f1cc 0a20 	rsb	sl, ip, #32
 80069d2:	2500      	movs	r5, #0
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	460a      	mov	r2, r1
 80069d8:	fa00 f00c 	lsl.w	r0, r0, ip
 80069dc:	4305      	orrs	r5, r0
 80069de:	f842 5b04 	str.w	r5, [r2], #4
 80069e2:	f853 5b04 	ldr.w	r5, [r3], #4
 80069e6:	4573      	cmp	r3, lr
 80069e8:	fa25 f50a 	lsr.w	r5, r5, sl
 80069ec:	d201      	bcs.n	80069f2 <__lshift+0x7e>
 80069ee:	4611      	mov	r1, r2
 80069f0:	e7f0      	b.n	80069d4 <__lshift+0x60>
 80069f2:	604d      	str	r5, [r1, #4]
 80069f4:	b145      	cbz	r5, 8006a08 <__lshift+0x94>
 80069f6:	f109 0702 	add.w	r7, r9, #2
 80069fa:	e005      	b.n	8006a08 <__lshift+0x94>
 80069fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a00:	f841 2b04 	str.w	r2, [r1], #4
 8006a04:	4573      	cmp	r3, lr
 8006a06:	d3f9      	bcc.n	80069fc <__lshift+0x88>
 8006a08:	3f01      	subs	r7, #1
 8006a0a:	4640      	mov	r0, r8
 8006a0c:	6137      	str	r7, [r6, #16]
 8006a0e:	4621      	mov	r1, r4
 8006a10:	f7ff fe23 	bl	800665a <_Bfree>
 8006a14:	4630      	mov	r0, r6
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a1a <__mcmp>:
 8006a1a:	6902      	ldr	r2, [r0, #16]
 8006a1c:	690b      	ldr	r3, [r1, #16]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	b510      	push	{r4, lr}
 8006a22:	d113      	bne.n	8006a4c <__mcmp+0x32>
 8006a24:	009c      	lsls	r4, r3, #2
 8006a26:	3014      	adds	r0, #20
 8006a28:	f101 0214 	add.w	r2, r1, #20
 8006a2c:	1903      	adds	r3, r0, r4
 8006a2e:	4422      	add	r2, r4
 8006a30:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006a34:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006a38:	428c      	cmp	r4, r1
 8006a3a:	d003      	beq.n	8006a44 <__mcmp+0x2a>
 8006a3c:	d208      	bcs.n	8006a50 <__mcmp+0x36>
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a42:	bd10      	pop	{r4, pc}
 8006a44:	4298      	cmp	r0, r3
 8006a46:	d3f3      	bcc.n	8006a30 <__mcmp+0x16>
 8006a48:	2000      	movs	r0, #0
 8006a4a:	bd10      	pop	{r4, pc}
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	bd10      	pop	{r4, pc}
 8006a50:	2001      	movs	r0, #1
 8006a52:	bd10      	pop	{r4, pc}

08006a54 <__mdiff>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	4606      	mov	r6, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	4615      	mov	r5, r2
 8006a62:	f7ff ffda 	bl	8006a1a <__mcmp>
 8006a66:	1e07      	subs	r7, r0, #0
 8006a68:	d108      	bne.n	8006a7c <__mdiff+0x28>
 8006a6a:	4630      	mov	r0, r6
 8006a6c:	4639      	mov	r1, r7
 8006a6e:	f7ff fdbf 	bl	80065f0 <_Balloc>
 8006a72:	2301      	movs	r3, #1
 8006a74:	6103      	str	r3, [r0, #16]
 8006a76:	6147      	str	r7, [r0, #20]
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	db01      	blt.n	8006a82 <__mdiff+0x2e>
 8006a7e:	2700      	movs	r7, #0
 8006a80:	e003      	b.n	8006a8a <__mdiff+0x36>
 8006a82:	4623      	mov	r3, r4
 8006a84:	2701      	movs	r7, #1
 8006a86:	462c      	mov	r4, r5
 8006a88:	461d      	mov	r5, r3
 8006a8a:	6861      	ldr	r1, [r4, #4]
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	f7ff fdaf 	bl	80065f0 <_Balloc>
 8006a92:	6922      	ldr	r2, [r4, #16]
 8006a94:	692b      	ldr	r3, [r5, #16]
 8006a96:	60c7      	str	r7, [r0, #12]
 8006a98:	3414      	adds	r4, #20
 8006a9a:	f105 0614 	add.w	r6, r5, #20
 8006a9e:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 8006aa2:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8006aa6:	f100 0314 	add.w	r3, r0, #20
 8006aaa:	2100      	movs	r1, #0
 8006aac:	f854 7b04 	ldr.w	r7, [r4], #4
 8006ab0:	f856 9b04 	ldr.w	r9, [r6], #4
 8006ab4:	fa11 f187 	uxtah	r1, r1, r7
 8006ab8:	fa1f f589 	uxth.w	r5, r9
 8006abc:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8006ac0:	ebc5 0801 	rsb	r8, r5, r1
 8006ac4:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
 8006ac8:	eb07 4728 	add.w	r7, r7, r8, asr #16
 8006acc:	fa1f f888 	uxth.w	r8, r8
 8006ad0:	1439      	asrs	r1, r7, #16
 8006ad2:	45b2      	cmp	sl, r6
 8006ad4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8006ad8:	4625      	mov	r5, r4
 8006ada:	f843 7b04 	str.w	r7, [r3], #4
 8006ade:	d8e5      	bhi.n	8006aac <__mdiff+0x58>
 8006ae0:	4565      	cmp	r5, ip
 8006ae2:	d20d      	bcs.n	8006b00 <__mdiff+0xac>
 8006ae4:	f855 4b04 	ldr.w	r4, [r5], #4
 8006ae8:	fa11 f684 	uxtah	r6, r1, r4
 8006aec:	0c24      	lsrs	r4, r4, #16
 8006aee:	eb04 4426 	add.w	r4, r4, r6, asr #16
 8006af2:	b2b6      	uxth	r6, r6
 8006af4:	1421      	asrs	r1, r4, #16
 8006af6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8006afa:	f843 4b04 	str.w	r4, [r3], #4
 8006afe:	e7ef      	b.n	8006ae0 <__mdiff+0x8c>
 8006b00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b04:	b909      	cbnz	r1, 8006b0a <__mdiff+0xb6>
 8006b06:	3a01      	subs	r2, #1
 8006b08:	e7fa      	b.n	8006b00 <__mdiff+0xac>
 8006b0a:	6102      	str	r2, [r0, #16]
 8006b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006b10 <__d2b>:
 8006b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b14:	4689      	mov	r9, r1
 8006b16:	2101      	movs	r1, #1
 8006b18:	ec55 4b10 	vmov	r4, r5, d0
 8006b1c:	4690      	mov	r8, r2
 8006b1e:	f7ff fd67 	bl	80065f0 <_Balloc>
 8006b22:	f3c5 570a 	ubfx	r7, r5, #20, #11
 8006b26:	4606      	mov	r6, r0
 8006b28:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006b2c:	b10f      	cbz	r7, 8006b32 <__d2b+0x22>
 8006b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b32:	9301      	str	r3, [sp, #4]
 8006b34:	b1d4      	cbz	r4, 8006b6c <__d2b+0x5c>
 8006b36:	a802      	add	r0, sp, #8
 8006b38:	f840 4d08 	str.w	r4, [r0, #-8]!
 8006b3c:	4668      	mov	r0, sp
 8006b3e:	f7ff fdfd 	bl	800673c <__lo0bits>
 8006b42:	9b00      	ldr	r3, [sp, #0]
 8006b44:	b148      	cbz	r0, 8006b5a <__d2b+0x4a>
 8006b46:	9a01      	ldr	r2, [sp, #4]
 8006b48:	f1c0 0120 	rsb	r1, r0, #32
 8006b4c:	fa02 f101 	lsl.w	r1, r2, r1
 8006b50:	430b      	orrs	r3, r1
 8006b52:	40c2      	lsrs	r2, r0
 8006b54:	6173      	str	r3, [r6, #20]
 8006b56:	9201      	str	r2, [sp, #4]
 8006b58:	e000      	b.n	8006b5c <__d2b+0x4c>
 8006b5a:	6173      	str	r3, [r6, #20]
 8006b5c:	9b01      	ldr	r3, [sp, #4]
 8006b5e:	61b3      	str	r3, [r6, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	bf0c      	ite	eq
 8006b64:	2401      	moveq	r4, #1
 8006b66:	2402      	movne	r4, #2
 8006b68:	6134      	str	r4, [r6, #16]
 8006b6a:	e007      	b.n	8006b7c <__d2b+0x6c>
 8006b6c:	a801      	add	r0, sp, #4
 8006b6e:	f7ff fde5 	bl	800673c <__lo0bits>
 8006b72:	2401      	movs	r4, #1
 8006b74:	9b01      	ldr	r3, [sp, #4]
 8006b76:	6173      	str	r3, [r6, #20]
 8006b78:	6134      	str	r4, [r6, #16]
 8006b7a:	3020      	adds	r0, #32
 8006b7c:	b13f      	cbz	r7, 8006b8e <__d2b+0x7e>
 8006b7e:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8006b82:	4407      	add	r7, r0
 8006b84:	f8c9 7000 	str.w	r7, [r9]
 8006b88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b8c:	e00a      	b.n	8006ba4 <__d2b+0x94>
 8006b8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006b92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b96:	f8c9 0000 	str.w	r0, [r9]
 8006b9a:	6918      	ldr	r0, [r3, #16]
 8006b9c:	f7ff fdae 	bl	80066fc <__hi0bits>
 8006ba0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006ba4:	f8c8 0000 	str.w	r0, [r8]
 8006ba8:	4630      	mov	r0, r6
 8006baa:	b003      	add	sp, #12
 8006bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006bb0 <_putc_r>:
 8006bb0:	b570      	push	{r4, r5, r6, lr}
 8006bb2:	460e      	mov	r6, r1
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b118      	cbz	r0, 8006bc2 <_putc_r+0x12>
 8006bba:	6983      	ldr	r3, [r0, #24]
 8006bbc:	b90b      	cbnz	r3, 8006bc2 <_putc_r+0x12>
 8006bbe:	f7fe ff29 	bl	8005a14 <__sinit>
 8006bc2:	4b16      	ldr	r3, [pc, #88]	; (8006c1c <_putc_r+0x6c>)
 8006bc4:	429c      	cmp	r4, r3
 8006bc6:	d101      	bne.n	8006bcc <_putc_r+0x1c>
 8006bc8:	686c      	ldr	r4, [r5, #4]
 8006bca:	e008      	b.n	8006bde <_putc_r+0x2e>
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <_putc_r+0x70>)
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d101      	bne.n	8006bd6 <_putc_r+0x26>
 8006bd2:	68ac      	ldr	r4, [r5, #8]
 8006bd4:	e003      	b.n	8006bde <_putc_r+0x2e>
 8006bd6:	4b13      	ldr	r3, [pc, #76]	; (8006c24 <_putc_r+0x74>)
 8006bd8:	429c      	cmp	r4, r3
 8006bda:	bf08      	it	eq
 8006bdc:	68ec      	ldreq	r4, [r5, #12]
 8006bde:	68a3      	ldr	r3, [r4, #8]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	60a3      	str	r3, [r4, #8]
 8006be6:	da11      	bge.n	8006c0c <_putc_r+0x5c>
 8006be8:	69a2      	ldr	r2, [r4, #24]
 8006bea:	4293      	cmp	r3, r2
 8006bec:	db07      	blt.n	8006bfe <_putc_r+0x4e>
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	701e      	strb	r6, [r3, #0]
 8006bf2:	6823      	ldr	r3, [r4, #0]
 8006bf4:	7819      	ldrb	r1, [r3, #0]
 8006bf6:	290a      	cmp	r1, #10
 8006bf8:	d10b      	bne.n	8006c12 <_putc_r+0x62>
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	e001      	b.n	8006c02 <_putc_r+0x52>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	4631      	mov	r1, r6
 8006c02:	4622      	mov	r2, r4
 8006c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c08:	f000 ba8c 	b.w	8007124 <__swbuf_r>
 8006c0c:	6823      	ldr	r3, [r4, #0]
 8006c0e:	701e      	strb	r6, [r3, #0]
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	1c5a      	adds	r2, r3, #1
 8006c14:	6022      	str	r2, [r4, #0]
 8006c16:	7818      	ldrb	r0, [r3, #0]
 8006c18:	bd70      	pop	{r4, r5, r6, pc}
 8006c1a:	bf00      	nop
 8006c1c:	08007740 	.word	0x08007740
 8006c20:	08007760 	.word	0x08007760
 8006c24:	08007780 	.word	0x08007780

08006c28 <_realloc_r>:
 8006c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	4681      	mov	r9, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b929      	cbnz	r1, 8006c3e <_realloc_r+0x16>
 8006c32:	4611      	mov	r1, r2
 8006c34:	b003      	add	sp, #12
 8006c36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	f7ff ba9b 	b.w	8006174 <_malloc_r>
 8006c3e:	9201      	str	r2, [sp, #4]
 8006c40:	f7ff fcd4 	bl	80065ec <__malloc_lock>
 8006c44:	9a01      	ldr	r2, [sp, #4]
 8006c46:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8006c4a:	f102 070b 	add.w	r7, r2, #11
 8006c4e:	2f16      	cmp	r7, #22
 8006c50:	f1a4 0808 	sub.w	r8, r4, #8
 8006c54:	f025 0603 	bic.w	r6, r5, #3
 8006c58:	d903      	bls.n	8006c62 <_realloc_r+0x3a>
 8006c5a:	f037 0707 	bics.w	r7, r7, #7
 8006c5e:	d501      	bpl.n	8006c64 <_realloc_r+0x3c>
 8006c60:	e002      	b.n	8006c68 <_realloc_r+0x40>
 8006c62:	2710      	movs	r7, #16
 8006c64:	4297      	cmp	r7, r2
 8006c66:	d204      	bcs.n	8006c72 <_realloc_r+0x4a>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	f8c9 3000 	str.w	r3, [r9]
 8006c6e:	2000      	movs	r0, #0
 8006c70:	e17e      	b.n	8006f70 <_realloc_r+0x348>
 8006c72:	42be      	cmp	r6, r7
 8006c74:	f280 8154 	bge.w	8006f20 <_realloc_r+0x2f8>
 8006c78:	49a2      	ldr	r1, [pc, #648]	; (8006f04 <_realloc_r+0x2dc>)
 8006c7a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8006c7e:	eb08 0306 	add.w	r3, r8, r6
 8006c82:	4573      	cmp	r3, lr
 8006c84:	468b      	mov	fp, r1
 8006c86:	6858      	ldr	r0, [r3, #4]
 8006c88:	d005      	beq.n	8006c96 <_realloc_r+0x6e>
 8006c8a:	f020 0101 	bic.w	r1, r0, #1
 8006c8e:	4419      	add	r1, r3
 8006c90:	6849      	ldr	r1, [r1, #4]
 8006c92:	07c9      	lsls	r1, r1, #31
 8006c94:	d425      	bmi.n	8006ce2 <_realloc_r+0xba>
 8006c96:	f020 0003 	bic.w	r0, r0, #3
 8006c9a:	4573      	cmp	r3, lr
 8006c9c:	eb00 0106 	add.w	r1, r0, r6
 8006ca0:	d117      	bne.n	8006cd2 <_realloc_r+0xaa>
 8006ca2:	f107 0c10 	add.w	ip, r7, #16
 8006ca6:	4561      	cmp	r1, ip
 8006ca8:	db1d      	blt.n	8006ce6 <_realloc_r+0xbe>
 8006caa:	eb08 0507 	add.w	r5, r8, r7
 8006cae:	1bc9      	subs	r1, r1, r7
 8006cb0:	f041 0101 	orr.w	r1, r1, #1
 8006cb4:	f8cb 5008 	str.w	r5, [fp, #8]
 8006cb8:	6069      	str	r1, [r5, #4]
 8006cba:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	431f      	orrs	r7, r3
 8006cc4:	4648      	mov	r0, r9
 8006cc6:	f844 7c04 	str.w	r7, [r4, #-4]
 8006cca:	f7ff fc90 	bl	80065ee <__malloc_unlock>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	e14e      	b.n	8006f70 <_realloc_r+0x348>
 8006cd2:	42b9      	cmp	r1, r7
 8006cd4:	db07      	blt.n	8006ce6 <_realloc_r+0xbe>
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	460e      	mov	r6, r1
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	6093      	str	r3, [r2, #8]
 8006ce0:	e11e      	b.n	8006f20 <_realloc_r+0x2f8>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	07e9      	lsls	r1, r5, #31
 8006ce8:	f100 80c9 	bmi.w	8006e7e <_realloc_r+0x256>
 8006cec:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006cf0:	ebc5 0508 	rsb	r5, r5, r8
 8006cf4:	6869      	ldr	r1, [r5, #4]
 8006cf6:	f021 0103 	bic.w	r1, r1, #3
 8006cfa:	eb01 0a06 	add.w	sl, r1, r6
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	f000 8088 	beq.w	8006e14 <_realloc_r+0x1ec>
 8006d04:	4573      	cmp	r3, lr
 8006d06:	d14b      	bne.n	8006da0 <_realloc_r+0x178>
 8006d08:	eb0a 0300 	add.w	r3, sl, r0
 8006d0c:	f107 0110 	add.w	r1, r7, #16
 8006d10:	428b      	cmp	r3, r1
 8006d12:	db7f      	blt.n	8006e14 <_realloc_r+0x1ec>
 8006d14:	46a8      	mov	r8, r5
 8006d16:	68ea      	ldr	r2, [r5, #12]
 8006d18:	f858 1f08 	ldr.w	r1, [r8, #8]!
 8006d1c:	60ca      	str	r2, [r1, #12]
 8006d1e:	6091      	str	r1, [r2, #8]
 8006d20:	1f32      	subs	r2, r6, #4
 8006d22:	2a24      	cmp	r2, #36	; 0x24
 8006d24:	d825      	bhi.n	8006d72 <_realloc_r+0x14a>
 8006d26:	2a13      	cmp	r2, #19
 8006d28:	d91b      	bls.n	8006d62 <_realloc_r+0x13a>
 8006d2a:	6821      	ldr	r1, [r4, #0]
 8006d2c:	60a9      	str	r1, [r5, #8]
 8006d2e:	6861      	ldr	r1, [r4, #4]
 8006d30:	60e9      	str	r1, [r5, #12]
 8006d32:	2a1b      	cmp	r2, #27
 8006d34:	d803      	bhi.n	8006d3e <_realloc_r+0x116>
 8006d36:	f105 0210 	add.w	r2, r5, #16
 8006d3a:	3408      	adds	r4, #8
 8006d3c:	e012      	b.n	8006d64 <_realloc_r+0x13c>
 8006d3e:	68a1      	ldr	r1, [r4, #8]
 8006d40:	6129      	str	r1, [r5, #16]
 8006d42:	68e1      	ldr	r1, [r4, #12]
 8006d44:	6169      	str	r1, [r5, #20]
 8006d46:	2a24      	cmp	r2, #36	; 0x24
 8006d48:	d003      	beq.n	8006d52 <_realloc_r+0x12a>
 8006d4a:	f105 0218 	add.w	r2, r5, #24
 8006d4e:	3410      	adds	r4, #16
 8006d50:	e008      	b.n	8006d64 <_realloc_r+0x13c>
 8006d52:	6922      	ldr	r2, [r4, #16]
 8006d54:	61aa      	str	r2, [r5, #24]
 8006d56:	6961      	ldr	r1, [r4, #20]
 8006d58:	61e9      	str	r1, [r5, #28]
 8006d5a:	f105 0220 	add.w	r2, r5, #32
 8006d5e:	3418      	adds	r4, #24
 8006d60:	e000      	b.n	8006d64 <_realloc_r+0x13c>
 8006d62:	4642      	mov	r2, r8
 8006d64:	6821      	ldr	r1, [r4, #0]
 8006d66:	6011      	str	r1, [r2, #0]
 8006d68:	6861      	ldr	r1, [r4, #4]
 8006d6a:	6051      	str	r1, [r2, #4]
 8006d6c:	68a1      	ldr	r1, [r4, #8]
 8006d6e:	6091      	str	r1, [r2, #8]
 8006d70:	e005      	b.n	8006d7e <_realloc_r+0x156>
 8006d72:	4640      	mov	r0, r8
 8006d74:	4621      	mov	r1, r4
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	f7ff fc1d 	bl	80065b6 <memmove>
 8006d7c:	9b01      	ldr	r3, [sp, #4]
 8006d7e:	19ea      	adds	r2, r5, r7
 8006d80:	1bdb      	subs	r3, r3, r7
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	f8cb 2008 	str.w	r2, [fp, #8]
 8006d8a:	6053      	str	r3, [r2, #4]
 8006d8c:	686b      	ldr	r3, [r5, #4]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	431f      	orrs	r7, r3
 8006d94:	4648      	mov	r0, r9
 8006d96:	606f      	str	r7, [r5, #4]
 8006d98:	f7ff fc29 	bl	80065ee <__malloc_unlock>
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	e0e7      	b.n	8006f70 <_realloc_r+0x348>
 8006da0:	eb0a 0b00 	add.w	fp, sl, r0
 8006da4:	45bb      	cmp	fp, r7
 8006da6:	db35      	blt.n	8006e14 <_realloc_r+0x1ec>
 8006da8:	68da      	ldr	r2, [r3, #12]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	4628      	mov	r0, r5
 8006dae:	60da      	str	r2, [r3, #12]
 8006db0:	6093      	str	r3, [r2, #8]
 8006db2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006db6:	68eb      	ldr	r3, [r5, #12]
 8006db8:	60d3      	str	r3, [r2, #12]
 8006dba:	609a      	str	r2, [r3, #8]
 8006dbc:	1f32      	subs	r2, r6, #4
 8006dbe:	2a24      	cmp	r2, #36	; 0x24
 8006dc0:	d823      	bhi.n	8006e0a <_realloc_r+0x1e2>
 8006dc2:	2a13      	cmp	r2, #19
 8006dc4:	d91a      	bls.n	8006dfc <_realloc_r+0x1d4>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	60ab      	str	r3, [r5, #8]
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	60eb      	str	r3, [r5, #12]
 8006dce:	2a1b      	cmp	r2, #27
 8006dd0:	d803      	bhi.n	8006dda <_realloc_r+0x1b2>
 8006dd2:	f105 0010 	add.w	r0, r5, #16
 8006dd6:	3408      	adds	r4, #8
 8006dd8:	e010      	b.n	8006dfc <_realloc_r+0x1d4>
 8006dda:	68a3      	ldr	r3, [r4, #8]
 8006ddc:	612b      	str	r3, [r5, #16]
 8006dde:	68e3      	ldr	r3, [r4, #12]
 8006de0:	616b      	str	r3, [r5, #20]
 8006de2:	2a24      	cmp	r2, #36	; 0x24
 8006de4:	d003      	beq.n	8006dee <_realloc_r+0x1c6>
 8006de6:	f105 0018 	add.w	r0, r5, #24
 8006dea:	3410      	adds	r4, #16
 8006dec:	e006      	b.n	8006dfc <_realloc_r+0x1d4>
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	61ab      	str	r3, [r5, #24]
 8006df2:	6963      	ldr	r3, [r4, #20]
 8006df4:	61eb      	str	r3, [r5, #28]
 8006df6:	f105 0020 	add.w	r0, r5, #32
 8006dfa:	3418      	adds	r4, #24
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	6003      	str	r3, [r0, #0]
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	6043      	str	r3, [r0, #4]
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	6083      	str	r3, [r0, #8]
 8006e08:	e002      	b.n	8006e10 <_realloc_r+0x1e8>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f7ff fbd3 	bl	80065b6 <memmove>
 8006e10:	465e      	mov	r6, fp
 8006e12:	e02e      	b.n	8006e72 <_realloc_r+0x24a>
 8006e14:	45ba      	cmp	sl, r7
 8006e16:	db32      	blt.n	8006e7e <_realloc_r+0x256>
 8006e18:	4628      	mov	r0, r5
 8006e1a:	68eb      	ldr	r3, [r5, #12]
 8006e1c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006e20:	60d3      	str	r3, [r2, #12]
 8006e22:	609a      	str	r2, [r3, #8]
 8006e24:	1f32      	subs	r2, r6, #4
 8006e26:	2a24      	cmp	r2, #36	; 0x24
 8006e28:	d825      	bhi.n	8006e76 <_realloc_r+0x24e>
 8006e2a:	2a13      	cmp	r2, #19
 8006e2c:	d91a      	bls.n	8006e64 <_realloc_r+0x23c>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	60ab      	str	r3, [r5, #8]
 8006e32:	6863      	ldr	r3, [r4, #4]
 8006e34:	60eb      	str	r3, [r5, #12]
 8006e36:	2a1b      	cmp	r2, #27
 8006e38:	d803      	bhi.n	8006e42 <_realloc_r+0x21a>
 8006e3a:	f105 0010 	add.w	r0, r5, #16
 8006e3e:	3408      	adds	r4, #8
 8006e40:	e010      	b.n	8006e64 <_realloc_r+0x23c>
 8006e42:	68a3      	ldr	r3, [r4, #8]
 8006e44:	612b      	str	r3, [r5, #16]
 8006e46:	68e3      	ldr	r3, [r4, #12]
 8006e48:	616b      	str	r3, [r5, #20]
 8006e4a:	2a24      	cmp	r2, #36	; 0x24
 8006e4c:	d003      	beq.n	8006e56 <_realloc_r+0x22e>
 8006e4e:	f105 0018 	add.w	r0, r5, #24
 8006e52:	3410      	adds	r4, #16
 8006e54:	e006      	b.n	8006e64 <_realloc_r+0x23c>
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	61ab      	str	r3, [r5, #24]
 8006e5a:	6963      	ldr	r3, [r4, #20]
 8006e5c:	61eb      	str	r3, [r5, #28]
 8006e5e:	f105 0020 	add.w	r0, r5, #32
 8006e62:	3418      	adds	r4, #24
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	6003      	str	r3, [r0, #0]
 8006e68:	6863      	ldr	r3, [r4, #4]
 8006e6a:	6043      	str	r3, [r0, #4]
 8006e6c:	68a3      	ldr	r3, [r4, #8]
 8006e6e:	6083      	str	r3, [r0, #8]
 8006e70:	4656      	mov	r6, sl
 8006e72:	46a8      	mov	r8, r5
 8006e74:	e054      	b.n	8006f20 <_realloc_r+0x2f8>
 8006e76:	4621      	mov	r1, r4
 8006e78:	f7ff fb9d 	bl	80065b6 <memmove>
 8006e7c:	e7f8      	b.n	8006e70 <_realloc_r+0x248>
 8006e7e:	4648      	mov	r0, r9
 8006e80:	4611      	mov	r1, r2
 8006e82:	f7ff f977 	bl	8006174 <_malloc_r>
 8006e86:	4605      	mov	r5, r0
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d044      	beq.n	8006f16 <_realloc_r+0x2ee>
 8006e8c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006e90:	f023 0301 	bic.w	r3, r3, #1
 8006e94:	f1a0 0208 	sub.w	r2, r0, #8
 8006e98:	4443      	add	r3, r8
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d105      	bne.n	8006eaa <_realloc_r+0x282>
 8006e9e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006ea2:	f023 0303 	bic.w	r3, r3, #3
 8006ea6:	441e      	add	r6, r3
 8006ea8:	e03a      	b.n	8006f20 <_realloc_r+0x2f8>
 8006eaa:	1f32      	subs	r2, r6, #4
 8006eac:	2a24      	cmp	r2, #36	; 0x24
 8006eae:	d82b      	bhi.n	8006f08 <_realloc_r+0x2e0>
 8006eb0:	2a13      	cmp	r2, #19
 8006eb2:	d91e      	bls.n	8006ef2 <_realloc_r+0x2ca>
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	6003      	str	r3, [r0, #0]
 8006eb8:	6863      	ldr	r3, [r4, #4]
 8006eba:	6043      	str	r3, [r0, #4]
 8006ebc:	2a1b      	cmp	r2, #27
 8006ebe:	d804      	bhi.n	8006eca <_realloc_r+0x2a2>
 8006ec0:	f100 0308 	add.w	r3, r0, #8
 8006ec4:	f104 0208 	add.w	r2, r4, #8
 8006ec8:	e015      	b.n	8006ef6 <_realloc_r+0x2ce>
 8006eca:	68a3      	ldr	r3, [r4, #8]
 8006ecc:	6083      	str	r3, [r0, #8]
 8006ece:	68e3      	ldr	r3, [r4, #12]
 8006ed0:	60c3      	str	r3, [r0, #12]
 8006ed2:	2a24      	cmp	r2, #36	; 0x24
 8006ed4:	d004      	beq.n	8006ee0 <_realloc_r+0x2b8>
 8006ed6:	f100 0310 	add.w	r3, r0, #16
 8006eda:	f104 0210 	add.w	r2, r4, #16
 8006ede:	e00a      	b.n	8006ef6 <_realloc_r+0x2ce>
 8006ee0:	6923      	ldr	r3, [r4, #16]
 8006ee2:	6103      	str	r3, [r0, #16]
 8006ee4:	6961      	ldr	r1, [r4, #20]
 8006ee6:	6141      	str	r1, [r0, #20]
 8006ee8:	f100 0318 	add.w	r3, r0, #24
 8006eec:	f104 0218 	add.w	r2, r4, #24
 8006ef0:	e001      	b.n	8006ef6 <_realloc_r+0x2ce>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	6811      	ldr	r1, [r2, #0]
 8006ef8:	6019      	str	r1, [r3, #0]
 8006efa:	6851      	ldr	r1, [r2, #4]
 8006efc:	6059      	str	r1, [r3, #4]
 8006efe:	6892      	ldr	r2, [r2, #8]
 8006f00:	609a      	str	r2, [r3, #8]
 8006f02:	e004      	b.n	8006f0e <_realloc_r+0x2e6>
 8006f04:	20000160 	.word	0x20000160
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f7ff fb54 	bl	80065b6 <memmove>
 8006f0e:	4648      	mov	r0, r9
 8006f10:	4621      	mov	r1, r4
 8006f12:	f7fe fe95 	bl	8005c40 <_free_r>
 8006f16:	4648      	mov	r0, r9
 8006f18:	f7ff fb69 	bl	80065ee <__malloc_unlock>
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	e027      	b.n	8006f70 <_realloc_r+0x348>
 8006f20:	1bf3      	subs	r3, r6, r7
 8006f22:	2b0f      	cmp	r3, #15
 8006f24:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006f28:	d913      	bls.n	8006f52 <_realloc_r+0x32a>
 8006f2a:	eb08 0107 	add.w	r1, r8, r7
 8006f2e:	f002 0201 	and.w	r2, r2, #1
 8006f32:	4317      	orrs	r7, r2
 8006f34:	f043 0201 	orr.w	r2, r3, #1
 8006f38:	440b      	add	r3, r1
 8006f3a:	f8c8 7004 	str.w	r7, [r8, #4]
 8006f3e:	604a      	str	r2, [r1, #4]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	605a      	str	r2, [r3, #4]
 8006f48:	4648      	mov	r0, r9
 8006f4a:	3108      	adds	r1, #8
 8006f4c:	f7fe fe78 	bl	8005c40 <_free_r>
 8006f50:	e009      	b.n	8006f66 <_realloc_r+0x33e>
 8006f52:	f002 0201 	and.w	r2, r2, #1
 8006f56:	4332      	orrs	r2, r6
 8006f58:	4446      	add	r6, r8
 8006f5a:	f8c8 2004 	str.w	r2, [r8, #4]
 8006f5e:	6873      	ldr	r3, [r6, #4]
 8006f60:	f043 0301 	orr.w	r3, r3, #1
 8006f64:	6073      	str	r3, [r6, #4]
 8006f66:	4648      	mov	r0, r9
 8006f68:	f7ff fb41 	bl	80065ee <__malloc_unlock>
 8006f6c:	f108 0008 	add.w	r0, r8, #8
 8006f70:	b003      	add	sp, #12
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	bf00      	nop

08006f78 <__fpclassifyd>:
 8006f78:	ec51 0b10 	vmov	r0, r1, d0
 8006f7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8006f80:	b510      	push	{r4, lr}
 8006f82:	d100      	bne.n	8006f86 <__fpclassifyd+0xe>
 8006f84:	b178      	cbz	r0, 8006fa6 <__fpclassifyd+0x2e>
 8006f86:	4a0c      	ldr	r2, [pc, #48]	; (8006fb8 <__fpclassifyd+0x40>)
 8006f88:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8006f8c:	4294      	cmp	r4, r2
 8006f8e:	d90c      	bls.n	8006faa <__fpclassifyd+0x32>
 8006f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f94:	d30b      	bcc.n	8006fae <__fpclassifyd+0x36>
 8006f96:	4a09      	ldr	r2, [pc, #36]	; (8006fbc <__fpclassifyd+0x44>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d10a      	bne.n	8006fb2 <__fpclassifyd+0x3a>
 8006f9c:	f1d0 0001 	rsbs	r0, r0, #1
 8006fa0:	bf38      	it	cc
 8006fa2:	2000      	movcc	r0, #0
 8006fa4:	bd10      	pop	{r4, pc}
 8006fa6:	2002      	movs	r0, #2
 8006fa8:	bd10      	pop	{r4, pc}
 8006faa:	2004      	movs	r0, #4
 8006fac:	bd10      	pop	{r4, pc}
 8006fae:	2003      	movs	r0, #3
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	bf00      	nop
 8006fb8:	7fdfffff 	.word	0x7fdfffff
 8006fbc:	7ff00000 	.word	0x7ff00000

08006fc0 <_sbrk_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4c06      	ldr	r4, [pc, #24]	; (8006fdc <_sbrk_r+0x1c>)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	4608      	mov	r0, r1
 8006fca:	6023      	str	r3, [r4, #0]
 8006fcc:	f000 f84e 	bl	800706c <_sbrk>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_sbrk_r+0x1a>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_sbrk_r+0x1a>
 8006fd8:	602b      	str	r3, [r5, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	20000a84 	.word	0x20000a84

08006fe0 <__sread>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe8:	f000 fa30 	bl	800744c <_read_r>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	db03      	blt.n	8006ff8 <__sread+0x18>
 8006ff0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006ff2:	4403      	add	r3, r0
 8006ff4:	6563      	str	r3, [r4, #84]	; 0x54
 8006ff6:	bd10      	pop	{r4, pc}
 8006ff8:	89a3      	ldrh	r3, [r4, #12]
 8006ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ffe:	81a3      	strh	r3, [r4, #12]
 8007000:	bd10      	pop	{r4, pc}

08007002 <__swrite>:
 8007002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007006:	461d      	mov	r5, r3
 8007008:	898b      	ldrh	r3, [r1, #12]
 800700a:	05db      	lsls	r3, r3, #23
 800700c:	4607      	mov	r7, r0
 800700e:	460c      	mov	r4, r1
 8007010:	4616      	mov	r6, r2
 8007012:	d505      	bpl.n	8007020 <__swrite+0x1e>
 8007014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007018:	2200      	movs	r2, #0
 800701a:	2302      	movs	r3, #2
 800701c:	f000 fa04 	bl	8007428 <_lseek_r>
 8007020:	89a3      	ldrh	r3, [r4, #12]
 8007022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800702a:	81a3      	strh	r3, [r4, #12]
 800702c:	4638      	mov	r0, r7
 800702e:	4632      	mov	r2, r6
 8007030:	462b      	mov	r3, r5
 8007032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007036:	f000 b8d3 	b.w	80071e0 <_write_r>

0800703a <__sseek>:
 800703a:	b510      	push	{r4, lr}
 800703c:	460c      	mov	r4, r1
 800703e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007042:	f000 f9f1 	bl	8007428 <_lseek_r>
 8007046:	1c43      	adds	r3, r0, #1
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	d103      	bne.n	8007054 <__sseek+0x1a>
 800704c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007050:	81a3      	strh	r3, [r4, #12]
 8007052:	bd10      	pop	{r4, pc}
 8007054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007058:	81a3      	strh	r3, [r4, #12]
 800705a:	6560      	str	r0, [r4, #84]	; 0x54
 800705c:	bd10      	pop	{r4, pc}

0800705e <__sclose>:
 800705e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007062:	f000 b8fd 	b.w	8007260 <_close_r>

08007066 <_write>:
 8007066:	4610      	mov	r0, r2
 8007068:	4770      	bx	lr
	...

0800706c <_sbrk>:
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <_sbrk+0x28>)
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	b90a      	cbnz	r2, 8007076 <_sbrk+0xa>
 8007072:	4a09      	ldr	r2, [pc, #36]	; (8007098 <_sbrk+0x2c>)
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	466a      	mov	r2, sp
 800707a:	4418      	add	r0, r3
 800707c:	4290      	cmp	r0, r2
 800707e:	d905      	bls.n	800708c <_sbrk+0x20>
 8007080:	4b06      	ldr	r3, [pc, #24]	; (800709c <_sbrk+0x30>)
 8007082:	220c      	movs	r2, #12
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	f04f 30ff 	mov.w	r0, #4294967295
 800708a:	4770      	bx	lr
 800708c:	4a01      	ldr	r2, [pc, #4]	; (8007094 <_sbrk+0x28>)
 800708e:	6010      	str	r0, [r2, #0]
 8007090:	4618      	mov	r0, r3
 8007092:	4770      	bx	lr
 8007094:	200009b0 	.word	0x200009b0
 8007098:	20000a88 	.word	0x20000a88
 800709c:	20000a84 	.word	0x20000a84

080070a0 <_close>:
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	4770      	bx	lr

080070a6 <_fstat>:
 80070a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070aa:	604b      	str	r3, [r1, #4]
 80070ac:	2000      	movs	r0, #0
 80070ae:	4770      	bx	lr

080070b0 <_isatty>:
 80070b0:	2001      	movs	r0, #1
 80070b2:	4770      	bx	lr

080070b4 <_lseek>:
 80070b4:	2000      	movs	r0, #0
 80070b6:	4770      	bx	lr

080070b8 <_read>:
 80070b8:	2000      	movs	r0, #0
 80070ba:	4770      	bx	lr

080070bc <__sprint_r>:
 80070bc:	6893      	ldr	r3, [r2, #8]
 80070be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c2:	4681      	mov	r9, r0
 80070c4:	460f      	mov	r7, r1
 80070c6:	4614      	mov	r4, r2
 80070c8:	b91b      	cbnz	r3, 80070d2 <__sprint_r+0x16>
 80070ca:	6053      	str	r3, [r2, #4]
 80070cc:	4618      	mov	r0, r3
 80070ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070d2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80070d4:	049d      	lsls	r5, r3, #18
 80070d6:	d51d      	bpl.n	8007114 <__sprint_r+0x58>
 80070d8:	6815      	ldr	r5, [r2, #0]
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	3508      	adds	r5, #8
 80070de:	b1bb      	cbz	r3, 8007110 <__sprint_r+0x54>
 80070e0:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80070e4:	f855 ac08 	ldr.w	sl, [r5, #-8]
 80070e8:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80070ec:	2600      	movs	r6, #0
 80070ee:	4546      	cmp	r6, r8
 80070f0:	da09      	bge.n	8007106 <__sprint_r+0x4a>
 80070f2:	4648      	mov	r0, r9
 80070f4:	f85a 1026 	ldr.w	r1, [sl, r6, lsl #2]
 80070f8:	463a      	mov	r2, r7
 80070fa:	f000 f91b 	bl	8007334 <_fputwc_r>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d00a      	beq.n	8007118 <__sprint_r+0x5c>
 8007102:	3601      	adds	r6, #1
 8007104:	e7f3      	b.n	80070ee <__sprint_r+0x32>
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	eba3 0388 	sub.w	r3, r3, r8, lsl #2
 800710c:	60a3      	str	r3, [r4, #8]
 800710e:	e7e4      	b.n	80070da <__sprint_r+0x1e>
 8007110:	4618      	mov	r0, r3
 8007112:	e001      	b.n	8007118 <__sprint_r+0x5c>
 8007114:	f7fe fe4c 	bl	8005db0 <__sfvwrite_r>
 8007118:	2300      	movs	r3, #0
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	6063      	str	r3, [r4, #4]
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007124 <__swbuf_r>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	460e      	mov	r6, r1
 8007128:	4614      	mov	r4, r2
 800712a:	4605      	mov	r5, r0
 800712c:	b118      	cbz	r0, 8007136 <__swbuf_r+0x12>
 800712e:	6983      	ldr	r3, [r0, #24]
 8007130:	b90b      	cbnz	r3, 8007136 <__swbuf_r+0x12>
 8007132:	f7fe fc6f 	bl	8005a14 <__sinit>
 8007136:	4b27      	ldr	r3, [pc, #156]	; (80071d4 <__swbuf_r+0xb0>)
 8007138:	429c      	cmp	r4, r3
 800713a:	d101      	bne.n	8007140 <__swbuf_r+0x1c>
 800713c:	686c      	ldr	r4, [r5, #4]
 800713e:	e008      	b.n	8007152 <__swbuf_r+0x2e>
 8007140:	4b25      	ldr	r3, [pc, #148]	; (80071d8 <__swbuf_r+0xb4>)
 8007142:	429c      	cmp	r4, r3
 8007144:	d101      	bne.n	800714a <__swbuf_r+0x26>
 8007146:	68ac      	ldr	r4, [r5, #8]
 8007148:	e003      	b.n	8007152 <__swbuf_r+0x2e>
 800714a:	4b24      	ldr	r3, [pc, #144]	; (80071dc <__swbuf_r+0xb8>)
 800714c:	429c      	cmp	r4, r3
 800714e:	bf08      	it	eq
 8007150:	68ec      	ldreq	r4, [r5, #12]
 8007152:	69a3      	ldr	r3, [r4, #24]
 8007154:	60a3      	str	r3, [r4, #8]
 8007156:	89a3      	ldrh	r3, [r4, #12]
 8007158:	0719      	lsls	r1, r3, #28
 800715a:	d50d      	bpl.n	8007178 <__swbuf_r+0x54>
 800715c:	6923      	ldr	r3, [r4, #16]
 800715e:	b15b      	cbz	r3, 8007178 <__swbuf_r+0x54>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	049a      	lsls	r2, r3, #18
 8007164:	b2f6      	uxtb	r6, r6
 8007166:	d410      	bmi.n	800718a <__swbuf_r+0x66>
 8007168:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007174:	6663      	str	r3, [r4, #100]	; 0x64
 8007176:	e008      	b.n	800718a <__swbuf_r+0x66>
 8007178:	4628      	mov	r0, r5
 800717a:	4621      	mov	r1, r4
 800717c:	f7fd fcc2 	bl	8004b04 <__swsetup_r>
 8007180:	2800      	cmp	r0, #0
 8007182:	d0ed      	beq.n	8007160 <__swbuf_r+0x3c>
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	bd70      	pop	{r4, r5, r6, pc}
 800718a:	6923      	ldr	r3, [r4, #16]
 800718c:	6820      	ldr	r0, [r4, #0]
 800718e:	1ac0      	subs	r0, r0, r3
 8007190:	6963      	ldr	r3, [r4, #20]
 8007192:	4298      	cmp	r0, r3
 8007194:	db05      	blt.n	80071a2 <__swbuf_r+0x7e>
 8007196:	4628      	mov	r0, r5
 8007198:	4621      	mov	r1, r4
 800719a:	f7fe fbf5 	bl	8005988 <_fflush_r>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d1f0      	bne.n	8007184 <__swbuf_r+0x60>
 80071a2:	68a3      	ldr	r3, [r4, #8]
 80071a4:	3b01      	subs	r3, #1
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	1c5a      	adds	r2, r3, #1
 80071ac:	6022      	str	r2, [r4, #0]
 80071ae:	701e      	strb	r6, [r3, #0]
 80071b0:	6963      	ldr	r3, [r4, #20]
 80071b2:	3001      	adds	r0, #1
 80071b4:	4298      	cmp	r0, r3
 80071b6:	d004      	beq.n	80071c2 <__swbuf_r+0x9e>
 80071b8:	89a3      	ldrh	r3, [r4, #12]
 80071ba:	07db      	lsls	r3, r3, #31
 80071bc:	d507      	bpl.n	80071ce <__swbuf_r+0xaa>
 80071be:	2e0a      	cmp	r6, #10
 80071c0:	d105      	bne.n	80071ce <__swbuf_r+0xaa>
 80071c2:	4628      	mov	r0, r5
 80071c4:	4621      	mov	r1, r4
 80071c6:	f7fe fbdf 	bl	8005988 <_fflush_r>
 80071ca:	2800      	cmp	r0, #0
 80071cc:	d1da      	bne.n	8007184 <__swbuf_r+0x60>
 80071ce:	4630      	mov	r0, r6
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
 80071d2:	bf00      	nop
 80071d4:	08007740 	.word	0x08007740
 80071d8:	08007760 	.word	0x08007760
 80071dc:	08007780 	.word	0x08007780

080071e0 <_write_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4c07      	ldr	r4, [pc, #28]	; (8007200 <_write_r+0x20>)
 80071e4:	4605      	mov	r5, r0
 80071e6:	2000      	movs	r0, #0
 80071e8:	6020      	str	r0, [r4, #0]
 80071ea:	4608      	mov	r0, r1
 80071ec:	4611      	mov	r1, r2
 80071ee:	461a      	mov	r2, r3
 80071f0:	f7ff ff39 	bl	8007066 <_write>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_write_r+0x1e>
 80071f8:	6823      	ldr	r3, [r4, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_write_r+0x1e>
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	20000a84 	.word	0x20000a84

08007204 <_calloc_r>:
 8007204:	b510      	push	{r4, lr}
 8007206:	4351      	muls	r1, r2
 8007208:	f7fe ffb4 	bl	8006174 <_malloc_r>
 800720c:	4604      	mov	r4, r0
 800720e:	b320      	cbz	r0, 800725a <_calloc_r+0x56>
 8007210:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007214:	f022 0203 	bic.w	r2, r2, #3
 8007218:	3a04      	subs	r2, #4
 800721a:	2a24      	cmp	r2, #36	; 0x24
 800721c:	d81a      	bhi.n	8007254 <_calloc_r+0x50>
 800721e:	2a13      	cmp	r2, #19
 8007220:	d912      	bls.n	8007248 <_calloc_r+0x44>
 8007222:	2100      	movs	r1, #0
 8007224:	2a1b      	cmp	r2, #27
 8007226:	6001      	str	r1, [r0, #0]
 8007228:	6041      	str	r1, [r0, #4]
 800722a:	d802      	bhi.n	8007232 <_calloc_r+0x2e>
 800722c:	f100 0308 	add.w	r3, r0, #8
 8007230:	e00b      	b.n	800724a <_calloc_r+0x46>
 8007232:	2a24      	cmp	r2, #36	; 0x24
 8007234:	6081      	str	r1, [r0, #8]
 8007236:	60c1      	str	r1, [r0, #12]
 8007238:	bf11      	iteee	ne
 800723a:	f100 0310 	addne.w	r3, r0, #16
 800723e:	6101      	streq	r1, [r0, #16]
 8007240:	f100 0318 	addeq.w	r3, r0, #24
 8007244:	6141      	streq	r1, [r0, #20]
 8007246:	e000      	b.n	800724a <_calloc_r+0x46>
 8007248:	4603      	mov	r3, r0
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	605a      	str	r2, [r3, #4]
 8007250:	609a      	str	r2, [r3, #8]
 8007252:	e002      	b.n	800725a <_calloc_r+0x56>
 8007254:	2100      	movs	r1, #0
 8007256:	f7fc fbd4 	bl	8003a02 <memset>
 800725a:	4620      	mov	r0, r4
 800725c:	bd10      	pop	{r4, pc}
	...

08007260 <_close_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	4c06      	ldr	r4, [pc, #24]	; (800727c <_close_r+0x1c>)
 8007264:	2300      	movs	r3, #0
 8007266:	4605      	mov	r5, r0
 8007268:	4608      	mov	r0, r1
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	f7ff ff18 	bl	80070a0 <_close>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_close_r+0x1a>
 8007274:	6823      	ldr	r3, [r4, #0]
 8007276:	b103      	cbz	r3, 800727a <_close_r+0x1a>
 8007278:	602b      	str	r3, [r5, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	20000a84 	.word	0x20000a84

08007280 <_fclose_r>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4605      	mov	r5, r0
 8007284:	460c      	mov	r4, r1
 8007286:	b909      	cbnz	r1, 800728c <_fclose_r+0xc>
 8007288:	2000      	movs	r0, #0
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	b118      	cbz	r0, 8007296 <_fclose_r+0x16>
 800728e:	6983      	ldr	r3, [r0, #24]
 8007290:	b90b      	cbnz	r3, 8007296 <_fclose_r+0x16>
 8007292:	f7fe fbbf 	bl	8005a14 <__sinit>
 8007296:	4b20      	ldr	r3, [pc, #128]	; (8007318 <_fclose_r+0x98>)
 8007298:	429c      	cmp	r4, r3
 800729a:	d101      	bne.n	80072a0 <_fclose_r+0x20>
 800729c:	686c      	ldr	r4, [r5, #4]
 800729e:	e008      	b.n	80072b2 <_fclose_r+0x32>
 80072a0:	4b1e      	ldr	r3, [pc, #120]	; (800731c <_fclose_r+0x9c>)
 80072a2:	429c      	cmp	r4, r3
 80072a4:	d101      	bne.n	80072aa <_fclose_r+0x2a>
 80072a6:	68ac      	ldr	r4, [r5, #8]
 80072a8:	e003      	b.n	80072b2 <_fclose_r+0x32>
 80072aa:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <_fclose_r+0xa0>)
 80072ac:	429c      	cmp	r4, r3
 80072ae:	bf08      	it	eq
 80072b0:	68ec      	ldreq	r4, [r5, #12]
 80072b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d0e6      	beq.n	8007288 <_fclose_r+0x8>
 80072ba:	4628      	mov	r0, r5
 80072bc:	4621      	mov	r1, r4
 80072be:	f7fe fb63 	bl	8005988 <_fflush_r>
 80072c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072c4:	4606      	mov	r6, r0
 80072c6:	b133      	cbz	r3, 80072d6 <_fclose_r+0x56>
 80072c8:	4628      	mov	r0, r5
 80072ca:	6a21      	ldr	r1, [r4, #32]
 80072cc:	4798      	blx	r3
 80072ce:	2800      	cmp	r0, #0
 80072d0:	bfb8      	it	lt
 80072d2:	f04f 36ff 	movlt.w	r6, #4294967295
 80072d6:	89a3      	ldrh	r3, [r4, #12]
 80072d8:	061b      	lsls	r3, r3, #24
 80072da:	d503      	bpl.n	80072e4 <_fclose_r+0x64>
 80072dc:	4628      	mov	r0, r5
 80072de:	6921      	ldr	r1, [r4, #16]
 80072e0:	f7fe fcae 	bl	8005c40 <_free_r>
 80072e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072e6:	b141      	cbz	r1, 80072fa <_fclose_r+0x7a>
 80072e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072ec:	4299      	cmp	r1, r3
 80072ee:	d002      	beq.n	80072f6 <_fclose_r+0x76>
 80072f0:	4628      	mov	r0, r5
 80072f2:	f7fe fca5 	bl	8005c40 <_free_r>
 80072f6:	2300      	movs	r3, #0
 80072f8:	6363      	str	r3, [r4, #52]	; 0x34
 80072fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80072fc:	b121      	cbz	r1, 8007308 <_fclose_r+0x88>
 80072fe:	4628      	mov	r0, r5
 8007300:	f7fe fc9e 	bl	8005c40 <_free_r>
 8007304:	2300      	movs	r3, #0
 8007306:	64a3      	str	r3, [r4, #72]	; 0x48
 8007308:	f7fe fc44 	bl	8005b94 <__sfp_lock_acquire>
 800730c:	2300      	movs	r3, #0
 800730e:	81a3      	strh	r3, [r4, #12]
 8007310:	f7fe fc41 	bl	8005b96 <__sfp_lock_release>
 8007314:	4630      	mov	r0, r6
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	08007740 	.word	0x08007740
 800731c:	08007760 	.word	0x08007760
 8007320:	08007780 	.word	0x08007780

08007324 <fclose>:
 8007324:	4b02      	ldr	r3, [pc, #8]	; (8007330 <fclose+0xc>)
 8007326:	4601      	mov	r1, r0
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	f7ff bfa9 	b.w	8007280 <_fclose_r>
 800732e:	bf00      	nop
 8007330:	20000100 	.word	0x20000100

08007334 <_fputwc_r>:
 8007334:	8993      	ldrh	r3, [r2, #12]
 8007336:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800733a:	460e      	mov	r6, r1
 800733c:	0499      	lsls	r1, r3, #18
 800733e:	4680      	mov	r8, r0
 8007340:	4614      	mov	r4, r2
 8007342:	d406      	bmi.n	8007352 <_fputwc_r+0x1e>
 8007344:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007348:	8193      	strh	r3, [r2, #12]
 800734a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800734c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007350:	6653      	str	r3, [r2, #100]	; 0x64
 8007352:	f7fe fe99 	bl	8006088 <__locale_mb_cur_max>
 8007356:	2801      	cmp	r0, #1
 8007358:	d106      	bne.n	8007368 <_fputwc_r+0x34>
 800735a:	1e73      	subs	r3, r6, #1
 800735c:	2bfe      	cmp	r3, #254	; 0xfe
 800735e:	d803      	bhi.n	8007368 <_fputwc_r+0x34>
 8007360:	f88d 6004 	strb.w	r6, [sp, #4]
 8007364:	4607      	mov	r7, r0
 8007366:	e00e      	b.n	8007386 <_fputwc_r+0x52>
 8007368:	4632      	mov	r2, r6
 800736a:	4640      	mov	r0, r8
 800736c:	a901      	add	r1, sp, #4
 800736e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8007372:	f000 f87d 	bl	8007470 <_wcrtomb_r>
 8007376:	1c42      	adds	r2, r0, #1
 8007378:	4607      	mov	r7, r0
 800737a:	d104      	bne.n	8007386 <_fputwc_r+0x52>
 800737c:	89a3      	ldrh	r3, [r4, #12]
 800737e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	e02b      	b.n	80073de <_fputwc_r+0xaa>
 8007386:	2500      	movs	r5, #0
 8007388:	42bd      	cmp	r5, r7
 800738a:	d024      	beq.n	80073d6 <_fputwc_r+0xa2>
 800738c:	68a2      	ldr	r2, [r4, #8]
 800738e:	3a01      	subs	r2, #1
 8007390:	2a00      	cmp	r2, #0
 8007392:	60a2      	str	r2, [r4, #8]
 8007394:	ab01      	add	r3, sp, #4
 8007396:	da16      	bge.n	80073c6 <_fputwc_r+0x92>
 8007398:	69a1      	ldr	r1, [r4, #24]
 800739a:	428a      	cmp	r2, r1
 800739c:	db08      	blt.n	80073b0 <_fputwc_r+0x7c>
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	5d5b      	ldrb	r3, [r3, r5]
 80073a2:	7013      	strb	r3, [r2, #0]
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	7819      	ldrb	r1, [r3, #0]
 80073a8:	290a      	cmp	r1, #10
 80073aa:	d110      	bne.n	80073ce <_fputwc_r+0x9a>
 80073ac:	4640      	mov	r0, r8
 80073ae:	e001      	b.n	80073b4 <_fputwc_r+0x80>
 80073b0:	5d59      	ldrb	r1, [r3, r5]
 80073b2:	4640      	mov	r0, r8
 80073b4:	4622      	mov	r2, r4
 80073b6:	f7ff feb5 	bl	8007124 <__swbuf_r>
 80073ba:	f1b0 33ff 	subs.w	r3, r0, #4294967295
 80073be:	4258      	negs	r0, r3
 80073c0:	4158      	adcs	r0, r3
 80073c2:	b130      	cbz	r0, 80073d2 <_fputwc_r+0x9e>
 80073c4:	e009      	b.n	80073da <_fputwc_r+0xa6>
 80073c6:	6822      	ldr	r2, [r4, #0]
 80073c8:	5d5b      	ldrb	r3, [r3, r5]
 80073ca:	7013      	strb	r3, [r2, #0]
 80073cc:	6823      	ldr	r3, [r4, #0]
 80073ce:	3301      	adds	r3, #1
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	3501      	adds	r5, #1
 80073d4:	e7d8      	b.n	8007388 <_fputwc_r+0x54>
 80073d6:	4630      	mov	r0, r6
 80073d8:	e001      	b.n	80073de <_fputwc_r+0xaa>
 80073da:	f04f 30ff 	mov.w	r0, #4294967295
 80073de:	b002      	add	sp, #8
 80073e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073e4 <_fstat_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4c07      	ldr	r4, [pc, #28]	; (8007404 <_fstat_r+0x20>)
 80073e8:	2300      	movs	r3, #0
 80073ea:	4605      	mov	r5, r0
 80073ec:	4608      	mov	r0, r1
 80073ee:	4611      	mov	r1, r2
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	f7ff fe58 	bl	80070a6 <_fstat>
 80073f6:	1c43      	adds	r3, r0, #1
 80073f8:	d102      	bne.n	8007400 <_fstat_r+0x1c>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	b103      	cbz	r3, 8007400 <_fstat_r+0x1c>
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	bd38      	pop	{r3, r4, r5, pc}
 8007402:	bf00      	nop
 8007404:	20000a84 	.word	0x20000a84

08007408 <_isatty_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4c06      	ldr	r4, [pc, #24]	; (8007424 <_isatty_r+0x1c>)
 800740c:	2300      	movs	r3, #0
 800740e:	4605      	mov	r5, r0
 8007410:	4608      	mov	r0, r1
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	f7ff fe4c 	bl	80070b0 <_isatty>
 8007418:	1c43      	adds	r3, r0, #1
 800741a:	d102      	bne.n	8007422 <_isatty_r+0x1a>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	b103      	cbz	r3, 8007422 <_isatty_r+0x1a>
 8007420:	602b      	str	r3, [r5, #0]
 8007422:	bd38      	pop	{r3, r4, r5, pc}
 8007424:	20000a84 	.word	0x20000a84

08007428 <_lseek_r>:
 8007428:	b538      	push	{r3, r4, r5, lr}
 800742a:	4c07      	ldr	r4, [pc, #28]	; (8007448 <_lseek_r+0x20>)
 800742c:	4605      	mov	r5, r0
 800742e:	2000      	movs	r0, #0
 8007430:	6020      	str	r0, [r4, #0]
 8007432:	4608      	mov	r0, r1
 8007434:	4611      	mov	r1, r2
 8007436:	461a      	mov	r2, r3
 8007438:	f7ff fe3c 	bl	80070b4 <_lseek>
 800743c:	1c43      	adds	r3, r0, #1
 800743e:	d102      	bne.n	8007446 <_lseek_r+0x1e>
 8007440:	6823      	ldr	r3, [r4, #0]
 8007442:	b103      	cbz	r3, 8007446 <_lseek_r+0x1e>
 8007444:	602b      	str	r3, [r5, #0]
 8007446:	bd38      	pop	{r3, r4, r5, pc}
 8007448:	20000a84 	.word	0x20000a84

0800744c <_read_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4c07      	ldr	r4, [pc, #28]	; (800746c <_read_r+0x20>)
 8007450:	4605      	mov	r5, r0
 8007452:	2000      	movs	r0, #0
 8007454:	6020      	str	r0, [r4, #0]
 8007456:	4608      	mov	r0, r1
 8007458:	4611      	mov	r1, r2
 800745a:	461a      	mov	r2, r3
 800745c:	f7ff fe2c 	bl	80070b8 <_read>
 8007460:	1c43      	adds	r3, r0, #1
 8007462:	d102      	bne.n	800746a <_read_r+0x1e>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	b103      	cbz	r3, 800746a <_read_r+0x1e>
 8007468:	602b      	str	r3, [r5, #0]
 800746a:	bd38      	pop	{r3, r4, r5, pc}
 800746c:	20000a84 	.word	0x20000a84

08007470 <_wcrtomb_r>:
 8007470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	461d      	mov	r5, r3
 8007476:	4b10      	ldr	r3, [pc, #64]	; (80074b8 <_wcrtomb_r+0x48>)
 8007478:	b086      	sub	sp, #24
 800747a:	4604      	mov	r4, r0
 800747c:	4690      	mov	r8, r2
 800747e:	460e      	mov	r6, r1
 8007480:	681f      	ldr	r7, [r3, #0]
 8007482:	b939      	cbnz	r1, 8007494 <_wcrtomb_r+0x24>
 8007484:	f7fe fdfc 	bl	8006080 <__locale_charset>
 8007488:	9500      	str	r5, [sp, #0]
 800748a:	4603      	mov	r3, r0
 800748c:	a903      	add	r1, sp, #12
 800748e:	4620      	mov	r0, r4
 8007490:	4632      	mov	r2, r6
 8007492:	e006      	b.n	80074a2 <_wcrtomb_r+0x32>
 8007494:	f7fe fdf4 	bl	8006080 <__locale_charset>
 8007498:	9500      	str	r5, [sp, #0]
 800749a:	4603      	mov	r3, r0
 800749c:	4631      	mov	r1, r6
 800749e:	4620      	mov	r0, r4
 80074a0:	4642      	mov	r2, r8
 80074a2:	47b8      	blx	r7
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d103      	bne.n	80074b0 <_wcrtomb_r+0x40>
 80074a8:	2300      	movs	r3, #0
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	238a      	movs	r3, #138	; 0x8a
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	b006      	add	sp, #24
 80074b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b6:	bf00      	nop
 80074b8:	20000570 	.word	0x20000570

080074bc <__ascii_wctomb>:
 80074bc:	b149      	cbz	r1, 80074d2 <__ascii_wctomb+0x16>
 80074be:	2aff      	cmp	r2, #255	; 0xff
 80074c0:	d904      	bls.n	80074cc <__ascii_wctomb+0x10>
 80074c2:	238a      	movs	r3, #138	; 0x8a
 80074c4:	6003      	str	r3, [r0, #0]
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	4770      	bx	lr
 80074cc:	700a      	strb	r2, [r1, #0]
 80074ce:	2001      	movs	r0, #1
 80074d0:	4770      	bx	lr
 80074d2:	4608      	mov	r0, r1
 80074d4:	4770      	bx	lr
	...

080074d8 <_init>:
 80074d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074da:	bf00      	nop
 80074dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074de:	bc08      	pop	{r3}
 80074e0:	469e      	mov	lr, r3
 80074e2:	4770      	bx	lr

080074e4 <_fini>:
 80074e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074e6:	bf00      	nop
 80074e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074ea:	bc08      	pop	{r3}
 80074ec:	469e      	mov	lr, r3
 80074ee:	4770      	bx	lr
